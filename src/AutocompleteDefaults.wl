{<|"label"->"Drop", "type"->"keyword", "info"->"Drop[list, n] gives list with its first n elements dropped."|>, <|"label"->"NotebookDirectory", "type"->"keyword", "info"->"NotebookDirectory[] returns a path to a directory of the current notebook"|>, <|"label"->"EvaluationCell", "type"->"keyword", "info"->"EvaluationCell[] returns a reference to the current input cell"|>, <|"label"->"SystemOpen", "type"->"keyword", "info"->"SystemOpen[path_String | _File | _URL] opens a path using system call"|>, <|"label" -> "Annotation", "type" -> "keyword", 
  "info" -> "Annotation[expr, data] annotates arbitary expression with data (invisible on output). Annotation[edge_, key_->value_] annotates edge of a graph"|>, <|"label" -> "Integrate", "type" -> "keyword", "info" -> "Integrate[f[x], x] gives the indefinite integral. Integrate[f[x], {x, min, max}] gives the definite integral..."|>, <|"label" -> "TableForm", "type" -> "keyword", "info" -> "TableForm[expr_List] formats list of lists as table"|>, <|"label" -> "Item", "type" -> "keyword", "info" -> "Use it inside Grid, TableForm to color or stylize font of expression. Accepts the same options as Style[]"|>, <|"label" -> "ToExpression", "type" -> "keyword", 
  "info" -> "gives the expression obtained by interpreting strings as Wolfram \
Language input"|>, <|"label" -> "MakeBoxes", "type" -> "keyword", 
  "info" -> "MakeBoxes[expr,form] is the low-level function used to convert \
expressions into expressions representing different output forms"|>, 
 <|"label" -> "Transpose", "type" -> "keyword", 
  "info" -> "transposes the first two levels in list"|>, 
 <|"label" -> "Series", "type" -> "keyword", 
  "info" -> "Series[f,{x,x0,n}] generates a power series expansion"|>, 
 <|"label" -> "AASTriangle", "type" -> "keyword", 
  "info" -> "AASTriangle[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, a] returns a filled triangle with angles \
\[CapitalATilde]\216\\[PlusMinus] and \[CapitalATilde]\216b2 and side length \
a, where a is adj"|>, <|"label" -> "AbelianGroup", "type" -> "keyword", 
  "info" -> "AbelianGroup[{n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents the \
direct product of the cyclic groups of degrees n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n "|>, 
 <|"label" -> "Abort", "type" -> "keyword", 
  "info" -> "Abort[] generates an interrupt to abort a computation. "|>, 
 <|"label" -> "AbortKernels", "type" -> "keyword", 
  "info" -> 
   "AbortKernels[] aborts evaluations running in all parallel subkernels."|>, 
 <|"label" -> "AbortProtect", "type" -> "keyword", 
  "info" -> "AbortProtect[expr] evaluates expr, saving any aborts until the \
evaluation is complete. "|>, <|"label" -> "Above", "type" -> "keyword", 
  "info" -> "Above is a symbol that represents the region above an object for \
purposes of placement."|>, <|"label" -> "Abs", "type" -> "keyword", 
  "info" -> 
   "Abs[z] gives the absolute value of the real or complex number z. "|>, 
 <|"label" -> "AbsArg", "type" -> "keyword", 
  "info" -> "AbsArg[z] gives the list {Abs[z], Arg[z]} of the number z."|>, 
 <|"label" -> "AbsArgPlot", "type" -> "keyword", 
  "info" -> "AbsArgPlot[f, {x, x   , x   }] generates a plot of Abs[f] \
colored by Arg[f] as a function of x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\257\[CapitalAHat]\236\\[Micro] f"|>, 
 <|"label" -> "AbsoluteCorrelationFunction", "type" -> "keyword", 
  "info" -> "AbsoluteCorrelationFunction[data, hspec] estimates the absolute \
correlation function at lags hspec f"|>, <|"label" -> "AbsoluteCurrentValue", 
  "type" -> "keyword", "info" -> "AbsoluteCurrentValue[item] gives the \
absolute current value of item at a location in the Wolfram Sys"|>, 
 <|"label" -> "AbsoluteDashing", "type" -> "keyword", 
  "info" -> "AbsoluteDashing[{d , d , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a graphics \
directive which specifies that lines which follow are to "|>, 
 <|"label" -> "AbsoluteFileName", "type" -> "keyword", 
  "info" -> "AbsoluteFileName[\"name\"] gives the full absolute version of \
the name for a file in your filesystem."|>, <|"label" -> "AbsoluteOptions", 
  "type" -> "keyword", "info" -> "AbsoluteOptions[expr] gives the absolute \
settings of options specified in an expression such as a gr"|>, 
 <|"label" -> "AbsolutePointSize", "type" -> "keyword", 
  "info" -> "AbsolutePointSize[d] is a graphics directive which specifies \
that points which follow are to be show"|>, <|"label" -> "AbsoluteThickness", 
  "type" -> "keyword", "info" -> "AbsoluteThickness[d] is a graphics \
directive which specifies that lines which follow are to be drawn"|>, 
 <|"label" -> "AbsoluteTime", "type" -> "keyword", 
  "info" -> "AbsoluteTime[] gives the total number of seconds since the \
beginning of January 1, 1900, in your tim"|>, <|"label" -> "AbsoluteTiming", 
  "type" -> "keyword", "info" -> "AbsoluteTiming[expr] evaluates expr, \
returning a list of the absolute number of seconds in real time"|>, 
 <|"label" -> "AcceptanceThreshold", "type" -> "keyword", 
  "info" -> "AcceptanceThreshold is an option that specifies the minimum \
threshold at which a result is considere"|>, <|"label" -> "AccountingForm", 
  "type" -> "keyword", "info" -> "AccountingForm[expr] prints with all \
numbers in expr given in standard accounting notation. Accounti"|>, 
 <|"label" -> "Accumulate", "type" -> "keyword", 
  "info" -> "Accumulate[list] gives a list of the successive accumulated \
totals of elements in list. "|>, <|"label" -> "Accuracy", 
  "type" -> "keyword", "info" -> "Accuracy[x] gives the effective number of \
digits to the right of the decimal point in the number x. "|>, 
 <|"label" -> "AccuracyGoal", "type" -> "keyword", 
  "info" -> "AccuracyGoal is an option for various numerical operations which \
specifies how many effective digits"|>, <|"label" -> "Activate", 
  "type" -> "keyword", "info" -> "Activate[expr] replaces all instances of \
Inactive[f] in expr with f.Activate[expr, patt] replaces on"|>, 
 <|"label" -> "ActiveClassification", "type" -> "keyword", 
  "info" -> "ActiveClassification[f, {conf , conf , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an object \
representing the result of active classif"|>, 
 <|"label" -> "ActiveClassificationObject", "type" -> "keyword", 
  "info" -> "ActiveClassificationObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents the result of an ActiveClassification \
process."|>, <|"label" -> "ActivePrediction", "type" -> "keyword", 
  "info" -> "ActivePrediction[f, {conf , conf , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an object \
representing the result of active prediction "|>, 
 <|"label" -> "ActivePredictionObject", "type" -> "keyword", 
  "info" -> "ActivePredictionObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents the result of an ActivePrediction \
process."|>, <|"label" -> "AddTo", "type" -> "keyword", 
  "info" -> "x += dx adds dx to x and returns the new value of x. "|>, 
 <|"label" -> "AddToSearchIndex", "type" -> "keyword", 
  "info" -> "AddToSearchIndex[obj, content] adds the specified content to the \
existing search index object obj. A"|>, <|"label" -> "AdjacencyGraph", 
  "type" -> "keyword", "info" -> "AdjacencyGraph[amat] gives the graph with \
adjacency matrix amat.AdjacencyGraph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, amat] gi"|>, 
 <|"label" -> "AdjacencyList", "type" -> "keyword", 
  "info" -> "AdjacencyList[g, v] gives a list of vertices adjacent to vertex \
v.AdjacencyList[g, patt] gives a lis"|>, <|"label" -> "AdjacencyMatrix", 
  "type" -> "keyword", "info" -> "AdjacencyMatrix[g] gives the \
vertex\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223vertex \
adjacency matrix of the graph g.AdjacencyMatrix[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "Adjugate", "type" -> "keyword", 
  "info" -> "Adjugate[m] gives the adjugate of a square matrix m."|>, 
 <|"label" -> "AffineHalfSpace", "type" -> "keyword", 
  "info" -> "AffineHalfSpace[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p     }, w] \
represents AffineSpace[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p     }] \
extended in the directio"|>, <|"label" -> "AffineSpace", "type" -> "keyword", 
  "info" -> "AffineSpace[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p     }] \
represents the affine space passing through the points p .AffineSpace[p"|>, 
 <|"label" -> "AffineStateSpaceModel", "type" -> "keyword", 
  "info" -> "AffineStateSpaceModel[{a, b, c, d}, x] represents the affine \
state-space model x ' (t) \[CapitalATilde]\257\[CapitalAHat]\220\\[PlusMinus] \
a(x(t)) + b"|>, <|"label" -> "AffineTransform", "type" -> "keyword", 
  "info" -> "AffineTransform[m] gives a TransformationFunction that \
represents an affine transform that maps r to"|>, 
 <|"label" -> "After", "type" -> "keyword", "info" -> "After is a symbol that \
represents the region after an object for purposes of placement."|>, 
 <|"label" -> "AggregatedEntityClass", "type" -> "keyword", 
  "info" -> "AggregatedEntityClass[class, \"prop\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f] represents an \
entity class containing a single entity with "|>, 
 <|"label" -> "AggregationLayer", "type" -> "keyword", 
  "info" -> "AggregationLayer[f] represents a layer that aggregates an array \
of arbitrary rank into a vector, usi"|>, <|"label" -> "AiryAi", 
  "type" -> "keyword", "info" -> 
   "AiryAi[z] gives the Airy function Ai(z). "|>, 
 <|"label" -> "AiryAiPrime", "type" -> "keyword", 
  "info" -> "AiryAiPrime[z] gives the derivative of "|>, 
 <|"label" -> "AiryAiZero", "type" -> "keyword", 
  "info" -> "                               th                                \
                                   "|>, <|"label" -> "AiryBi", 
  "type" -> "keyword", "info" -> 
   "AiryBi[z] gives the Airy function Bi(z). "|>, 
 <|"label" -> "AiryBiPrime", "type" -> "keyword", 
  "info" -> "                                                           \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200b2\nAiryBiPrime[z] gives the \
derivative of "|>, <|"label" -> "AiryBiZero", "type" -> "keyword", 
  "info" -> "                               th                                \
                                   "|>, <|"label" -> "AlgebraicIntegerQ", 
  "type" -> "keyword", "info" -> "AlgebraicIntegerQ[a] yields True if a is an \
algebraic integer, and yields False otherwise."|>, 
 <|"label" -> "AlgebraicNumberDenominator", "type" -> "keyword", 
  "info" -> "AlgebraicNumberDenominator[a] gives the smallest positive \
integer n such that n a is an algebraic in"|>, 
 <|"label" -> "AlgebraicNumberNorm", "type" -> "keyword", 
  "info" -> "AlgebraicNumberNorm[a] gives the norm of the algebraic number \
a."|>, <|"label" -> "AlgebraicNumberPolynomial", "type" -> "keyword", 
  "info" -> "AlgebraicNumberPolynomial[a, x] gives the polynomial in x \
corresponding to the AlgebraicNumber objec"|>, 
 <|"label" -> "AlgebraicNumberTrace", "type" -> "keyword", 
  "info" -> 
   "AlgebraicNumberTrace[a] gives the trace of the algebraic number a."|>, 
 <|"label" -> "AlgebraicRulesData", "type" -> "keyword", 
  "info" -> "AlgebraicRulesData is an object returned by AlgebraicRules. Its \
OutputForm appears to be a list of r"|>, <|"label" -> "Algebraics", 
  "type" -> "keyword", "info" -> "Algebraics represents the domain of \
algebraic numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Algebraics. "|>, 
 <|"label" -> "AlgebraicUnitQ", "type" -> "keyword", 
  "info" -> "AlgebraicUnitQ[a] yields True if a is an algebraic unit, and \
yields False otherwise."|>, <|"label" -> "AlignmentPoint", 
  "type" -> "keyword", "info" -> "AlignmentPoint is an option which specifies \
how objects should by default be aligned when they appea"|>, 
 <|"label" -> "All", "type" -> "keyword", "info" -> "All is a setting used \
for certain options. In Part and related functions, All specifies all parts \
at"|>, <|"label" -> "AllowedFrequencyRange", "type" -> "keyword", 
  "info" -> "AllowedFrequencyRange is an option for audio and signal \
processing functions that specifies the rang"|>, 
 <|"label" -> "AllowLooseGrammar", "type" -> "keyword", 
  "info" -> "AllowLooseGrammar is an option for GrammarRules and related \
functions that specifies whether grammat"|>, <|"label" -> "AllTrue", 
  "type" -> "keyword", "info" -> "AllTrue[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, test] yields \
True if test[e ] is True for all of the e .AllTrue[expr, test, lev"|>, 
 <|"label" -> "Alphabet", "type" -> "keyword", "info" -> "Alphabet[] gives a \
list of the lowercase letters a through z in the English \
alphabet.Alphabet[type] "|>, <|"label" -> "AlphabeticOrder", 
  "type" -> "keyword", "info" -> "AlphabeticOrder[string , string ] gives 1 \
if \"string \" appears before \"string \" in alphabetical orde"|>, 
 <|"label" -> "AlphabeticSort", "type" -> "keyword", 
  "info" -> "AlphabeticSort[list] sorts the elements of list into \
alphabetical order.AlphabeticSort[list, lang] s"|>, 
 <|"label" -> "AlphaChannel", "type" -> "keyword", 
  "info" -> "AlphaChannel[color] returns the opacity of \
color.AlphaChannel[image] returns the alpha channel of im"|>, 
 <|"label" -> "AlternateImage", "type" -> "keyword", 
  "info" -> "AlternateImage is an option to CDFInformation that specifies an \
image that should be used if the plu"|>, <|"label" -> "AlternatingFactorial", 
  "type" -> "keyword", "info" -> 
   "AlternatingFactorial[n] gives the alternating factorial a(n)."|>, 
 <|"label" -> "AlternatingGroup", "type" -> "keyword", 
  "info" -> 
   "AlternatingGroup[n] represents the alternating group of degree n."|>, 
 <|"label" -> "AlternativeHypothesis", "type" -> "keyword", 
  "info" -> "AlternativeHypothesis is an option for hypothesis testing \
functions like LocationTest that specifies"|>, 
 <|"label" -> "Alternatives", "type" -> "keyword", 
  "info" -> "p  | p  | \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 is a pattern \
object that represents any of the patterns p . \n 1    2                    "\
|>, <|"label" -> "AmbiguityFunction", "type" -> "keyword", 
  "info" -> "AmbiguityFunction is an option for SemanticInterpretation, \
Interpreter, and related functions that s"|>, <|"label" -> "AmbiguityList", 
  "type" -> "keyword", "info" -> "AmbiguityList[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents \
possible results derived from an ambiguous semantic inte"|>, 
 <|"label" -> "Analytic", "type" -> "keyword", "info" -> "Analytic is an \
option for Limit and Series. With Analytic -> True, unrecognized functions \
are treate"|>, <|"label" -> "AnatomyData", "type" -> "keyword", 
  "info" -> "AnatomyData[entity, property] gives the value of the specified \
property for the anatomical structure"|>, <|"label" -> "AnatomyPlot3D", 
  "type" -> "keyword", "info" -> "AnatomyPlot3D[primitives, options] \
represents a three-dimensional graphical image that works with an"|>, 
 <|"label" -> "AnchoredSearch", "type" -> "keyword", 
  "info" -> "AnchoredSearch is an option for Find and FindList that specifies \
whether the text searched for must "|>, <|"label" -> "And", 
  "type" -> "keyword", "info" -> "e  && e  && \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 is the logical \
AND function. It evaluates its arguments in order, giving False immedia"|>, 
 <|"label" -> "AndersonDarlingTest", "type" -> "keyword", 
  "info" -> "AndersonDarlingTest[data] tests whether data is normally \
distributed using the \
Anderson\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Darling \
test"|>, <|"label" -> "AngerJ", "type" -> "keyword", 
  "info" -> "                                                                 \
                                \[CapitalATilde]\216\[CapitalAHat]\274\nA"|>, 
 <|"label" -> "AngleBisector", "type" -> "keyword", 
  "info" -> "AngleBisector[{q , p, q }] gives the bisector of the interior \
angle at p formed by the triangle with"|>, <|"label" -> "AngleBracket", 
  "type" -> "keyword", "info" -> "AngleBracket[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as \
\[CapitalATilde]\[Cent]\[CapitalAHat]\214\[CapitalAHat]\[Copyright] x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\214\[CapitalAHat]\252."|>, 
 <|"label" -> "AnglePath", "type" -> "keyword", 
  "info" -> "AnglePath[{\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] , \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] , \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the list \
of 2D coordinates corresponding to a path that starts at {"|>, 
 <|"label" -> "AnglePath3D", "type" -> "keyword", 
  "info" -> "AnglePath3D[{{\[CapitalATilde]\216\\[PlusMinus] , \
\[CapitalATilde]\216b2 , \[CapitalATilde]\216b3 }, \
{\[CapitalATilde]\216\\[PlusMinus] , \[CapitalATilde]\216b2 , \
\[CapitalATilde]\216b3 }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the list \
of 3D coordinates of a path of an object"|>, <|"label" -> "AngleVector", 
  "type" -> "keyword", "info" -> "AngleVector[\[CapitalATilde]\216\
\[CapitalAHat]\[Cedilla]] gives the list representing the 2D unit vector at \
angle \[CapitalATilde]\216\[CapitalAHat]\[Cedilla] relative to the x \
axis.Angl"|>, <|"label" -> "AnimationRate", "type" -> "keyword", 
  "info" -> "AnimationRate is an option for Animate and Animator that \
specifies at what rate an animation should "|>, 
 <|"label" -> "AnimationRepetitions", "type" -> "keyword", 
  "info" -> "AnimationRepetitions is an option to Animate and related \
functions that specifies how many times the"|>, 
 <|"label" -> "Annuity", "type" -> "keyword", "info" -> "Annuity[p, t] \
represents an annuity of fixed payments p made over t periods.Annuity[p, t, \
q] represe"|>, <|"label" -> "AnnuityDue", "type" -> "keyword", 
  "info" -> "AnnuityDue[p, t] represents an annuity due of fixed payments p \
made over t periods.AnnuityDue[p, t, "|>, <|"label" -> "Annulus", 
  "type" -> "keyword", "info" -> "Annulus[{x, y}, {r     , r     }] \
represents an annulus centered at {x, y} with inner radius r      "|>, 
 <|"label" -> "AnomalyDetection", "type" -> "keyword", 
  "info" -> "AnomalyDetection[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates an \
AnomalyDetectorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] based on the examp"|>, <|"label" -> "AnomalyDetector", 
  "type" -> "keyword", "info" -> "AnomalyDetector is an option for functions \
such as Classify that specifies an anomaly detector for t"|>, 
 <|"label" -> "AnomalyDetectorFunction", "type" -> "keyword", 
  "info" -> "AnomalyDetectorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a function generated by AnomalyDetection \
for detecting whether"|>, <|"label" -> "Anonymous", "type" -> "keyword", 
  "info" -> "Anonymous represents an option or other value that indicates the \
absence of a name."|>, <|"label" -> "Antialiasing", "type" -> "keyword", 
  "info" -> "Antialiasing is an option that specifies whether antialiasing \
should be done."|>, <|"label" -> "Antihermitian", "type" -> "keyword", 
  "info" -> 
   "Antihermitian[{1, 2}] represents the symmetry of an antihermitian \
matrix."|>, <|"label" -> "AntihermitianMatrixQ", "type" -> "keyword", 
  "info" -> "AntihermitianMatrixQ[m] gives True if m is explicitly \
antihermitian, and False otherwise."|>, <|"label" -> "Antisymmetric", 
  "type" -> "keyword", "info" -> "Antisymmetric[{s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, s }] represents \
the symmetry of a tensor that is antisymmetric in the slots s "|>, 
 <|"label" -> "AntisymmetricMatrixQ", "type" -> "keyword", 
  "info" -> "AntisymmetricMatrixQ[m] gives True if m is explicitly \
antisymmetric, and False otherwise."|>, <|"label" -> "Antonyms", 
  "type" -> "keyword", "info" -> "Antonyms[\"word\"] returns the antonyms \
associated with the specified word."|>, <|"label" -> "AnyOrder", 
  "type" -> "keyword", "info" -> "AnyOrder[p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is a grammar \
rules pattern object that represents a sequence of elements matchin"|>, 
 <|"label" -> "AnySubset", "type" -> "keyword", 
  "info" -> "AnySubset[{c , c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
element in an interpreter or form that accepts any subset of th"|>, 
 <|"label" -> "AnyTrue", "type" -> "keyword", "info" -> "AnyTrue[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, test] yields \
True if test[e ] is True for any of the e .AnyTrue[expr, test, lev"|>, 
 <|"label" -> "Apart", "type" -> "keyword", "info" -> "Apart[expr] rewrites a \
rational expression as a sum of terms with minimal denominators. Apart[expr, \
"|>, <|"label" -> "ApartSquareFree", "type" -> "keyword", 
  "info" -> "ApartSquareFree[expr] rewrites a rational expression as a sum of \
terms whose denominators are powers"|>, <|"label" -> "APIFunction", 
  "type" -> "keyword", "info" -> "APIFunction[{name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] type , name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] type , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, fun] represents \
an API with parameters name  that eva"|>, <|"label" -> "Appearance", 
  "type" -> "keyword", "info" -> "Appearance is an option for displayed \
objects such as Button and Slider that specifies the general t"|>, 
 <|"label" -> "AppearanceElements", "type" -> "keyword", 
  "info" -> "AppearanceElements is an option for functions like Manipulate \
that specifies what elements should be"|>, <|"label" -> "AppearanceRules", 
  "type" -> "keyword", "info" -> "AppearanceRules is an option for form and \
page generation functions that specifies the overall appea"|>, 
 <|"label" -> "AppellF1", "type" -> "keyword", "info" -> "AppellF1[a, b , b , \
c, x, y] is the Appell hypergeometric function of two variables F  (a ; b , b \
 ;"|>, <|"label" -> "Append", "type" -> "keyword", 
  "info" -> "Append[expr, elem] gives expr with elem appended. Append[elem] \
represents an operator form of Append"|>, <|"label" -> "AppendLayer", 
  "type" -> "keyword", "info" -> "AppendLayer[] represents a net layer that \
takes an input array and appends another array to it."|>, 
 <|"label" -> "AppendTo", "type" -> "keyword", "info" -> "AppendTo[x, elem] \
appends elem to the value of x, and resets x to the result. "|>, 
 <|"label" -> "Application", "type" -> "keyword", 
  "info" -> "f \[CapitalATilde]\257\[CapitalAHat]\224\\[Degree] g or \
Application[f, g] represents the formal application of f to g."|>, 
 <|"label" -> "Apply", "type" -> "keyword", "info" -> "f @@ expr or Apply[f, \
expr] replaces the head of expr by f. f@@@expr or Apply[f, expr, {1}] \
replaces"|>, <|"label" -> "ApplyTo", "type" -> "keyword", 
  "info" -> 
   "ApplyTo[x, f] or x//= f computes f[x] and resets x to the result."|>, 
 <|"label" -> "ArcCos", "type" -> "keyword", "info" -> "                      \
            -1\nArcCos[z] gives the arc cosine cos  (z) of the complex number \
z"|>, <|"label" -> "ArcCosh", "type" -> "keyword", 
  "info" -> "                                                   \
-1\nArcCosh[z] gives the inverse hyperbolic cosine"|>, 
 <|"label" -> "ArcCot", "type" -> "keyword", "info" -> "                      \
               -1\nArcCot[z] gives the arc cotangent cot  (z) of the complex \
nu"|>, <|"label" -> "ArcCoth", "type" -> "keyword", 
  "info" -> "                                                      \
-1\nArcCoth[z] gives the inverse hyperbolic cot"|>, 
 <|"label" -> "ArcCsc", "type" -> "keyword", "info" -> "                      \
              -1\nArcCsc[z] gives the arc cosecant csc  (z) of the complex \
numb"|>, <|"label" -> "ArcCsch", "type" -> "keyword", 
  "info" -> "                                                     \
-1\nArcCsch[z] gives the inverse hyperbolic cose"|>, 
 <|"label" -> "ArcCurvature", "type" -> "keyword", 
  "info" -> "ArcCurvature[{x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, t] gives \
the curvature of the parametrized curve whose Cartesian coordinat"|>, 
 <|"label" -> "ARCHProcess", "type" -> "keyword", 
  "info" -> "ARCHProcess[\[CapitalATilde]\216\[CapitalAHat]\272, \
{\[CapitalATilde]\216\\[PlusMinus] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus] }] represents an autoregressive \
conditionally heteroscedastic process of or"|>, 
 <|"label" -> "ArcLength", "type" -> "keyword", 
  "info" -> "ArcLength[reg] gives the length of the one-dimensional region \
reg.ArcLength[{x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, {t, t   , \
t"|>, <|"label" -> "ArcSec", "type" -> "keyword", 
  "info" -> "                                  -1\nArcSec[z] gives the arc \
secant sec  (z) of the complex number z"|>, <|"label" -> "ArcSech", 
  "type" -> "keyword", "info" -> "                                            \
       -1\nArcSech[z] gives the inverse hyperbolic secant"|>, 
 <|"label" -> "ArcSin", "type" -> "keyword", "info" -> "                      \
          -1\nArcSin[z] gives the arc sine sin  (z) of the complex number z. \
"|>, <|"label" -> "ArcSinDistribution", "type" -> "keyword", 
  "info" -> "ArcSinDistribution[{x   , x   }] represents the arc sine \
distribution supported between x    and x  "|>, 
 <|"label" -> "ArcSinh", "type" -> "keyword", "info" -> "                     \
                            -1\nArcSinh[z] gives the inverse hyperbolic sine \
sin"|>, <|"label" -> "ArcTan", "type" -> "keyword", 
  "info" -> "                                   -1                            \
                                   "|>, <|"label" -> "ArcTanh", 
  "type" -> "keyword", "info" -> "                                            \
        -1\nArcTanh[z] gives the inverse hyperbolic tange"|>, 
 <|"label" -> "Area", "type" -> "keyword", "info" -> "Area[reg] gives the \
area of the two-dimensional region reg.Area[{x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, {s, s   , s \
  }, {t, t "|>, <|"label" -> "Arg", "type" -> "keyword", 
  "info" -> "Arg[z] gives the argument of the complex number z. "|>, 
 <|"label" -> "ArgMax", "type" -> "keyword", "info" -> "ArgMax[f, x] gives a \
position x    at which f is maximized.ArgMax[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
position {x "|>, <|"label" -> "ArgMin", "type" -> "keyword", 
  "info" -> "ArgMin[f, x] gives a position x    at which f is \
minimized.ArgMin[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
position {x "|>, <|"label" -> "ArgumentCountQ", "type" -> "keyword", 
  "info" -> "ArgumentCountQ[head, len, min, max] tests whether the number len \
of arguments of a function head is "|>, <|"label" -> "ArgumentsOptions", 
  "type" -> "keyword", "info" -> "ArgumentsOptions[f[args], n] tries to \
separate args into a list of n positional arguments followed b"|>, 
 <|"label" -> "ArithmeticGeometricMean", "type" -> "keyword", 
  "info" -> "ArithmeticGeometricMean[a, b] gives the \
arithmetic\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220geometri\
c mean of a and b. "|>, <|"label" -> "Around", "type" -> "keyword", 
  "info" -> "Around[x, \[CapitalATilde]\216b4] represents an approximate \
number or quantity with a value around x and an uncertainty \
\[CapitalATilde]\216b4"|>, <|"label" -> "AroundReplace", "type" -> "keyword", 
  "info" -> "AroundReplace[expr, {s  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] Around[x , \
\[CapitalATilde]\216b4 ], s  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] Around[x , \
\[CapitalATilde]\216b4 ], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] propagates \
uncertainty in expr by"|>, <|"label" -> "Array", "type" -> "keyword", 
  "info" -> "Array[f, n] generates a list of length n, with elements f[i]. \
Array[f, n, r] generates a list using "|>, <|"label" -> "ArrayComponents", 
  "type" -> "keyword", "info" -> "ArrayComponents[array] gives an array in \
which all identical elements of array are replaced by an in"|>, 
 <|"label" -> "ArrayDepth", "type" -> "keyword", 
  "info" -> "ArrayDepth[expr] gives the depth to which expr is a full array, \
with all the parts at a particular l"|>, <|"label" -> "ArrayFilter", 
  "type" -> "keyword", "info" -> "ArrayFilter[f, array, r] applies f to all \
range-r blocks in the specified array.ArrayFilter[f, array"|>, 
 <|"label" -> "ArrayFlatten", "type" -> "keyword", 
  "info" -> "ArrayFlatten[{{m  , m  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {m  , m  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
single flattened matrix from a matrix of m"|>, 
 <|"label" -> "ArrayPad", "type" -> "keyword", "info" -> "ArrayPad[array, m] \
gives an array with m zeros of padding on every side. ArrayPad[array, m, \
padding]"|>, <|"label" -> "ArrayPlot", "type" -> "keyword", 
  "info" -> "ArrayPlot[array] generates a plot in which the values in an \
array are shown in a discrete array of s"|>, <|"label" -> "ArrayPlot3D", 
  "type" -> "keyword", "info" -> "ArrayPlot3D[array] generates a plot in \
which the values in an array are shown in a discrete array of"|>, 
 <|"label" -> "ArrayQ", "type" -> "keyword", "info" -> "ArrayQ[expr] gives \
True if expr is a full array or a SparseArray object, and gives False \
otherwise. "|>, <|"label" -> "ArrayReduce", "type" -> "keyword", 
  "info" -> "ArrayReduce[f, array, n] reduces dimension n of array by \
applying f.ArrayReduce[f, array, n  ;; n ] "|>, 
 <|"label" -> "ArrayResample", "type" -> "keyword", 
  "info" -> "ArrayResample[array, {n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] resamples array \
to have dimensions {n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}.ArrayResample[ar\
ray"|>, <|"label" -> "ArrayReshape", "type" -> "keyword", 
  "info" -> "ArrayReshape[list, dims] arranges the elements of list into a \
rectangular array with dimensions dims"|>, <|"label" -> "ArrayRules", 
  "type" -> "keyword", "info" -> "ArrayRules[SparseArray[\[CapitalATilde]\
\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]] gives the rules {pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} specifying \
elements in a sp"|>, <|"label" -> "Arrays", "type" -> "keyword", 
  "info" -> "Arrays[{d , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, d }] represents \
the domain of arrays of rank r and dimensions d .Arrays[{d , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, d }, "|>, 
 <|"label" -> "Arrow", "type" -> "keyword", "info" -> "Arrow[{pt , pt }] is a \
graphics primitive that represents an arrow from pt  to pt .Arrow[{pt , pt \
},"|>, <|"label" -> "Arrowheads", "type" -> "keyword", 
  "info" -> "Arrowheads[spec] is a graphics directive specifying that arrows \
that follow should have arrowheads w"|>, <|"label" -> "ASATriangle", 
  "type" -> "keyword", "info" -> "ASATriangle[\[CapitalATilde]\216\\[PlusMinu\
s], c, \[CapitalATilde]\216b2] returns a filled triangle with angles \
\[CapitalATilde]\216\\[PlusMinus] and \[CapitalATilde]\216b2 and side length \
c, and c is adjac"|>, <|"label" -> "AspectRatio", "type" -> "keyword", 
  "info" -> "AspectRatio is an option for Graphics and related functions that \
specifies the ratio of height to wi"|>, <|"label" -> "Assert", 
  "type" -> "keyword", "info" -> "Assert[test] represents the assertion that \
test is True. If assertions have been enabled, test is ev"|>, 
 <|"label" -> "AssessmentFunction", "type" -> "keyword", 
  "info" -> "AssessmentFunction[key] represents a tool for assessing whether \
answers are correct according to the"|>, 
 <|"label" -> "AssessmentResultObject", "type" -> "keyword", 
  "info" -> "AssessmentResultObject[assoc] represents the results of an \
assessment.AssessmentResultObject[{aro , "|>, <|"label" -> "AssociateTo", 
  "type" -> "keyword", "info" -> "AssociateTo[a, key \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val] changes the \
association a by adding the key-value pair key \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val.Associate"|>, 
 <|"label" -> "Association", "type" -> "keyword", 
  "info" -> "Association[key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] or \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224 represents an \
associatio"|>, <|"label" -> "AssociationFormat", "type" -> "keyword", 
  "info" -> "AssociationFormat is an option to TextString and related \
functions that determines how associations "|>, 
 <|"label" -> "AssociationMap", "type" -> "keyword", 
  "info" -> "AssociationMap[f, {key , key , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates the \
association \[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f[key ], key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f[key ], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224.Ass"|>, 
 <|"label" -> "AssociationQ", "type" -> "keyword", 
  "info" -> "AssociationQ[expr] gives True if expr is a valid Association \
object, and False otherwise."|>, <|"label" -> "AssociationThread", 
  "type" -> "keyword", "info" -> "AssociationThread[{key , key , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {val , val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
association \[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val"|>, 
 <|"label" -> "AssumeDeterministic", "type" -> "keyword", 
  "info" -> "AssumeDeterministic is an option for functions such as \
BayesianMinimization that specifies whether o"|>, 
 <|"label" -> "Assuming", "type" -> "keyword", "info" -> "Assuming[assum, \
expr] evaluates expr with assum appended to ECAssumptions, so that assum is \
included "|>, <|"label" -> "Assumptions", "type" -> "keyword", 
  "info" -> "Assumptions is an option for functions such as Simplify, Refine, \
and Integrate that specifies defaul"|>, <|"label" -> "AstronomicalData", 
  "type" -> "keyword", "info" -> "AstronomicalData[\"name\", \"property\"] \
gives the value of the specified property of the astronomical o"|>, 
 <|"label" -> "Asymptotic", "type" -> "keyword", 
  "info" -> "Asymptotic[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] x ] gives an \
asymptotic approximation for expr near x .Asymptotic[expr, {x, x ,"|>, 
 <|"label" -> "AsymptoticDSolveValue", "type" -> "keyword", 
  "info" -> "AsymptoticDSolveValue[eqn, f, x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] x ] computes an \
asymptotic approximation to the differential equat"|>, 
 <|"label" -> "AsymptoticEqual", "type" -> "keyword", 
  "info" -> "                           *                                     \
                        *          "|>, <|"label" -> "AsymptoticEquivalent", 
  "type" -> "keyword", "info" -> "                                *           \
                                *                       "|>, 
 <|"label" -> "AsymptoticExpectation", "type" -> "keyword", 
  "info" -> "AsymptoticExpectation[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist, a \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] a ] computes an \
asymptotic approximation for the expectati"|>, 
 <|"label" -> "AsymptoticGreater", "type" -> "keyword", 
  "info" -> "                             *                                   \
                          *        "|>, 
 <|"label" -> "AsymptoticGreaterEqual", "type" -> "keyword", 
  "info" -> "                                  *                              \
                               *   "|>, <|"label" -> "AsymptoticLess", 
  "type" -> "keyword", "info" -> "                          *                 \
                                            *           "|>, 
 <|"label" -> "AsymptoticLessEqual", "type" -> "keyword", 
  "info" -> "                               *                                 \
                            *      "|>, 
 <|"label" -> "AsymptoticOutputTracker", "type" -> "keyword", 
  "info" -> "AsymptoticOutputTracker[sys, {f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the state \
feedback control law that causes the "|>, 
 <|"label" -> "AsymptoticProbability", "type" -> "keyword", 
  "info" -> "AsymptoticProbability[pred, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist, a \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] a ] computes an \
asymptotic approximation for the probabili"|>, 
 <|"label" -> "AsymptoticRSolveValue", "type" -> "keyword", 
  "info" -> "AsymptoticRSolveValue[eqn, f, x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\236] computes an \
asymptotic approximation to the difference equation"|>, 
 <|"label" -> "AsymptoticSolve", "type" -> "keyword", 
  "info" -> "AsymptoticSolve[eqn, y \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] b, x -> a] \
computes asymptotic approximations of solutions y[x] of the equa"|>, 
 <|"label" -> "Asynchronous", "type" -> "keyword", 
  "info" -> "Asynchronous is an option for WolframAlpha that determines \
whether to use the asynchronous features "|>, 
 <|"label" -> "AsynchronousTaskObject", "type" -> "keyword", 
  "info" -> "AsynchronousTaskObject[\"name\", id, sessionid] is an object \
that represents asynchronous evaluations "|>, 
 <|"label" -> "AsynchronousTasks", "type" -> "keyword", 
  "info" -> 
   "AsynchronousTasks[] returns a list of running asynchronous tasks."|>, 
 <|"label" -> "Atom", "type" -> "keyword", "info" -> "Atom[\"sym\"] \
represents an atom with atomic symbol \"sym\".Atom[\"sym\", name \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an a"\
|>, <|"label" -> "AtomCoordinates", "type" -> "keyword", 
  "info" -> "AtomCoordinates is an option for Molecule and related functions \
that specifies the three-dimensional"|>, 
 <|"label" -> "AtomDiagramCoordinates", "type" -> "keyword", 
  "info" -> "AtomDiagramCoordinates is an option for Molecule and related \
functions that specifies the two-dimens"|>, <|"label" -> "AtomLabels", 
  "type" -> "keyword", "info" -> "AtomLabels is an option for MoleculePlot \
and MoleculePlot3D that specifies what labels and label pos"|>, 
 <|"label" -> "AtomLabelStyle", "type" -> "keyword", 
  "info" -> "AtomLabelStyle is an option for MoleculePlot and MoleculePlot3D \
that specifies the style to use for "|>, <|"label" -> "AtomQ", 
  "type" -> "keyword", "info" -> "AtomQ[expr] yields True if expr is an \
expression which cannot be divided into subexpressions, and yi"|>, 
 <|"label" -> "AttentionLayer", "type" -> "keyword", 
  "info" -> "AttentionLayer[] represents a trainable net layer that learns to \
pay attention to certain portions o"|>, <|"label" -> "Attributes", 
  "type" -> "keyword", "info" -> "Attributes[symbol] gives the list of \
attributes for a symbol. Attributes[\"symbol\"] gives the attribu"|>, 
 <|"label" -> "Audio", "type" -> "keyword", "info" -> "Audio[file] represents \
audio stored in the given file.Audio[url] represents audio stored in the \
give"|>, <|"label" -> "AudioAmplify", "type" -> "keyword", 
  "info" -> 
   "AudioAmplify[audio, s] multiplies all samples of audio by a factor s. "|>\
, <|"label" -> "AudioAnnotate", "type" -> "keyword", 
  "info" -> "AudioAnnotate[audio, prop] computes the property prop and adds \
it as an annotation to audio.AudioAnn"|>, 
 <|"label" -> "AudioAnnotationLookup", "type" -> "keyword", 
  "info" -> "AudioAnnotationLookup[audio] gives all annotations associated to \
audio.AudioAnnotationLookup[audio, "|>, <|"label" -> "AudioBlockMap", 
  "type" -> "keyword", "info" -> "AudioBlockMap[f, audio, dur] applies f to \
non-overlapping partitions of length dur in audio. AudioBl"|>, 
 <|"label" -> "AudioChannelAssignment", "type" -> "keyword", 
  "info" -> "AudioChannelAssignment is an option for Audio and related \
functions that specifies a mapping from au"|>, 
 <|"label" -> "AudioChannelCombine", "type" -> "keyword", 
  "info" -> "AudioChannelCombine[{audio , audio , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
multichannel audio object by combining the sequen"|>, 
 <|"label" -> "AudioChannelMix", "type" -> "keyword", 
  "info" -> "AudioChannelMix[audio] mixes channels of audio by averaging and \
returns a center-panned stereo audio"|>, <|"label" -> "AudioChannels", 
  "type" -> "keyword", "info" -> "AudioChannels[audio] returns the number of \
channels in the Audio object audio.AudioChannels[video] r"|>, 
 <|"label" -> "AudioChannelSeparate", "type" -> "keyword", 
  "info" -> "AudioChannelSeparate[audio] gives a list of Audio objects, each \
of which represents one channel of a"|>, <|"label" -> "AudioData", 
  "type" -> "keyword", "info" -> "AudioData[audio] gives an array of audio \
samples.AudioData[audio, \"type\"] gives an array of audio sa"|>, 
 <|"label" -> "AudioDelay", "type" -> "keyword", 
  "info" -> "AudioDelay[audio, delay] creates audio by adding repeated \
decaying echos to audio spaced by the spec"|>, 
 <|"label" -> "AudioDelete", "type" -> "keyword", 
  "info" -> "AudioDelete[audio, t] deletes the first t seconds of \
audio.AudioDelete[audio, -t] deletes the last t"|>, 
 <|"label" -> "AudioDevice", "type" -> "keyword", 
  "info" -> "AudioDevice is an option for Audio and related functions that \
specifies the device to use for playba"|>, <|"label" -> "AudioDistance", 
  "type" -> "keyword", "info" -> "AudioDistance[audio , audio ] returns a \
distance measure between audio  and audio .\n                "|>, 
 <|"label" -> "AudioEncoding", "type" -> "keyword", 
  "info" -> "AudioEncoding is an option for Export and other functions that \
specifies the audio encoding to use w"|>, <|"label" -> "AudioFade", 
  "type" -> "keyword", "info" -> "AudioFade[audio] returns audio in which the \
beginning and end of audio are faded.AudioFade[audio, t]"|>, 
 <|"label" -> "AudioFrequencyShift", "type" -> "keyword", 
  "info" -> "AudioFrequencyShift[audio, freq] gives audio by shifting the \
spectrum of audio by freq.AudioFrequenc"|>, <|"label" -> "AudioGenerator", 
  "type" -> "keyword", "info" -> "AudioGenerator[model] generates one second \
of audio of a given model.AudioGenerator[model, t] genera"|>, 
 <|"label" -> "AudioIdentify", "type" -> "keyword", 
  "info" -> "AudioIdentify[audio] yields the result of attempting to identify \
what audio is a recording of.AudioI"|>, <|"label" -> "AudioInputDevice", 
  "type" -> "keyword", "info" -> "AudioInputDevice is an option for \
AudioCapture that specifies the device to use for audio recording."|>, 
 <|"label" -> "AudioInsert", "type" -> "keyword", 
  "info" -> "AudioInsert[audio, t \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] inserts the \
audio signal new at time t.AudioInsert[audio, {t , t , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] "|>, 
 <|"label" -> "AudioInstanceQ", "type" -> "keyword", 
  "info" -> "AudioInstanceQ[audio, obj] gives True if audio sounds to be an \
instance of the object obj, and gives"|>, <|"label" -> "AudioIntervals", 
  "type" -> "keyword", "info" -> "AudioIntervals[audio] returns audible \
intervals of audio.AudioIntervals[audio, crit] returns interva"|>, 
 <|"label" -> "AudioJoin", "type" -> "keyword", 
  "info" -> "AudioJoin[audio , audio , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] or \
AudioJoin[{audio , audio , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] concatenates \
all audio  and returns a"|>, <|"label" -> "AudioLabel", "type" -> "keyword", 
  "info" -> "AudioLabel is an option for an Audio object that specifies the \
label to show on the object."|>, <|"label" -> "AudioLength", 
  "type" -> "keyword", "info" -> "AudioLength[audio] returns the number of \
samples in the Audio object audio."|>, <|"label" -> "AudioLocalMeasurements", 
  "type" -> "keyword", "info" -> "AudioLocalMeasurements[audio, \"prop\"] \
computes the property \"prop\" locally for partitions of audio.A"|>, 
 <|"label" -> "AudioLooping", "type" -> "keyword", 
  "info" -> "AudioLooping is an option for AudioStream and related functions \
to specify the playback looping."|>, <|"label" -> "AudioLoudness", 
  "type" -> "keyword", "info" -> "AudioLoudness[audio] computes the loudness \
of audio according to the EBU momentary definition.AudioL"|>, 
 <|"label" -> "AudioMeasurements", "type" -> "keyword", 
  "info" -> "AudioMeasurements[audio, \"prop\"] computes the property \
\"prop\" for the entire audio.AudioMeasurements"|>, 
 <|"label" -> "AudioNormalize", "type" -> "keyword", 
  "info" -> "AudioNormalize[audio] normalizes audio so that the maximum \
absolute value of its samples is 1.AudioN"|>, 
 <|"label" -> "AudioOutputDevice", "type" -> "keyword", 
  "info" -> "AudioOutputDevice is an option for Audio and related functions \
that specifies the device to use for "|>, <|"label" -> "AudioOverlay", 
  "type" -> "keyword", "info" -> "AudioOverlay[{audio , audio , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] returns an \
audio object by overlaying all audio .\n                "|>, 
 <|"label" -> "AudioPad", "type" -> "keyword", "info" -> "AudioPad[audio, t] \
adds t seconds of silence to the end of audio.AudioPad[audio, {t , t }] adds \
t  s"|>, <|"label" -> "AudioPan", "type" -> "keyword", 
  "info" -> "AudioPan[audio] returns a center-panned stereo audio object from \
a mono audio. AudioPan[audio, pan] "|>, <|"label" -> "AudioPartition", 
  "type" -> "keyword", "info" -> "AudioPartition[audio, dur] partitions an \
audio object into non-overlapping segments of duration dur."|>, 
 <|"label" -> "AudioPause", "type" -> "keyword", 
  "info" -> "AudioPause[] pauses the playback of all AudioStream \
objects.AudioPause[astream] pauses the playback "|>, 
 <|"label" -> "AudioPitchShift", "type" -> "keyword", 
  "info" -> "AudioPitchShift[audio, r] applies pitch shifting to audio by the \
ratio r, shifting every frequency f"|>, <|"label" -> "AudioPlay", 
  "type" -> "keyword", "info" -> "AudioPlay[audio] returns a new AudioStream \
object from audio and starts the playback.AudioPlay[astre"|>, 
 <|"label" -> "AudioPlot", "type" -> "keyword", 
  "info" -> "AudioPlot[audio] plots the waveform of audio.AudioPlot[{audio , \
audio , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots \
waveforms of all a"|>, <|"label" -> "AudioQ", "type" -> "keyword", 
  "info" -> "AudioQ[audio] yields True if audio has the form of a valid Audio \
object, and False otherwise."|>, <|"label" -> "AudioRecord", 
  "type" -> "keyword", "info" -> "AudioRecord[] returns a new AudioStream \
object and starts to record from the default input audio dev"|>, 
 <|"label" -> "AudioReplace", "type" -> "keyword", 
  "info" -> "AudioReplace[audio, {t , t } \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] replaces the \
audio signal between t  and t  with the new signal "|>, 
 <|"label" -> "AudioResample", "type" -> "keyword", 
  "info" -> 
   "AudioResample[audio, sr] resamples audio to have the sample rate of sr."|>\
, <|"label" -> "AudioReverb", "type" -> "keyword", 
  "info" -> "AudioReverb[audio] adds reverberation to \
audio.AudioReverb[audio, model] adds reverberation followin"|>, 
 <|"label" -> "AudioReverse", "type" -> "keyword", 
  "info" -> 
   "AudioReverse[audio] reverses audio so that the signal is played \
backward."|>, <|"label" -> "AudioSampleRate", "type" -> "keyword", 
  "info" -> "AudioSampleRate[audio] returns the sample rate of the Audio \
object audio.AudioSampleRate[video] retu"|>, <|"label" -> "AudioSpectralMap", 
  "type" -> "keyword", "info" -> "AudioSpectralMap[f, audio] transforms audio \
by applying the function f to its short-time Fourier tra"|>, 
 <|"label" -> "AudioSpectralTransformation", "type" -> "keyword", 
  "info" -> "AudioSpectralTransformation[f, audio] returns a modified version \
of audio by applying a time-frequen"|>, <|"label" -> "AudioSplit", 
  "type" -> "keyword", "info" -> "AudioSplit[audio, t] splits audio at time \
t.AudioSplit[audio, {t , t , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] splits audio at \
times t ."|>, <|"label" -> "AudioStop", "type" -> "keyword", 
  "info" -> "AudioStop[] stops the playback of all AudioStream \
objects.AudioStop[astream] stops the playback of t"|>, 
 <|"label" -> "AudioStream", "type" -> "keyword", 
  "info" -> "AudioStream[source] creates a new AudioStream object from \
source.AudioStream[id] is an object that r"|>, 
 <|"label" -> "AudioStreams", "type" -> "keyword", 
  "info" -> "AudioStreams[] returns all existing streams.AudioStreams[audio] \
returns all existing streams that or"|>, <|"label" -> "AudioTimeStretch", 
  "type" -> "keyword", "info" -> "AudioTimeStretch[audio, r] applies time \
stretching to audio by the specified factor r."|>, 
 <|"label" -> "AudioTrackApply", "type" -> "keyword", 
  "info" -> "AudioTrackApply[f, video] applies the function f to the first \
audio track of the Video object video."|>, 
 <|"label" -> "AudioTrackSelection", "type" -> "keyword", 
  "info" -> "AudioTrackSelection is an option that specifies the audio tracks \
of interest."|>, <|"label" -> "AudioTrim", "type" -> "keyword", 
  "info" -> "AudioTrim[audio] trims silence from the beginning and end of \
audio.AudioTrim[audio, t] returns the f"|>, <|"label" -> "AudioType", 
  "type" -> "keyword", "info" -> "AudioType[audio] returns the data type used \
to represent samples in the Audio object audio."|>, 
 <|"label" -> "AugmentedPolyhedron", "type" -> "keyword", 
  "info" -> "AugmentedPolyhedron[poly] gives the augmented polyhedron poly by \
replacing each face by a pyramid. A"|>, 
 <|"label" -> "AugmentedSymmetricPolynomial", "type" -> "keyword", 
  "info" -> "AugmentedSymmetricPolynomial[{r , r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
formal augmented symmetric polynomial with ex"|>, 
 <|"label" -> "Autocomplete", "type" -> "keyword", 
  "info" -> "Autocomplete[{string , string , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \"string\"] \
gives a list of the string  that can complete string.A"|>, 
 <|"label" -> "AutocompletionFunction", "type" -> "keyword", 
  "info" -> "AutocompletionFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a function to be applied to a string to \
generate possible compl"|>, <|"label" -> "AutocorrelationTest", 
  "type" -> "keyword", "info" -> "AutocorrelationTest[data] tests whether the \
data is autocorrelated.AutocorrelationTest[data, k] test"|>, 
 <|"label" -> "AutoIndent", "type" -> "keyword", 
  "info" -> "AutoIndent is an option for Style and Cell that specifies what \
automatic indentation should be done "|>, <|"label" -> "AutoItalicWords", 
  "type" -> "keyword", "info" -> "AutoItalicWords is an option for Cell that \
gives a list of words that should automatically be put in"|>, 
 <|"label" -> "AutoloadPath", "type" -> "keyword", 
  "info" -> "AutoloadPath is a global option that specifies from which \
directories packages are automatically loa"|>, 
 <|"label" -> "Automatic", "type" -> "keyword", 
  "info" -> "Automatic represents an option or other value that is to be \
chosen automatically by a \
built\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220in funct"|>, 
 <|"label" -> "AutoRefreshed", "type" -> "keyword", 
  "info" -> "AutoRefreshed[expr] represents an expression to be reevaluated \
every hour and made available in the "|>, <|"label" -> "Axes", 
  "type" -> "keyword", "info" -> "Axes is an option for graphics functions \
that specifies whether axes should be drawn. "|>, 
 <|"label" -> "AxesEdge", "type" -> "keyword", "info" -> "AxesEdge is an \
option for three-dimensional graphics functions that specifies on which edges \
of the "|>, <|"label" -> "AxesLabel", "type" -> "keyword", 
  "info" -> "AxesLabel is an option for graphics functions that specifies \
labels for axes. "|>, <|"label" -> "AxesOrigin", "type" -> "keyword", 
  "info" -> "AxesOrigin is an option for graphics functions that specifies \
where any axes drawn should cross. "|>, <|"label" -> "AxesStyle", 
  "type" -> "keyword", "info" -> "AxesStyle is an option for graphics \
functions that specifies how axes should be rendered. "|>, 
 <|"label" -> "AxiomaticTheory", "type" -> "keyword", 
  "info" -> "AxiomaticTheory[\"theory\"] gives an axiomatic representation of \
the specified axiomatic theory.Axioma"|>, <|"label" -> "Axis", 
  "type" -> "keyword", "info" -> "Axis is a symbol that represents the axis \
for purposes of alignment and positioning. "|>, 
 <|"label" -> "AxisLabel", "type" -> "keyword", 
  "info" -> "AxisLabel is an option for AxisObject that specifies a label for \
the axis."|>, <|"label" -> "AxisObject", "type" -> "keyword", 
  "info" -> "AxisObject[path] is a Graphics primitive that represents an axis \
with a quantitative scale along the"|>, <|"label" -> "AxisStyle", 
  "type" -> "keyword", "info" -> "AxisStyle is an option for AxisObject that \
specifies how to style the path of an axis."|>, 
 <|"label" -> "BabyMonsterGroupB", "type" -> "keyword", 
  "info" -> 
   "BabyMonsterGroupB[] represents the sporadic simple baby monster group B."\
|>, <|"label" -> "Back", "type" -> "keyword", "info" -> "Back is a symbol \
that represents the back of a graphic for purposes of placement and \
alignment."|>, <|"label" -> "Background", "type" -> "keyword", 
  "info" -> 
   "Background is an option that specifies what background color to use. "|>, 
 <|"label" -> "Backslash", "type" -> "keyword", 
  "info" -> "Backslash[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\226 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\226 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Backward", "type" -> "keyword", "info" -> "Backward is a \
symbol that represents the backward direction for purposes of motion and \
animation."|>, <|"label" -> "Ball", "type" -> "keyword", 
  "info" -> "Ball[p] represents the unit ball centered at the point p.Ball[p, \
r] represents the ball of radius r "|>, <|"label" -> "Band", 
  "type" -> "keyword", "info" -> "Band[{i, j}] represents the sequence of \
positions on the diagonal band that starts with {i, j} in a "|>, 
 <|"label" -> "BandpassFilter", "type" -> "keyword", 
  "info" -> "BandpassFilter[data, {\[CapitalATilde]\217\[CapitalAHat]\211 , \
\[CapitalATilde]\217\[CapitalAHat]\211 }] applies a bandpass filter with \
cutoff frequencies \[CapitalATilde]\217\[CapitalAHat]\211  and \
\[CapitalATilde]\217\[CapitalAHat]\211  to an arr"|>, 
 <|"label" -> "BandstopFilter", "type" -> "keyword", 
  "info" -> "BandstopFilter[data, {\[CapitalATilde]\217\[CapitalAHat]\211 , \
\[CapitalATilde]\217\[CapitalAHat]\211 }] applies a bandstop filter with \
cutoff frequencies \[CapitalATilde]\217\[CapitalAHat]\211  and \
\[CapitalATilde]\217\[CapitalAHat]\211  to an arr"|>, 
 <|"label" -> "BarabasiAlbertGraphDistribution", "type" -> "keyword", 
  "info" -> "BarabasiAlbertGraphDistribution[n, k] represents a \
Barabasi\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Albert \
graph distribution for n-vertex g"|>, <|"label" -> "BarChart", 
  "type" -> "keyword", "info" -> "BarChart[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }] makes a bar \
chart with bar lengths y ,  y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.BarChart[{\
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, w [y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, w"|>, 
 <|"label" -> "BarChart3D", "type" -> "keyword", 
  "info" -> "BarChart3D[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a 3D bar \
chart with bar lengths y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
.BarChart3D[{\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, w \
[y , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "BarcodeImage", "type" -> "keyword", 
  "info" -> "BarcodeImage[\"string\", format] generates a barcode image of \
\"string\" in the specified format.Barcode"|>, 
 <|"label" -> "BarcodeRecognize", "type" -> "keyword", 
  "info" -> "BarcodeRecognize[image] recognizes a barcode in image and \
returns it as a string.BarcodeRecognize[im"|>, 
 <|"label" -> "BaringhausHenzeTest", "type" -> "keyword", 
  "info" -> "BaringhausHenzeTest[data] tests whether data follows a \
MultinormalDistribution using the \
Baringhaus\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223"|>, 
 <|"label" -> "BarLegend", "type" -> "keyword", 
  "info" -> "BarLegend[cf] generates a legend that identifies colors from the \
color function cf with an automatic"|>, 
 <|"label" -> "BarlowProschanImportance", "type" -> "keyword", 
  "info" -> "BarlowProschanImportance[rdist] gives the \
Barlow\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Proschan \
importances for all components in the Reli"|>, 
 <|"label" -> "BarnesG", "type" -> "keyword", 
  "info" -> "BarnesG[z] gives the Barnes G-function G(z)."|>, 
 <|"label" -> "BarOrigin", "type" -> "keyword", 
  "info" -> "BarOrigin is an option to BarChart and related functions that \
specifies the origin placement for bar"|>, <|"label" -> "BarSpacing", 
  "type" -> "keyword", "info" -> "BarSpacing is an option to BarChart and \
related functions that controls the spacing between bars and"|>, 
 <|"label" -> "BartlettHannWindow", "type" -> "keyword", 
  "info" -> "BartlettHannWindow[x] represents a \
Bartlett\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Hann \
window function of x."|>, <|"label" -> "BartlettWindow", "type" -> "keyword", 
  "info" -> 
   "BartlettWindow[x] represents a Bartlett window function of x."|>, 
 <|"label" -> "BaseDecode", "type" -> "keyword", 
  "info" -> "BaseDecode[\"string\"] decodes the Base64 data contained in a \
string and returns the result as a byte "|>, <|"label" -> "BaseEncode", 
  "type" -> "keyword", "info" -> "BaseEncode[ba] encodes the byte array ba as \
a Base64 string.BaseEncode[ba, \"encoding\"] encodes using"|>, 
 <|"label" -> "BaseForm", "type" -> "keyword", 
  "info" -> 
   "BaseForm[expr, n] prints with the numbers in expr given in base n. "|>, 
 <|"label" -> "Baseline", "type" -> "keyword", "info" -> "Baseline is a \
symbol that represents the baseline for purposes of alignment and \
positioning. "|>, <|"label" -> "BaselinePosition", "type" -> "keyword", 
  "info" -> "BaselinePosition is an option that specifies where the baseline \
of an object is considered to be for"|>, <|"label" -> "BasicRecurrentLayer", 
  "type" -> "keyword", "info" -> "BasicRecurrentLayer[n] represents a \
trainable recurrent layer that takes a sequence of vectors and p"|>, 
 <|"label" -> "BatchNormalizationLayer", "type" -> "keyword", 
  "info" -> "BatchNormalizationLayer[] represents a trainable net layer that \
normalizes its input data by learnin"|>, <|"label" -> "BatchSize", 
  "type" -> "keyword", "info" -> "BatchSize is an option for NetTrain and \
related functions that specifies the size of a batch of exam"|>, 
 <|"label" -> "BatesDistribution", "type" -> "keyword", 
  "info" -> "BatesDistribution[n] represents the distribution of a mean of n \
random variables uniformly distribut"|>, <|"label" -> "BattleLemarieWavelet", 
  "type" -> "keyword", "info" -> "BattleLemarieWavelet[] represents the \
Battle\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Lemari\
\[CapitalATilde]\203\[CapitalAHat]\[Copyright] wavelet of order \
3.BattleLemarieWavelet[n] repr"|>, <|"label" -> "BayesianMaximization", 
  "type" -> "keyword", "info" -> "BayesianMaximization[f, {conf , conf , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an object \
representing the result of Bayesian maxim"|>, 
 <|"label" -> "BayesianMaximizationObject", "type" -> "keyword", 
  "info" -> "BayesianMaximizationObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents the result of a Bayesian maximization \
process."|>, <|"label" -> "BayesianMinimization", "type" -> "keyword", 
  "info" -> "BayesianMinimization[f, {conf , conf , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an object \
representing the result of Bayesian minim"|>, 
 <|"label" -> "BayesianMinimizationObject", "type" -> "keyword", 
  "info" -> "BayesianMinimizationObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents the result of a Bayesian minimization \
process. "|>, <|"label" -> "Because", "type" -> "keyword", 
  "info" -> "Because[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\\[Micro] y."|>, 
 <|"label" -> "BeckmannDistribution", "type" -> "keyword", 
  "info" -> "BeckmannDistribution[\[CapitalATilde]\216\[CapitalAHat]\274 , \
\[CapitalATilde]\216\[CapitalAHat]\274 , \
\[CapitalATilde]\217\[CapitalAHat]\203 , \
\[CapitalATilde]\217\[CapitalAHat]\203 ] represents the Beckmann distribution \
with means \[CapitalATilde]\216\[CapitalAHat]\274  and \
\[CapitalATilde]\216\[CapitalAHat]\274  and s"|>, 
 <|"label" -> "Beep", "type" -> "keyword", 
  "info" -> "Beep[] generates an audible beep when evaluated. "|>, 
 <|"label" -> "Before", "type" -> "keyword", "info" -> "Before is a symbol \
that represents the region before an object for purposes of placement."|>, 
 <|"label" -> "Begin", "type" -> "keyword", 
  "info" -> "Begin[\"context`\"] resets the current context. "|>, 
 <|"label" -> "BeginDialogPacket", "type" -> "keyword", 
  "info" -> "BeginDialogPacket[integer] is a WSTP packet that indicates the \
start of the Dialog subsession refere"|>, <|"label" -> "BellB", 
  "type" -> "keyword", "info" -> "BellB[n] gives the Bell number B . BellB[n, \
x] gives the Bell polynomial B (x). \n                   "|>, 
 <|"label" -> "BellY", "type" -> "keyword", "info" -> "BellY[n, k, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x         }] \
gives the partial Bell polynomial Y    (x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x         \
).BellY[n,"|>, <|"label" -> "Below", "type" -> "keyword", 
  "info" -> "Below is a symbol that represents the region below an object for \
purposes of placement."|>, <|"label" -> "BenfordDistribution", 
  "type" -> "keyword", "info" -> "BenfordDistribution[b] represents a Benford \
distribution with base parameter b."|>, <|"label" -> "BeniniDistribution", 
  "type" -> "keyword", "info" -> "BeniniDistribution[\[CapitalATilde]\216\\[P\
lusMinus], \[CapitalATilde]\216b2, \[CapitalATilde]\217\[CapitalAHat]\203] \
represents a Benini distribution with shape parameters \
\[CapitalATilde]\216\\[PlusMinus] and \[CapitalATilde]\216b2 and scale"|>, 
 <|"label" -> "BenktanderGibratDistribution", "type" -> "keyword", 
  "info" -> "BenktanderGibratDistribution[a, b] represents a Benktander \
distribution of type I with parameters a "|>, 
 <|"label" -> "BenktanderWeibullDistribution", "type" -> "keyword", 
  "info" -> "BenktanderWeibullDistribution[a, b] represents a Benktander \
distribution of type II with parameters "|>, <|"label" -> "BernoulliB", 
  "type" -> "keyword", "info" -> "BernoulliB[n] gives the Bernoulli number B \
. BernoulliB[n, x] gives the Bernoulli polynomial B (x). "|>, 
 <|"label" -> "BernoulliDistribution", "type" -> "keyword", 
  "info" -> "BernoulliDistribution[p] represents a Bernoulli distribution \
with probability parameter p."|>, <|"label" -> "BernoulliGraphDistribution", 
  "type" -> "keyword", "info" -> "BernoulliGraphDistribution[n, p] represents \
a Bernoulli graph distribution for n-vertex graphs with "|>, 
 <|"label" -> "BernoulliProcess", "type" -> "keyword", 
  "info" -> "BernoulliProcess[p] represents a Bernoulli process with event \
probability p."|>, <|"label" -> "BernsteinBasis", "type" -> "keyword", 
  "info" -> "                                         th\nBernsteinBasis[d, \
n, x] represents the n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    \
Bernstein ba"|>, <|"label" -> "BesagL", "type" -> "keyword", 
  "info" -> "BesagL[pdata, r] estimates Besag's L function L(r) for point \
data pdata at radius r.BesagL[pproc, r]"|>, <|"label" -> "BesselFilterModel", 
  "type" -> "keyword", "info" -> "BesselFilterModel[n] designs a lowpass \
Bessel filter of order n and cutoff frequency 1.BesselFilterM"|>, 
 <|"label" -> "BesselI", "type" -> "keyword", "info" -> "BesselI[n, z] gives \
the modified Bessel function of the first kind I (z). \n                      \
   "|>, <|"label" -> "BesselJ", "type" -> "keyword", 
  "info" -> "BesselJ[n, z] gives the Bessel function of the first kind J (z). \
\n                                  "|>, <|"label" -> "BesselJZero", 
  "type" -> "keyword", "info" -> "                                   th       \
                                                        "|>, 
 <|"label" -> "BesselK", "type" -> "keyword", "info" -> "BesselK[n, z] gives \
the modified Bessel function of the second kind K (z). \n                     \
   "|>, <|"label" -> "BesselY", "type" -> "keyword", 
  "info" -> "BesselY[n, z] gives the Bessel function of the second kind Y \
(z). \n                                 "|>, <|"label" -> "BesselYZero", 
  "type" -> "keyword", "info" -> "                                   th       \
                                                        "|>, 
 <|"label" -> "Beta", "type" -> "keyword", "info" -> "Beta[a, b] gives the \
Euler beta function \[CapitalATilde]\216\[CapitalAHat]\222(a, b). Beta[z, a, \
b] gives the incomplete beta function \[CapitalATilde]\216\[CapitalAHat]\222"\
|>, <|"label" -> "BetaBinomialDistribution", "type" -> "keyword", 
  "info" -> "BetaBinomialDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, n] represents a beta binomial mixture distribution \
with beta distribu"|>, <|"label" -> "BetaDistribution", "type" -> "keyword", 
  "info" -> "BetaDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents a continuous beta distribution with shape \
parameters \[CapitalATilde]\216\\[PlusMinus] and \[CapitalATilde]\216b2."|>, 
 <|"label" -> "BetaNegativeBinomialDistribution", "type" -> "keyword", 
  "info" -> "BetaNegativeBinomialDistribution[\[CapitalATilde]\216\\[PlusMinu\
s], \[CapitalATilde]\216b2, n] represents a beta negative binomial mixture \
distribution w"|>, <|"label" -> "BetaPrimeDistribution", "type" -> "keyword", 
  "info" -> "BetaPrimeDistribution[p, q] represents a beta prime distribution \
with shape parameters p and q. Beta"|>, <|"label" -> "BetaRegularized", 
  "type" -> "keyword", "info" -> "BetaRegularized[z, a, b] gives the \
regularized incomplete beta function I (a, b). \n                 "|>, 
 <|"label" -> "Between", "type" -> "keyword", "info" -> "Between[x, {min, \
max}] is equivalent to min \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] \
max.Between[x, {{min , max }, {min , max }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is"|>, 
 <|"label" -> "BetweennessCentrality", "type" -> "keyword", 
  "info" -> "BetweennessCentrality[g] gives a list of betweenness \
centralities for the vertices in the graph g.Be"|>, 
 <|"label" -> "BeveledPolyhedron", "type" -> "keyword", 
  "info" -> "BeveledPolyhedron[poly] gives the beveled polyhedron of poly, by \
beveling each edge. BeveledPolyhedr"|>, <|"label" -> "BezierCurve", 
  "type" -> "keyword", "info" -> "BezierCurve[{pt , pt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a graphics \
primitive that represents a \
B\[CapitalATilde]\203\[CapitalAHat]\[Copyright]zier curve with control point"\
|>, <|"label" -> "BezierFunction", "type" -> "keyword", 
  "info" -> "BezierFunction[{pt , pt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
B\[CapitalATilde]\203\[CapitalAHat]\[Copyright]zier function for a curve \
defined by the control points"|>, <|"label" -> "BilateralFilter", 
  "type" -> "keyword", "info" -> "BilateralFilter[data, \
\[CapitalATilde]\217\[CapitalAHat]\203, \
\[CapitalATilde]\216\[CapitalAHat]\274] applies a bilateral filter of spatial \
spread \[CapitalATilde]\217\[CapitalAHat]\203 and pixel value spread \
\[CapitalATilde]\216\[CapitalAHat]\274 "|>, 
 <|"label" -> "BilateralLaplaceTransform", "type" -> "keyword", 
  "info" -> "BilateralLaplaceTransform[expr, t, s] gives the bilateral \
Laplace transform of expr. BilateralLaplac"|>, 
 <|"label" -> "BilateralZTransform", "type" -> "keyword", 
  "info" -> "BilateralZTransform[expr, n, z] gives the bilateral Z transform \
of expr.BilateralZTransform[expr, {n"|>, <|"label" -> "Binarize", 
  "type" -> "keyword", "info" -> "Binarize[image] creates a binary image from \
image by replacing all values above a globally determine"|>, 
 <|"label" -> "BinaryDeserialize", "type" -> "keyword", 
  "info" -> "BinaryDeserialize[ByteArray[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246]] recovers an expression from a binary \
representation generated by Bin"|>, <|"label" -> "BinaryDistance", 
  "type" -> "keyword", "info" -> "BinaryDistance[u, v] gives the binary \
distance between vectors u and v, equal to 0 if they are ident"|>, 
 <|"label" -> "BinaryFormat", "type" -> "keyword", 
  "info" -> "BinaryFormat is an option for OpenRead and related functions \
that specifies that a stream should be "|>, <|"label" -> "BinaryImageQ", 
  "type" -> "keyword", "info" -> "BinaryImageQ[image] yields True if image \
has the form of a binary Image or Image3D object, and False"|>, 
 <|"label" -> "BinaryRead", "type" -> "keyword", 
  "info" -> "BinaryRead[stream] reads one byte of raw binary data from an \
input stream, and returns an integer fr"|>, <|"label" -> "BinaryReadList", 
  "type" -> "keyword", "info" -> "BinaryReadList[\"file\"] reads all \
remaining bytes from a file, and returns them as a list of integers"|>, 
 <|"label" -> "BinarySerialize", "type" -> "keyword", 
  "info" -> "BinarySerialize[expr] gives a binary representation of any \
expression expr as a ByteArray object."|>, <|"label" -> "BinaryWrite", 
  "type" -> "keyword", "info" -> "BinaryWrite[channel, b] writes a byte of \
data, specified as an integer from 0 to 255. BinaryWrite[ch"|>, 
 <|"label" -> "BinCounts", "type" -> "keyword", 
  "info" -> "BinCounts[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] counts the \
number of elements x  whose values lie in successive integer bins."|>, 
 <|"label" -> "BinLists", "type" -> "keyword", "info" -> "BinLists[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives lists of \
the elements x  whose values lie in successive integer bins.Bin"|>, 
 <|"label" -> "BinnedVariogramList", "type" -> "keyword", 
  "info" -> "BinnedVariogramList[{loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] computes a \
variogram using binned values. BinnedV"|>, <|"label" -> "Binomial", 
  "type" -> "keyword", "info" -> "Binomial[n, m] gives the binomial \
coefficient (n).\n\n                                               m"|>, 
 <|"label" -> "BinomialDistribution", "type" -> "keyword", 
  "info" -> "BinomialDistribution[n, p] represents a binomial distribution \
with n trials and success probability "|>, 
 <|"label" -> "BinomialPointProcess", "type" -> "keyword", 
  "info" -> "BinomialPointProcess[n, reg] represents a binomial point process \
with n points in the region reg."|>, <|"label" -> "BinomialProcess", 
  "type" -> "keyword", "info" -> "BinomialProcess[p] represents a binomial \
process with event probability p."|>, <|"label" -> "BioSequenceModify", 
  "type" -> "keyword", "info" -> "BioSequenceModify[seq, \"mod\"] gives the \
result of applying the modification \"mod\" to the sequence se"|>, 
 <|"label" -> "BipartiteGraphQ", "type" -> "keyword", 
  "info" -> "BipartiteGraphQ[g] yields True if the graph g is a bipartite \
graph and False otherwise."|>, <|"label" -> "BiquadraticFilterModel", 
  "type" -> "keyword", "info" -> "BiquadraticFilterModel[{\[CapitalATilde]\
\217\[CapitalAHat]\211, q}] creates a lowpass biquadratic filter using the \
characteristic frequen"|>, <|"label" -> "BirnbaumImportance", 
  "type" -> "keyword", "info" -> "BirnbaumImportance[rdist, t] gives the \
Birnbaum importances for all components in the ReliabilityDis"|>, 
 <|"label" -> "BirnbaumSaundersDistribution", "type" -> "keyword", 
  "info" -> "BirnbaumSaundersDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]] represents the \
Birnbaum\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Saunders \
distribution with shape paramete"|>, <|"label" -> "BitAnd", 
  "type" -> "keyword", "info" -> "BitAnd[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
bitwise AND of the integers n . \n        1   2                          "|>, 
 <|"label" -> "BitClear", "type" -> "keyword", "info" -> "                    \
                                                  k\nBitClear[n, k] sets to 0 \
the"|>, <|"label" -> "BitGet", "type" -> "keyword", 
  "info" -> "                                                               \
k\nBitGet[n, k] gets the bit correspon"|>, <|"label" -> "BitLength", 
  "type" -> "keyword", "info" -> "BitLength[n] gives the number of binary \
bits necessary to represent the integer n. "|>, 
 <|"label" -> "BitNot", "type" -> "keyword", 
  "info" -> "BitNot[n] gives the bitwise NOT of the integer n. "|>, 
 <|"label" -> "BitOr", "type" -> "keyword", "info" -> "BitOr[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
bitwise OR of the integers n . \n       1   2                             "|>\
, <|"label" -> "BitRate", "type" -> "keyword", "info" -> "BitRate is an \
option that specifies an approximate number of bits per second when creating \
video and"|>, <|"label" -> "BitSet", "type" -> "keyword", 
  "info" -> "                                                                 \
   k\nBitSet[n, k] sets to 1 the bit"|>, <|"label" -> "BitShiftLeft", 
  "type" -> "keyword", "info" -> "BitShiftLeft[n, k] shifts the binary bits \
in the integer n to the left by k places, padding with zer"|>, 
 <|"label" -> "BitShiftRight", "type" -> "keyword", 
  "info" -> "BitShiftRight[n, k] shifts the binary bits in the integer n to \
the right by k places, dropping bits "|>, <|"label" -> "BitXor", 
  "type" -> "keyword", "info" -> "BitXor[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
bitwise XOR of the integers n . \n        1   2                          "|>, 
 <|"label" -> "BiweightLocation", "type" -> "keyword", 
  "info" -> "BiweightLocation[list] gives the value of the biweight location \
estimator of the elements in list.Bi"|>, <|"label" -> "BiweightMidvariance", 
  "type" -> "keyword", "info" -> "BiweightMidvariance[list] gives the value \
of the biweight midvariance of the elements in list.Biweig"|>, 
 <|"label" -> "Black", "type" -> "keyword", 
  "info" -> 
   "Black represents the color black in graphics or style specifications. "|>\
, <|"label" -> "BlackmanHarrisWindow", "type" -> "keyword", 
  "info" -> "BlackmanHarrisWindow[x] represents a \
Blackman\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Harris \
window function of x."|>, <|"label" -> "BlackmanNuttallWindow", 
  "type" -> "keyword", "info" -> "BlackmanNuttallWindow[x] represents a \
Blackman\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Nuttall \
window function of x."|>, <|"label" -> "BlackmanWindow", "type" -> "keyword", 
  "info" -> 
   "BlackmanWindow[x] represents a Blackman window function of x."|>, 
 <|"label" -> "Blank", "type" -> "keyword", "info" -> "_ or Blank[] is a \
pattern object that can stand for any Wolfram Language expression. _h or \
Blank[h] "|>, <|"label" -> "BlankNullSequence", "type" -> "keyword", 
  "info" -> "___ (three _ characters) or BlankNullSequence[] is a pattern \
object that can stand for any sequence "|>, <|"label" -> "BlankSequence", 
  "type" -> "keyword", "info" -> "__ (two _ characters) or BlankSequence[] is \
a pattern object that can stand for any sequence of one "|>, 
 <|"label" -> "Blend", "type" -> "keyword", "info" -> "Blend[{col , col }, x] \
gives a color obtained by blending a fraction 1 - x of color col  and x of \
co"|>, <|"label" -> "Block", "type" -> "keyword", 
  "info" -> "Block[{x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, expr] specifies \
that expr is to be evaluated with local values for the symbols x, y"|>, 
 <|"label" -> "BlockMap", "type" -> "keyword", "info" -> "BlockMap[f, list, \
n] applies f to non-overlapping sublists of length n in list. BlockMap[f, \
list, n,"|>, <|"label" -> "BlockRandom", "type" -> "keyword", 
  "info" -> "BlockRandom[expr] evaluates expr with all pseudorandom \
generators localized, so that uses of SeedRan"|>, 
 <|"label" -> "BlomqvistBetaTest", "type" -> "keyword", 
  "info" -> "BlomqvistBetaTest[v , v ] tests whether the vectors v  and v  \
are independent.BlomqvistBetaTest[m , "|>, <|"label" -> "Blue", 
  "type" -> "keyword", "info" -> 
   "Blue represents the color blue in graphics or style specifications. "|>, 
 <|"label" -> "Blur", "type" -> "keyword", "info" -> "Blur[image] gives a \
blurred version of image.Blur[image, r] gives a version of image blurred over \
pi"|>, <|"label" -> "BodePlot", "type" -> "keyword", 
  "info" -> "BodePlot[lsys] generates a Bode plot of a linear time-invariant \
system lsys.BodePlot[lsys, {\[CapitalATilde]\217\[CapitalAHat]\211   , \
\[CapitalATilde]\217\[CapitalAHat]\211 "|>, <|"label" -> "BohmanWindow", 
  "type" -> "keyword", "info" -> 
   "BohmanWindow[x] represents a Bohman window function of x."|>, 
 <|"label" -> "Bold", "type" -> "keyword", 
  "info" -> "Bold represents a bold font weight."|>, 
 <|"label" -> "Bond", "type" -> "keyword", "info" -> "Bond[{id , id }] \
represents a single chemical bond between atoms with indices id  and id \
.Bond[{id ,"|>, <|"label" -> "BondLabels", "type" -> "keyword", 
  "info" -> "BondLabels is an option for MoleculePlot and MoleculePlot3D that \
specifies what labels and label pos"|>, <|"label" -> "BondLabelStyle", 
  "type" -> "keyword", "info" -> "BondLabelStyle is an option for \
MoleculePlot and MoleculePlot3D that specifies the style to use for "|>, 
 <|"label" -> "Bookmarks", "type" -> "keyword", 
  "info" -> "Bookmarks is an option for Manipulate and related functions that \
gives a list of bookmark settings."|>, <|"label" -> "Boole", 
  "type" -> "keyword", "info" -> 
   "Boole[expr] yields 1 if expr is True and 0 if it is False. "|>, 
 <|"label" -> "BooleanConvert", "type" -> "keyword", 
  "info" -> "BooleanConvert[expr] converts the Boolean expression expr to \
disjunctive normal form.BooleanConvert["|>, 
 <|"label" -> "BooleanCountingFunction", "type" -> "keyword", 
  "info" -> "BooleanCountingFunction[k   , n] represents a Boolean function \
of n variables that gives True if at "|>, <|"label" -> "BooleanFunction", 
  "type" -> "keyword", "info" -> "                                       \
th\nBooleanFunction[k, n] represents the \
k\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    Boolean function"|>, 
 <|"label" -> "BooleanGraph", "type" -> "keyword", 
  "info" -> "BooleanGraph[bfunc, g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, g ] gives the \
Boolean graph defined by the Boolean function bfunc on the "|>, 
 <|"label" -> "BooleanMaxterms", "type" -> "keyword", 
  "info" -> "                                       th\nBooleanMaxterms[k, n] \
represents the k\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    \
maxterm in n var"|>, <|"label" -> "BooleanMinimize", "type" -> "keyword", 
  "info" -> "BooleanMinimize[expr] finds a minimal-length disjunctive normal \
form representation of expr.BooleanM"|>, <|"label" -> "BooleanMinterms", 
  "type" -> "keyword", "info" -> "                                       \
th\nBooleanMinterms[k, n] represents the \
k\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    minterm in n var"|>, 
 <|"label" -> "BooleanQ", "type" -> "keyword", 
  "info" -> "BooleanQ[expr] returns True if expr is either True or False."|>, 
 <|"label" -> "BooleanRegion", "type" -> "keyword", 
  "info" -> "BooleanRegion[bfunc, {reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents the \
Boolean combination bfunc of regions reg , reg "|>, 
 <|"label" -> "Booleans", "type" -> "keyword", "info" -> "Booleans represents \
the domain of Booleans, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Booleans. "|>, 
 <|"label" -> "BooleanStrings", "type" -> "keyword", 
  "info" -> "BooleanStrings is an option to TextString and related functions \
that determines what strings corresp"|>, <|"label" -> "BooleanTable", 
  "type" -> "keyword", "info" -> "BooleanTable[bf] gives a list of truth \
values for all possible combinations of variable values suppl"|>, 
 <|"label" -> "BooleanVariables", "type" -> "keyword", 
  "info" -> "BooleanVariables[expr] gives a list of the Boolean variables in \
the Boolean expression expr.BooleanV"|>, <|"label" -> "BorderDimensions", 
  "type" -> "keyword", "info" -> "BorderDimensions[image] gives the pixel \
width of uniform borders of image in the form {{left, right}"|>, 
 <|"label" -> "BorelTannerDistribution", "type" -> "keyword", 
  "info" -> "BorelTannerDistribution[\[CapitalATilde]\216\\[PlusMinus], n] \
represents a \
Borel\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Tanner \
distribution with shape parameters \[CapitalATilde]\216\\[PlusMinus] and n."|>\
, <|"label" -> "Bottom", "type" -> "keyword", "info" -> "Bottom is a symbol \
that represents the bottom for purposes of alignment and positioning. "|>, 
 <|"label" -> "BottomHatTransform", "type" -> "keyword", 
  "info" -> "BottomHatTransform[image, ker] gives the morphological \
bottom-hat transform of image with respect to"|>, 
 <|"label" -> "BoundaryDiscretizeGraphics", "type" -> "keyword", 
  "info" -> "BoundaryDiscretizeGraphics[g] discretizes a 2D or 3D graphic g \
into a BoundaryMeshRegion.BoundaryDis"|>, 
 <|"label" -> "BoundaryDiscretizeRegion", "type" -> "keyword", 
  "info" -> "BoundaryDiscretizeRegion[reg] discretizes the region reg into a \
BoundaryMeshRegion.BoundaryDiscretiz"|>, <|"label" -> "BoundaryMesh", 
  "type" -> "keyword", "info" -> 
   "BoundaryMesh[mreg] gives a BoundaryMeshRegion from a MeshRegion mreg. "|>\
, <|"label" -> "BoundaryMeshRegionQ", "type" -> "keyword", 
  "info" -> "BoundaryMeshRegionQ[reg] yields True if the region reg is a \
valid BoundaryMeshRegion object and Fals"|>, <|"label" -> "BoundaryStyle", 
  "type" -> "keyword", "info" -> "BoundaryStyle is an option for plotting \
functions that specifies the style in which boundaries of re"|>, 
 <|"label" -> "BoundedRegionQ", "type" -> "keyword", 
  "info" -> "BoundedRegionQ[reg] gives True if reg is a bounded region and \
False otherwise. "|>, <|"label" -> "BracketingBar", "type" -> "keyword", 
  "info" -> "BracketingBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\203 x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\204."|>, 
 <|"label" -> "BrayCurtisDistance", "type" -> "keyword", 
  "info" -> "BrayCurtisDistance[u, v] gives the \
Bray\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Curtis \
distance between vectors u and v."|>, <|"label" -> "BreadthFirstScan", 
  "type" -> "keyword", "info" -> "BreadthFirstScan[g, s, {event  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f , event  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] performs a \
breadth-first scan (bfs) of the gra"|>, <|"label" -> "Break", 
  "type" -> "keyword", "info" -> 
   "Break[] exits the nearest enclosing Do, For, or While. "|>, 
 <|"label" -> "BridgeData", "type" -> "keyword", 
  "info" -> "BridgeData[entity, property] gives the value of the specified \
property for the bridge entity.BridgeD"|>, <|"label" -> "BrightnessEqualize", 
  "type" -> "keyword", "info" -> "BrightnessEqualize[image] adjusts the \
brightness across image, correcting uneven illumination.Bright"|>, 
 <|"label" -> "BroadcastStationData", "type" -> "keyword", 
  "info" -> "BroadcastStationData[entity, property] gives the value of the \
specified property for the broadcast s"|>, <|"label" -> "Brown", 
  "type" -> "keyword", "info" -> 
   "Brown represents the color brown in graphics or style specifications. "|>\
, <|"label" -> "BrownianBridgeProcess", "type" -> "keyword", 
  "info" -> "BrownianBridgeProcess[\[CapitalATilde]\217\[CapitalAHat]\203, {t \
, a}, {t , b}] represents the Brownian bridge process from value a at ti"|>, 
 <|"label" -> "BSplineCurve", "type" -> "keyword", 
  "info" -> "BSplineCurve[{pt , pt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a graphics \
primitive that represents a nonuniform rational B-spline c"|>, 
 <|"label" -> "BSplineFunction", "type" -> "keyword", 
  "info" -> "BSplineFunction[{pt , pt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
B-spline function for a curve defined by the control poi"|>, 
 <|"label" -> "BSplineSurface", "type" -> "keyword", 
  "info" -> "BSplineSurface[array] is a graphics primitive that represents a \
nonuniform rational B-spline surface"|>, <|"label" -> "BubbleChart", 
  "type" -> "keyword", "info" -> "BubbleChart[{{x , y , z }, {x , y , z }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a bubble \
chart with bubbles at positions {x , y }"|>, <|"label" -> "BubbleChart3D", 
  "type" -> "keyword", "info" -> "BubbleChart3D[{{x , y , z , u }, {x , y , z \
, u }, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a \
3D bubble chart with bubbles at posit"|>, <|"label" -> "BubbleScale", 
  "type" -> "keyword", "info" -> "BubbleScale is an option to BubbleChart and \
related functions that specifies how the scale of each b"|>, 
 <|"label" -> "BubbleSizes", "type" -> "keyword", 
  "info" -> "BubbleSizes is an option to BubbleChart and related functions \
that specifies the range of sizes used"|>, <|"label" -> "BuildingData", 
  "type" -> "keyword", "info" -> "BuildingData[entity, property] gives the \
value of the specified property for the building entity.Bui"|>, 
 <|"label" -> "BulletGauge", "type" -> "keyword", 
  "info" -> "BulletGauge[value, reference, {min, max}] draws a bullet gauge \
showing value and reference in a rang"|>, <|"label" -> "BusinessDayQ", 
  "type" -> "keyword", "info" -> "BusinessDayQ[date] returns True if the date \
is a business day and returns False otherwise."|>, 
 <|"label" -> "ButterflyGraph", "type" -> "keyword", 
  "info" -> "ButterflyGraph[n] gives the order-n butterfly graph. \
ButterflyGraph[n, b] gives the base-b order-n b"|>, 
 <|"label" -> "ButterworthFilterModel", "type" -> "keyword", 
  "info" -> "ButterworthFilterModel[n] creates a lowpass Butterworth filter \
of order n and cutoff frequency of 1."|>, <|"label" -> "Byte", 
  "type" -> "keyword", "info" -> 
   "Byte represents a single byte of data in Read. "|>, 
 <|"label" -> "ByteArray", "type" -> "keyword", 
  "info" -> "ByteArray[{b , b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] constructs a \
ByteArray object containing the byte values b .ByteArray[\"string"|>, 
 <|"label" -> "ByteArrayFormat", "type" -> "keyword", 
  "info" -> "ByteArrayFormat[ba] attempts to determine what ImportByteArray \
format could be used to import the By"|>, <|"label" -> "ByteArrayFormatQ", 
  "type" -> "keyword", "info" -> "ByteArrayFormatQ[ba, \"fmt\"] gives True if \
the ByteArray object ba might be imported as format \"fmt\" "|>, 
 <|"label" -> "ByteArrayQ", "type" -> "keyword", 
  "info" -> "ByteArrayQ[expr] gives True if expr is a valid ByteArray object, \
and False otherwise."|>, <|"label" -> "ByteArrayToString", 
  "type" -> "keyword", "info" -> "ByteArrayToString[ba] returns a string by \
decoding the data in the byte array ba, assuming UTF-8 enc"|>, 
 <|"label" -> "ByteOrdering", "type" -> "keyword", 
  "info" -> "ByteOrdering is an option for BinaryRead, BinaryWrite, and \
related functions that specifies what ord"|>, <|"label" -> "CalendarConvert", 
  "type" -> "keyword", "info" -> "CalendarConvert[date, calendar] converts \
the date object date to the specified calendar type calenda"|>, 
 <|"label" -> "CalendarData", "type" -> "keyword", 
  "info" -> "CalendarData[cal] gives the default parameters associated with \
the date calendar cal.CalendarData[co"|>, <|"label" -> "CalendarType", 
  "type" -> "keyword", "info" -> "CalendarType is an option that determines \
the calendar system in which all dates are to be interpret"|>, 
 <|"label" -> "CallPacket", "type" -> "keyword", 
  "info" -> "CallPacket[integer, list] is a WSTP packet encapsulating a \
request to invoke the external function n"|>, 
 <|"label" -> "CanberraDistance", "type" -> "keyword", 
  "info" -> "CanberraDistance[u, v] gives the Canberra distance between \
vectors u and v."|>, <|"label" -> "Cancel", "type" -> "keyword", 
  "info" -> "Cancel[expr] cancels out common factors in the numerator and \
denominator of expr. "|>, <|"label" -> "CandlestickChart", 
  "type" -> "keyword", "info" -> "CandlestickChart[{{date , {open , high , \
low , close }}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
makes a chart with candles representing"|>, <|"label" -> "CanonicalGraph", 
  "type" -> "keyword", "info" -> "CanonicalGraph[g] gives a canonical form of \
the graph g.CanonicalGraph[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w "|>, 
 <|"label" -> "CanonicalizePolygon", "type" -> "keyword", 
  "info" -> "CanonicalizePolygon[poly] gives a canonical representation of \
the polygon poly with shared coordinat"|>, 
 <|"label" -> "CanonicalizePolyhedron", "type" -> "keyword", 
  "info" -> "CanonicalizePolyhedron[poly] gives a canonical representation of \
the polyhedron poly with shared coo"|>, <|"label" -> "CanonicalizeRegion", 
  "type" -> "keyword", "info" -> "CanonicalizeRegion[reg] gives a canonical \
representation of the region reg."|>, <|"label" -> "CanonicalName", 
  "type" -> "keyword", "info" -> "CanonicalName[entity] gives the canonical \
name for the entity specified by entity.CanonicalName[{ent"|>, 
 <|"label" -> "CanonicalWarpingCorrespondence", "type" -> "keyword", 
  "info" -> "CanonicalWarpingCorrespondence[s , s ] gives the canonical time \
warping (CTW) correspondence between"|>, 
 <|"label" -> "CanonicalWarpingDistance", "type" -> "keyword", 
  "info" -> "CanonicalWarpingDistance[s , s ] gives the canonical time \
warping (CTW) distance between sequences s"|>, 
 <|"label" -> "CantorMesh", "type" -> "keyword", 
  "info" -> "                                                     th          \
                                   "|>, <|"label" -> "CantorStaircase", 
  "type" -> "keyword", "info" -> "CantorStaircase[x] gives the Cantor \
staircase function F (x).\n                                      "|>, 
 <|"label" -> "Cap", "type" -> "keyword", "info" -> "Cap[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\214\[CapitalAHat]\[Cent] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\214\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "CapForm", "type" -> "keyword", "info" -> "CapForm[type] is a \
graphics primitive that specifies what type of caps should be used at the \
ends of"|>, <|"label" -> "CapitalDifferentialD", "type" -> "keyword", 
  "info" -> "CapitalDifferentialD[x] displays as \
\[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\213 x."|>, 
 <|"label" -> "Capitalize", "type" -> "keyword", 
  "info" -> "Capitalize[string] yields a string in which the first character \
has been made uppercase.Capitalize[s"|>, <|"label" -> "CapsuleShape", 
  "type" -> "keyword", "info" -> "CapsuleShape[{{x , y , z }, {x , y , z }}, \
r] represents the filled capsule between points {x , y , "|>, 
 <|"label" -> "CarlemanLinearize", "type" -> "keyword", 
  "info" -> "CarlemanLinearize[sys, spec] Carleman linearizes the nonlinear \
state-space model sys according to sp"|>, <|"label" -> "CarlsonRC", 
  "type" -> "keyword", "info" -> "CarlsonRC[x, y] gives the Carlson's \
elliptic integral R (x, y).\n                                    "|>, 
 <|"label" -> "CarlsonRD", "type" -> "keyword", 
  "info" -> "CarlsonRD[x, y, z] gives the Carlson's elliptic integral R (x, \
y, z).\n                              "|>, <|"label" -> "CarlsonRE", 
  "type" -> "keyword", "info" -> "CarlsonRE[x, y] gives the Carlson's \
elliptic integral R (x, y).\n                                    "|>, 
 <|"label" -> "CarlsonRF", "type" -> "keyword", 
  "info" -> "CarlsonRF[x, y, z] gives the Carlson's elliptic integral R (x, \
y, z).\n                              "|>, <|"label" -> "CarlsonRG", 
  "type" -> "keyword", "info" -> "CarlsonRG[x, y, z] gives the Carlson's \
elliptic integral R (x, y, z).\n                              "|>, 
 <|"label" -> "CarlsonRJ", "type" -> "keyword", 
  "info" -> "CarlsonRJ[x, y, z, \[CapitalATilde]\217\[CapitalAHat]\201] gives \
Carlson's elliptic integral R (x, y, z, \
\[CapitalATilde]\217\[CapitalAHat]\201).\n                            "|>, 
 <|"label" -> "CarlsonRK", "type" -> "keyword", 
  "info" -> "CarlsonRK[x, y] gives the Carlson's elliptic integral R (x, \
y).\n                                    "|>, 
 <|"label" -> "CarlsonRM", "type" -> "keyword", 
  "info" -> "CarlsonRM[x, y, \[CapitalATilde]\217\[CapitalAHat]\201] gives \
Carlson's elliptic integral R (x, y, \
\[CapitalATilde]\217\[CapitalAHat]\201).\n                                  "\
|>, <|"label" -> "CarmichaelLambda", "type" -> "keyword", 
  "info" -> "CarmichaelLambda[n] gives the Carmichael function \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet](n)."|>, 
 <|"label" -> "CaseOrdering", "type" -> "keyword", 
  "info" -> "CaseOrdering is an option for AlphabeticSort and related \
functions that specifies how upper versus l"|>, 
 <|"label" -> "Cases", "type" -> "keyword", "info" -> "Cases[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, pattern] gives \
a list of the e  that match the pattern. Cases[{e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, pattern \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] "|>, 
 <|"label" -> "CaseSensitive", "type" -> "keyword", 
  "info" -> "CaseSensitive[patt] represents a string pattern that requires \
matching typographical case, even with"|>, <|"label" -> "Cashflow", 
  "type" -> "keyword", "info" -> "Cashflow[{c , c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, c }] represents \
a series of cash flows occurring at unit time intervals.Cashflo"|>, 
 <|"label" -> "Casoratian", "type" -> "keyword", 
  "info" -> "Casoratian[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, n] gives the \
Casoratian determinant for the sequences y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 depending on"|>, 
 <|"label" -> "Catalan", "type" -> "keyword", "info" -> "Catalan is Catalan's \
constant, with numerical value \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 0.915966. "|>, 
 <|"label" -> "CatalanNumber", "type" -> "keyword", 
  "info" -> "                             th\nCatalanNumber[n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    Catalan number C .\n \
                "|>, <|"label" -> "Catch", "type" -> "keyword", 
  "info" -> "Catch[expr] returns the argument of the first Throw generated in \
the evaluation of expr. Catch[expr,"|>, 
 <|"label" -> "CategoricalDistribution", "type" -> "keyword", 
  "info" -> "CategoricalDistribution[{c , c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
uniform categorical distribution over classes c , c"|>, 
 <|"label" -> "Catenate", "type" -> "keyword", "info" -> "Catenate[{list , \
list , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a \
single list with all elements from the list  in order. Catenate"|>, 
 <|"label" -> "CatenateLayer", "type" -> "keyword", 
  "info" -> "CatenateLayer[] represents a net layer that takes a list of \
input arrays and catenates them.Catenate"|>, 
 <|"label" -> "CauchyDistribution", "type" -> "keyword", 
  "info" -> "CauchyDistribution[a, b] represents a Cauchy distribution with \
location parameter a and scale parame"|>, <|"label" -> "CauchyWindow", 
  "type" -> "keyword", "info" -> "CauchyWindow[x] represents a Cauchy window \
function of x.CauchyWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the \
parameter \[CapitalATilde]\216\\[PlusMinus].\n"|>, 
 <|"label" -> "CayleyGraph", "type" -> "keyword", 
  "info" -> 
   "CayleyGraph[group] returns a Cayley graph representation of group."|>, 
 <|"label" -> "CDFWavelet", "type" -> "keyword", 
  "info" -> "CDFWavelet[] represents a \
Cohen\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Daubechies\
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Feauveau wavelet \
of type \"9/7\". CDFWavelet[\"type\"] repres"|>, 
 <|"label" -> "Ceiling", "type" -> "keyword", "info" -> "Ceiling[x] gives the \
smallest integer greater than or equal to x. Ceiling[x, a] gives the smallest \
m"|>, <|"label" -> "CensoredDistribution", "type" -> "keyword", 
  "info" -> "CensoredDistribution[{x   , x   }, dist] represents the \
distribution of values that come from dist a"|>, 
 <|"label" -> "Censoring", "type" -> "keyword", 
  "info" -> "Censoring[t, c] represents a censored event time t with \
censoring c.Censoring[{t , t , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, c] repres"|>, 
 <|"label" -> "Center", "type" -> "keyword", "info" -> "Center is a symbol \
that represents the center for purposes of alignment and positioning. "|>, 
 <|"label" -> "CenterArray", "type" -> "keyword", 
  "info" -> "CenterArray[a, n] creates a list of length n with the elements \
of a at the center and zeros elsewher"|>, <|"label" -> "CenterDot", 
  "type" -> "keyword", "info" -> "CenterDot[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\202\\[CenterDot] y \[CapitalATilde]\202\\[CenterDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "CenteredInterval", "type" -> "keyword", 
  "info" -> "CenteredInterval[x, dx] for real numbers x and dx gives a \
centered interval that contains the real i"|>, 
 <|"label" -> "CentralFeature", "type" -> "keyword", 
  "info" -> "CentralFeature[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
central feature of the elements x .CentralFeature[{x  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] v , x "|>, 
 <|"label" -> "CentralMoment", "type" -> "keyword", 
  "info" -> "                                   th                            \
                                   "|>, 
 <|"label" -> "CentralMomentGeneratingFunction", "type" -> "keyword", 
  "info" -> "CentralMomentGeneratingFunction[dist, t] gives the central \
moment-generating function for the distri"|>, <|"label" -> "Cepstrogram", 
  "type" -> "keyword", "info" -> "Cepstrogram[data] plots the array of power \
cepstra computed on each partition of data.Cepstrogram[da"|>, 
 <|"label" -> "CepstrogramArray", "type" -> "keyword", 
  "info" -> "CepstrogramArray[data] computes an array of cepstra on \
data.CepstrogramArray[data, n] uses partition"|>, 
 <|"label" -> "CepstrumArray", "type" -> "keyword", 
  "info" -> "CepstrumArray[data] computes the power cepstrum of \
data.CepstrumArray[data, type] computes the speci"|>, 
 <|"label" -> "CForm", "type" -> "keyword", 
  "info" -> "CForm[expr] prints as a C language version of expr. "|>, 
 <|"label" -> "ChampernowneNumber", "type" -> "keyword", 
  "info" -> "ChampernowneNumber[b] gives the base-b Champernowne number C \
.ChampernowneNumber[] gives the base-10"|>, <|"label" -> "ChannelBase", 
  "type" -> "keyword", "info" -> "ChannelBase is an option specifying the \
base URL of the server to use for brokering channel communic"|>, 
 <|"label" -> "ChannelBrokerAction", "type" -> "keyword", 
  "info" -> "ChannelBrokerAction is an option specifying the action to \
execute on the channel broker server in ad"|>, 
 <|"label" -> "ChannelHistoryLength", "type" -> "keyword", 
  "info" -> "ChannelHistoryLength is an option to ChannelListen that \
specifies the maximum number of messages to "|>, 
 <|"label" -> "ChannelListen", "type" -> "keyword", 
  "info" -> "ChannelListen[channel] starts listening on the specified \
channel.ChannelListen[channel, func] applie"|>, 
 <|"label" -> "ChannelListener", "type" -> "keyword", 
  "info" -> "ChannelListener[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a channel listener created by ChannelListen."|>\
, <|"label" -> "ChannelListeners", "type" -> "keyword", 
  "info" -> 
   "ChannelListeners[] gives a list of currently active channel listeners."|>\
, <|"label" -> "ChannelObject", "type" -> "keyword", 
  "info" -> "ChannelObject[] gives a new anonymous channel \
specification.\\!\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\211\
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\210RowBox[{\"ChannelObje\
ct\", \"[\", \"\"mqtt"|>, <|"label" -> "ChannelReceiverFunction", 
  "type" -> "keyword", "info" -> "ChannelReceiverFunction[fun] represents a \
channel receiver function that applies fun to any channel "|>, 
 <|"label" -> "ChannelSend", "type" -> "keyword", 
  "info" -> "ChannelSend[channel, msg] sends the specified message msg to the \
specified channel."|>, <|"label" -> "ChannelSubscribers", 
  "type" -> "keyword", "info" -> "ChannelSubscribers[channel] gives a list of \
users currently subscribed to the specified channel.Chan"|>, 
 <|"label" -> "ChanVeseBinarize", "type" -> "keyword", 
  "info" -> "ChanVeseBinarize[image] finds a two-level segmentation of image \
by computing optimal contours around"|>, <|"label" -> "Character", 
  "type" -> "keyword", "info" -> 
   "Character represents a single character in Read. "|>, 
 <|"label" -> "CharacterCounts", "type" -> "keyword", 
  "info" -> "CharacterCounts[\"string\"] gives an association whose keys are \
the distinct characters in string, and"|>, <|"label" -> "CharacterEncoding", 
  "type" -> "keyword", "info" -> "CharacterEncoding is an option for input \
and output functions which specifies what raw character enc"|>, 
 <|"label" -> "CharacterEncodingsPath", "type" -> "keyword", 
  "info" -> "CharacterEncodingsPath is a global option that specifies which \
directories are searched for characte"|>, 
 <|"label" -> "CharacteristicFunction", "type" -> "keyword", 
  "info" -> "CharacteristicFunction[dist, t] gives the characteristic \
function for the distribution dist as a fun"|>, 
 <|"label" -> "CharacteristicPolynomial", "type" -> "keyword", 
  "info" -> "CharacteristicPolynomial[m, x] gives the characteristic \
polynomial for the matrix m. CharacteristicP"|>, 
 <|"label" -> "CharacterName", "type" -> "keyword", 
  "info" -> "CharacterName[\"c\"] gives the name of the character \
c.CharacterName[n] gives the name of the characte"|>, 
 <|"label" -> "CharacterNormalize", "type" -> "keyword", 
  "info" -> "CharacterNormalize[\"text\", form] converts the characters in \
text to the specified normalization form"|>, <|"label" -> "CharacterRange", 
  "type" -> "keyword", "info" -> "CharacterRange[c , c ] yields a list of the \
characters in the range from \"c \" to \"c \". CharacterRang"|>, 
 <|"label" -> "Characters", "type" -> "keyword", 
  "info" -> 
   "Characters[\"string\"] gives a list of the characters in a string. "|>, 
 <|"label" -> "ChartBaseStyle", "type" -> "keyword", 
  "info" -> "ChartBaseStyle is an option for charting functions that \
specifies the base style for all chart eleme"|>, 
 <|"label" -> "ChartElementFunction", "type" -> "keyword", 
  "info" -> "ChartElementFunction is an option for charting functions such as \
BarChart that gives a function to u"|>, <|"label" -> "ChartElements", 
  "type" -> "keyword", "info" -> "ChartElements is an option to charting \
functions such as BarChart that specifies the graphics to use"|>, 
 <|"label" -> "ChartLabels", "type" -> "keyword", 
  "info" -> "ChartLabels is an option for charting functions that specifies \
what labels should be used for chart "|>, <|"label" -> "ChartLayout", 
  "type" -> "keyword", "info" -> "ChartLayout is an option to charting \
functions that specifies the overall layout to use."|>, 
 <|"label" -> "ChartLegends", "type" -> "keyword", 
  "info" -> "ChartLegends is an option for charting functions that specifies \
what legends should be used for char"|>, <|"label" -> "ChartStyle", 
  "type" -> "keyword", "info" -> "ChartStyle is an option for charting \
functions that specifies styles in which chart elements should "|>, 
 <|"label" -> "Chebyshev1FilterModel", "type" -> "keyword", 
  "info" -> "Chebyshev1FilterModel[n] creates a lowpass Chebyshev type 1 \
filter of order n.Chebyshev1FilterModel["|>, 
 <|"label" -> "Chebyshev2FilterModel", "type" -> "keyword", 
  "info" -> "Chebyshev2FilterModel[n] creates a lowpass Chebyshev type 2 \
filter of order n.Chebyshev2FilterModel["|>, 
 <|"label" -> "ChebyshevDistance", "type" -> "keyword", 
  "info" -> "ChebyshevDistance[u, v] gives the Chebyshev or sup norm distance \
between vectors u and v."|>, <|"label" -> "ChebyshevT", "type" -> "keyword", 
  "info" -> "ChebyshevT[n, x] gives the Chebyshev polynomial of the first \
kind T (x). \n                          "|>, <|"label" -> "ChebyshevU", 
  "type" -> "keyword", "info" -> "ChebyshevU[n, x] gives the Chebyshev \
polynomial of the second kind U (x). \n                         "|>, 
 <|"label" -> "Check", "type" -> "keyword", "info" -> "Check[expr, failexpr] \
evaluates expr, and returns the result, unless messages were generated, in \
whi"|>, <|"label" -> "CheckAbort", "type" -> "keyword", 
  "info" -> "CheckAbort[expr, failexpr] evaluates expr, returning failexpr if \
an abort occurs. "|>, <|"label" -> "CheckAll", "type" -> "keyword", 
  "info" -> "CheckAll[expr, f] evaluates expr and returns f[expr, \
HoldComplete[control , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]] where the \
control  e"|>, <|"label" -> "CheckArguments", "type" -> "keyword", 
  "info" -> "CheckArguments[f[args], n] gives True if args consists of \
exactly n positional arguments followed by"|>, 
 <|"label" -> "ChemicalData", "type" -> "keyword", 
  "info" -> "ChemicalData[\"name\", \"property\"] gives the value of the \
specified property for the chemical \"name\".C"|>, 
 <|"label" -> "ChemicalFormula", "type" -> "keyword", 
  "info" -> "ChemicalFormula[\[CapitalATilde]\257\[CapitalAHat]\204\
\[CapitalAHat]\223 elem  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] n , elem  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246|>] represents a \
chemical species with n  atoms of the el"|>, <|"label" -> "ChemicalReaction", 
  "type" -> "keyword", "info" -> "ChemicalReaction[reactants \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] products] \
represents a chemical reaction between the given reactants an"|>, 
 <|"label" -> "ChessboardDistance", "type" -> "keyword", 
  "info" -> "ChessboardDistance[u, v] gives the chessboard, Chebyshev, or sup \
norm distance between vectors u and"|>, <|"label" -> "ChiDistribution", 
  "type" -> "keyword", "info" -> "ChiDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\275] represents a \[CapitalATilde]\217\[CapitalAHat]\207 \
distribution with \[CapitalATilde]\216\[CapitalAHat]\275 degrees of freedom."\
|>, <|"label" -> "ChineseRemainder", "type" -> "keyword", 
  "info" -> "ChineseRemainder[{r , r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {m , m , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
smallest x with x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] 0 that \
satisfies all the in"|>, <|"label" -> "ChiSquareDistribution", 
  "type" -> "keyword", "info" -> "                                       \
2\nChiSquareDistribution[\[CapitalATilde]\216\[CapitalAHat]\275] represents a \
\[CapitalATilde]\217\[CapitalAHat]\207  distribution with "|>, 
 <|"label" -> "CholeskyDecomposition", "type" -> "keyword", 
  "info" -> 
   "CholeskyDecomposition[m] gives the Cholesky decomposition of a matrix m. \
"|>, <|"label" -> "Chop", "type" -> "keyword", "info" -> "Chop[expr] replaces \
approximate real numbers in expr that are close to zero by the exact integer \
0. "|>, <|"label" -> "ChromaticityPlot", "type" -> "keyword", 
  "info" -> "ChromaticityPlot[colspace] plots a 2D slice of the color space \
colspace. ChromaticityPlot[color] plo"|>, <|"label" -> "ChromaticityPlot3D", 
  "type" -> "keyword", "info" -> "ChromaticityPlot3D[colspace] returns a 3D \
gamut of the color space colspace.ChromaticityPlot3D[color"|>, 
 <|"label" -> "ChromaticPolynomial", "type" -> "keyword", 
  "info" -> "ChromaticPolynomial[g, k] gives the chromatic polynomial of the \
graph g.ChromaticPolynomial[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, "|>, 
 <|"label" -> "Circle", "type" -> "keyword", "info" -> "Circle[{x, y}, r] \
represents a circle of radius r centered at {x, y}.Circle[{x, y}] gives a \
circle o"|>, <|"label" -> "CircleDot", "type" -> "keyword", 
  "info" -> "CircleDot[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\231 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\231 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "CircleMinus", "type" -> "keyword", 
  "info" -> "CircleMinus[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\226 y. "|>, 
 <|"label" -> "CirclePlus", "type" -> "keyword", 
  "info" -> "CirclePlus[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\225 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\225 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "CirclePoints", "type" -> "keyword", 
  "info" -> "CirclePoints[n] gives the positions of n points equally spaced \
around the unit circle.CirclePoints[r"|>, <|"label" -> "CircleThrough", 
  "type" -> "keyword", "info" -> "CircleThrough[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
circle passing through the points p .CircleThrough[{p , p , "|>, 
 <|"label" -> "CircleTimes", "type" -> "keyword", 
  "info" -> "CircleTimes[x] displays as \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\227 x.CircleTimes[x, \
y, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\227 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\227 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n"|>, 
 <|"label" -> "CirculantGraph", "type" -> "keyword", 
  "info" -> "CirculantGraph[n, j] gives the circulant graph C (j) with n \
vertices and jump j.CirculantGraph[n, {j"|>, 
 <|"label" -> "CircularOrthogonalMatrixDistribution", "type" -> "keyword", 
  "info" -> "CircularOrthogonalMatrixDistribution[n] represents a circular \
orthogonal matrix distribution with ma"|>, 
 <|"label" -> "CircularQuaternionMatrixDistribution", "type" -> "keyword", 
  "info" -> "CircularQuaternionMatrixDistribution[n] represents a circular \
quaternion matrix distribution with ma"|>, 
 <|"label" -> "CircularRealMatrixDistribution", "type" -> "keyword", 
  "info" -> "CircularRealMatrixDistribution[n] represents a circular real \
matrix distribution with matrix dimensi"|>, 
 <|"label" -> "CircularSymplecticMatrixDistribution", "type" -> "keyword", 
  "info" -> "CircularSymplecticMatrixDistribution[n] represents a circular \
symplectic matrix distribution with ma"|>, 
 <|"label" -> "CircularUnitaryMatrixDistribution", "type" -> "keyword", 
  "info" -> "CircularUnitaryMatrixDistribution[n] represents a circular \
unitary matrix distribution with matrix d"|>, <|"label" -> "Circumsphere", 
  "type" -> "keyword", "info" -> "                                            \
                                        n\nCircumsphere[{"|>, 
 <|"label" -> "CityData", "type" -> "keyword", "info" -> "CityData[name, \
\"property\"] gives the value of the specified property for the city with the \
specified"|>, <|"label" -> "ClassifierFunction", "type" -> "keyword", 
  "info" -> "ClassifierFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a function generated by Classify that \
classifies data into classes."|>, <|"label" -> "ClassifierInformation", 
  "type" -> "keyword", "info" -> "ClassifierInformation[classifier] generates \
a report giving information on the classifier function c"|>, 
 <|"label" -> "ClassifierMeasurements", "type" -> "keyword", 
  "info" -> "ClassifierMeasurements[classifier, testset, prop] gives \
measurements associated with property prop w"|>, 
 <|"label" -> "ClassifierMeasurementsObject", "type" -> "keyword", 
  "info" -> "ClassifierMeasurementsObject[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents an object generated by \
ClassifierMeasurements that can be"|>, <|"label" -> "Classify", 
  "type" -> "keyword", "info" -> "Classify[{example  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] class , example  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] class , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
ClassifierFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] based on the e"|>, <|"label" -> "ClassPriors", "type" -> "keyword", 
  "info" -> "ClassPriors is an option for Classify and related functions that \
specifies explicit prior probabilit"|>, <|"label" -> "Clear", 
  "type" -> "keyword", "info" -> "Clear[symbol , symbol , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] clears values \
and definitions for the symbol . Clear[\"form \", \"form \", \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]"|>, 
 <|"label" -> "ClearAll", "type" -> "keyword", "info" -> "ClearAll[symb , \
symb , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] clears \
all values, definitions, attributes, messages, and defaults associa"|>, 
 <|"label" -> "ClearAttributes", "type" -> "keyword", 
  "info" -> "ClearAttributes[symbol, attr] removes attr from the list of \
attributes of the symbol symbol. ClearAt"|>, <|"label" -> "ClearCookies", 
  "type" -> "keyword", "info" -> "ClearCookies[domain] clears all persistent \
and session cookies associated with the specified domain."|>, 
 <|"label" -> "ClebschGordan", "type" -> "keyword", 
  "info" -> "ClebschGordan[{j , m }, {j , m }, {j, m}] gives the \
Clebsch\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Gordan \
coefficient for the decomposition"|>, <|"label" -> "ClickPane", 
  "type" -> "keyword", "info" -> "ClickPane[image, func] represents a \
clickable pane that displays as image and applies func to the x,"|>, 
 <|"label" -> "ClickToCopy", "type" -> "keyword", 
  "info" -> "ClickToCopy[expr] represents a button that copies expr whenever \
it is clicked.ClickToCopy[label, exp"|>, <|"label" -> "ClickToCopyEnabled", 
  "type" -> "keyword", "info" -> "ClickToCopyEnabled is an option for Cell \
that specifies whether to show a click-to-copy overlay when"|>, 
 <|"label" -> "Clip", "type" -> "keyword", "info" -> "Clip[x] gives x clipped \
to be between -1 and +1. Clip[x, {min, max}] gives x for min \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] max, min "\
|>, <|"label" -> "ClipFill", "type" -> "keyword", 
  "info" -> "ClipFill is an option for plotting functions that specifies what \
should be shown where curves or sur"|>, <|"label" -> "ClippingStyle", 
  "type" -> "keyword", "info" -> "ClippingStyle is an option for plotting \
functions that specifies the style of what should be drawn w"|>, 
 <|"label" -> "ClipPlanes", "type" -> "keyword", 
  "info" -> "ClipPlanes is an option to Graphics3D that specifies a list of \
clipping planes that can cut away por"|>, <|"label" -> "ClipPlanesStyle", 
  "type" -> "keyword", "info" -> "ClipPlanesStyle is an option to Graphics3D \
that specifies how clipping planes defined with the ClipP"|>, 
 <|"label" -> "ClipRange", "type" -> "keyword", 
  "info" -> "ClipRange is an option to Raster3D that specifies a rectangular \
region that is cut away from the res"|>, <|"label" -> "Clock", 
  "type" -> "keyword", "info" -> "Clock[] represents a clock variable whose \
value cycles continuously from 0 to 1 once per second when"|>, 
 <|"label" -> "ClockGauge", "type" -> "keyword", 
  "info" -> "ClockGauge[] draws an analog clock face showing the local time \
with hours, minutes, and seconds.Cloc"|>, <|"label" -> "Close", 
  "type" -> "keyword", "info" -> "Close[obj] closes a stream or socket. "|>, 
 <|"label" -> "CloseKernels", "type" -> "keyword", 
  "info" -> "CloseKernels[] terminates all parallel kernels from the list \
Kernels[].CloseKernels[k] terminates th"|>, 
 <|"label" -> "ClosenessCentrality", "type" -> "keyword", 
  "info" -> "ClosenessCentrality[g] gives a list of closeness centralities \
for the vertices in the graph g.Closen"|>, <|"label" -> "Closing", 
  "type" -> "keyword", "info" -> "Closing[image, ker] gives the morphological \
closing of image with respect to the structuring element"|>, 
 <|"label" -> "CloudObjectNameFormat", "type" -> "keyword", 
  "info" -> "CloudObjectNameFormat is an option for CloudObject and related \
objects that determines how the name "|>, <|"label" -> "CloudObjectURLType", 
  "type" -> "keyword", "info" -> "CloudObjectURLType is an option for \
CloudObject and related objects that specifies the base type of "|>, 
 <|"label" -> "ClusterClassify", "type" -> "keyword", 
  "info" -> "ClusterClassify[data] generates a \
ClassifierFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] by partitioning data into clusters of simila"|>, 
 <|"label" -> "ClusterDissimilarityFunction", "type" -> "keyword", 
  "info" -> "ClusterDissimilarityFunction is an option for ClusteringTree and \
Dendrogram that specifies the inter"|>, <|"label" -> "ClusteringComponents", 
  "type" -> "keyword", "info" -> "ClusteringComponents[array] gives an array \
in which each element at the lowest level of array is rep"|>, 
 <|"label" -> "ClusteringTree", "type" -> "keyword", 
  "info" -> "ClusteringTree[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] constructs a \
weighted tree from the hierarchical clustering of the eleme"|>, 
 <|"label" -> "CMYKColor", "type" -> "keyword", 
  "info" -> "CMYKColor[c, m, y, k] represents a color in the CMYK color space \
with cyan, magenta, yellow and blac"|>, <|"label" -> "Coefficient", 
  "type" -> "keyword", "info" -> "Coefficient[expr, form] gives the \
coefficient of form in the polynomial expr. Coefficient[expr, form"|>, 
 <|"label" -> "CoefficientArrays", "type" -> "keyword", 
  "info" -> "CoefficientArrays[polys, vars] gives the arrays of coefficients \
of the variables vars in the polynom"|>, <|"label" -> "CoefficientList", 
  "type" -> "keyword", "info" -> "CoefficientList[poly, var] gives a list of \
coefficients of powers of var in poly, starting with powe"|>, 
 <|"label" -> "CoefficientRules", "type" -> "keyword", 
  "info" -> "CoefficientRules[poly, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the list \
{{e  , e  , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] c , {e  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} of exponen"|>, 
 <|"label" -> "CoifletWavelet", "type" -> "keyword", 
  "info" -> "CoifletWavelet[] represents a Coiflet wavelet of order \
2.CoifletWavelet[n] represents a Coiflet wave"|>, 
 <|"label" -> "Collect", "type" -> "keyword", "info" -> "Collect[expr, x] \
collects together terms involving the same powers of objects matching x. \
Collect[ex"|>, <|"label" -> "CollinearPoints", "type" -> "keyword", 
  "info" -> "CollinearPoints[{p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] tests \
whether the points p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p  are \
collinear.\n     "|>, <|"label" -> "Colon", "type" -> "keyword", 
  "info" -> "Colon[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\\[Paragraph] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\\[Paragraph] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ColonForm", "type" -> "keyword", 
  "info" -> "ColonForm[a, b] prints as a : b."|>, 
 <|"label" -> "ColorBalance", "type" -> "keyword", 
  "info" -> "ColorBalance[image] adjusts the colors in image to achieve a \
balance that simulates the effect of ne"|>, <|"label" -> "ColorCombine", 
  "type" -> "keyword", "info" -> "ColorCombine[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
multichannel image by combining the sequence of channels"|>, 
 <|"label" -> "ColorConvert", "type" -> "keyword", 
  "info" -> "ColorConvert[color, colspace] converts the color space of a \
color to the specified color space colsp"|>, <|"label" -> "ColorCoverage", 
  "type" -> "keyword", "info" -> "ColorCoverage is an option for \
DominantColors that specifies the minimum image coverage that each co"|>, 
 <|"label" -> "ColorData", "type" -> "keyword", 
  "info" -> "ColorData[\"scheme\"] gives a function that generates colors in \
the named color scheme when applied to"|>, <|"label" -> "ColorDataFunction", 
  "type" -> "keyword", "info" -> "ColorDataFunction[range, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is a function \
that represents a color scheme. "|>, <|"label" -> "ColorDetect", 
  "type" -> "keyword", "info" -> "ColorDetect[image, cspec] returns a mask \
image representing regions in image with colors within the "|>, 
 <|"label" -> "ColorDistance", "type" -> "keyword", 
  "info" -> "ColorDistance[c , c ] gives the approximate perceptual distance \
between color directives c  and c .C"|>, <|"label" -> "ColorFunction", 
  "type" -> "keyword", "info" -> "ColorFunction is an option for graphics \
functions that specifies a function to apply to determine co"|>, 
 <|"label" -> "ColorFunctionBinning", "type" -> "keyword", 
  "info" -> "ColorFunctionBinning is an option for plotting functions that \
divides values into a limited set of b"|>, 
 <|"label" -> "ColorFunctionScaling", "type" -> "keyword", 
  "info" -> "ColorFunctionScaling is an option for graphics functions that \
specifies whether arguments supplied t"|>, <|"label" -> "Colorize", 
  "type" -> "keyword", "info" -> "Colorize[m] generates an image from an \
integer matrix m, using colors for positive integers and blac"|>, 
 <|"label" -> "ColorNegate", "type" -> "keyword", 
  "info" -> "ColorNegate[color] gives the negative of a \
color.ColorNegate[image] gives the negative of image, in "|>, 
 <|"label" -> "ColorOutput", "type" -> "keyword", 
  "info" -> "ColorOutput is an option for graphics functions that specifies \
the type of color output to produce. "|>, <|"label" -> "ColorProfileData", 
  "type" -> "keyword", "info" -> "ColorProfileData[<>, \"Description\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \"desc\", \
\"DeviceColorSpace\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \"device\", \
\"IndependentColorSpace\" "|>, <|"label" -> "ColorQ", "type" -> "keyword", 
  "info" -> "ColorQ[color] yields True if color is a valid color directive \
and False otherwise."|>, <|"label" -> "ColorQuantize", "type" -> "keyword", 
  "info" -> "ColorQuantize[image] gives an approximation to image by \
quantizing to distinct colors.ColorQuantize["|>, 
 <|"label" -> "ColorReplace", "type" -> "keyword", 
  "info" -> "ColorReplace[image, color] finds regions in image whose pixel \
values are similar to color and replac"|>, <|"label" -> "ColorSeparate", 
  "type" -> "keyword", "info" -> "ColorSeparate[image] gives a list of \
single-channel images corresponding to each of the color channe"|>, 
 <|"label" -> "ColorSetter", "type" -> "keyword", 
  "info" -> "ColorSetter[color] represents a color setter which displays as a \
swatch of the specified color and w"|>, <|"label" -> "ColorsNear", 
  "type" -> "keyword", "info" -> "ColorsNear[color] represents a region \
around color.ColorsNear[color, d] represents a region with max"|>, 
 <|"label" -> "ColorSpace", "type" -> "keyword", 
  "info" -> "ColorSpace is an option for Image and related functions that \
specifies the color space to which colo"|>, <|"label" -> "ColorToneMapping", 
  "type" -> "keyword", "info" -> "ColorToneMapping[image] applies a tone \
mapping to color values in image so as to make variations of "|>, 
 <|"label" -> "Column", "type" -> "keyword", "info" -> "Column[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is an object \
that formats with the expr  arranged in a column, with expr  "|>, 
 <|"label" -> "ColumnForm", "type" -> "keyword", 
  "info" -> "ColumnForm[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] prints as a \
column with e  above e , etc. ColumnForm[list, horiz] specifies "|>, 
 <|"label" -> "CombinatorB", "type" -> "keyword", 
  "info" -> "CombinatorB represents the B combinator."|>, 
 <|"label" -> "CombinatorC", "type" -> "keyword", 
  "info" -> "CombinatorC represents the C combinator."|>, 
 <|"label" -> "CombinatorI", "type" -> "keyword", 
  "info" -> "CombinatorI represents the I combinator."|>, 
 <|"label" -> "CombinatorK", "type" -> "keyword", 
  "info" -> "CombinatorK represents the K combinator."|>, 
 <|"label" -> "CombinatorS", "type" -> "keyword", 
  "info" -> "CombinatorS represents the S combinator."|>, 
 <|"label" -> "CombinatorW", "type" -> "keyword", 
  "info" -> "CombinatorW represents the W combinator."|>, 
 <|"label" -> "CombinatorY", "type" -> "keyword", 
  "info" -> "CombinatorY represents the Y combinator."|>, 
 <|"label" -> "CombinedEntityClass", "type" -> "keyword", 
  "info" -> "CombinedEntityClass[class , class , prop] represents a class of \
entities obtained by combining the p"|>, <|"label" -> "CombinerFunction", 
  "type" -> "keyword", "info" -> "CombinerFunction is an option for template \
functions that specifies how fragments should be assemble"|>, 
 <|"label" -> "CometData", "type" -> "keyword", 
  "info" -> "CometData[entity, property] gives the value of the specified \
property for the comet entity.CometData"|>, <|"label" -> "Commonest", 
  "type" -> "keyword", "info" -> "Commonest[list] gives a list of the \
elements that are the most common in list.Commonest[list, n] giv"|>, 
 <|"label" -> "CommonName", "type" -> "keyword", 
  "info" -> "CommonName[entity] gives the common name for the entity \
specified by entity.CommonName[{entity , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, "|>, 
 <|"label" -> "CommonUnits", "type" -> "keyword", 
  "info" -> "CommonUnits[{quantity , quantity , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, quantity }] \
converts quantity  through quantity  to common uni"|>, 
 <|"label" -> "CommunityBoundaryStyle", "type" -> "keyword", 
  "info" -> "CommunityBoundaryStyle is an option to CommunityGraphPlot that \
specifies how to style community boun"|>, <|"label" -> "CommunityGraphPlot", 
  "type" -> "keyword", "info" -> "CommunityGraphPlot[g] generates a plot \
showing the community structure of the graph g.CommunityGraph"|>, 
 <|"label" -> "CommunityLabels", "type" -> "keyword", 
  "info" -> "CommunityLabels is an option to CommunityGraphPlot that controls \
what labels and placement to use fo"|>, <|"label" -> "CommunityRegionStyle", 
  "type" -> "keyword", "info" -> "CommunityRegionStyle is an option to \
CommunityGraphPlot that specifies how to style community region"|>, 
 <|"label" -> "CompanyData", "type" -> "keyword", 
  "info" -> "CompanyData[entity, property] gives the value of the specified \
property for the company entity.Compa"|>, <|"label" -> "CompatibleUnitQ", 
  "type" -> "keyword", "info" -> "CompatibleUnitQ[quantity , quantity ] \
returns True if quantity  and quantity  have compatible units,"|>, 
 <|"label" -> "CompilationOptions", "type" -> "keyword", 
  "info" -> "CompilationOptions is an option for Compile that specifies \
settings for the compilation process. "|>, <|"label" -> "CompilationTarget", 
  "type" -> "keyword", "info" -> "CompilationTarget is an option for Compile \
that specifies the target runtime for the compiled functi"|>, 
 <|"label" -> "Compile", "type" -> "keyword", "info" -> "Compile[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, expr] creates a \
compiled function that evaluates expr assuming numerical values"|>, 
 <|"label" -> "Compiled", "type" -> "keyword", "info" -> "Compiled is an \
option for various numerical and plotting functions which specifies whether \
the expre"|>, <|"label" -> "CompiledCodeFunction", "type" -> "keyword", 
  "info" -> "CompiledCodeFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] is a function created by FunctionCompile that contains \
compiled code that is"|>, <|"label" -> "CompiledFunction", 
  "type" -> "keyword", "info" -> "CompiledFunction[args\[CapitalATilde]\
\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents compiled code for \
evaluating a compiled function. "|>, <|"label" -> "CompiledLayer", 
  "type" -> "keyword", "info" -> "CompiledLayer[func] represents a net layer \
whose computation is defined by the compilable function f"|>, 
 <|"label" -> "CompilerEnvironment", "type" -> "keyword", 
  "info" -> "CompilerEnvironment is an option for FunctionCompile and related \
functions that allows definitions t"|>, 
 <|"label" -> "CompilerEnvironmentAppendTo", "type" -> "keyword", 
  "info" -> "CompilerEnvironmentAppendTo[{def , def , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] appends \
declarations to ECCompilerEnvironment.CompilerEn"|>, 
 <|"label" -> "CompilerEnvironmentObject", "type" -> "keyword", 
  "info" -> "CompilerEnvironmentObject represents a collection of definitions \
that can be included in compilation"|>, <|"label" -> "CompilerOptions", 
  "type" -> "keyword", "info" -> "CompilerOptions is an option for \
FunctionCompile and related functions that allows options for the c"|>, 
 <|"label" -> "Complement", "type" -> "keyword", 
  "info" -> "Complement[e   , e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
elements in e    that are not in any of the e . \n            a"|>, 
 <|"label" -> "ComplementedEntityClass", "type" -> "keyword", 
  "info" -> "ComplementedEntityClass[class   , class , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an \
entity class containing all the entities "|>, <|"label" -> "CompleteGraph", 
  "type" -> "keyword", "info" -> "CompleteGraph[n] gives the complete graph \
with n vertices K .CompleteGraph[{n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, n }] gives th"|>\
, <|"label" -> "CompleteGraphQ", "type" -> "keyword", 
  "info" -> "CompleteGraphQ[g] yields True if the graph g is a complete \
graph, and False otherwise.CompleteGraphQ"|>, 
 <|"label" -> "CompleteIntegral", "type" -> "keyword", 
  "info" -> "CompleteIntegral[pde, u, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] gives a \
complete integral u for the first-order partial differ"|>, 
 <|"label" -> "CompleteKaryTree", "type" -> "keyword", 
  "info" -> "CompleteKaryTree[n] gives the complete binary tree with n \
levels.CompleteKaryTree[n, k] gives the co"|>, 
 <|"label" -> "Complex", "type" -> "keyword", 
  "info" -> "Complex is the head used for complex numbers. "|>, 
 <|"label" -> "ComplexArrayPlot", "type" -> "keyword", 
  "info" -> "ComplexArrayPlot[array] generates a plot in which complex values \
z   in an array array are shown in "|>, <|"label" -> "ComplexContourPlot", 
  "type" -> "keyword", "info" -> "ComplexContourPlot[f, {z, z   , z   }] \
generates a filled contour plot of f as a function of z. Comp"|>, 
 <|"label" -> "Complexes", "type" -> "keyword", 
  "info" -> "Complexes represents the domain of complex numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Complexes. "|>, 
 <|"label" -> "ComplexExpand", "type" -> "keyword", 
  "info" -> "ComplexExpand[expr] expands expr assuming that all variables are \
real. ComplexExpand[expr, {x , x , "|>, <|"label" -> "ComplexInfinity", 
  "type" -> "keyword", "info" -> "ComplexInfinity represents a quantity with \
infinite magnitude, but undetermined complex phase. "|>, 
 <|"label" -> "ComplexityFunction", "type" -> "keyword", 
  "info" -> "ComplexityFunction is an option for Simplify and other functions \
which gives a function to rank the "|>, <|"label" -> "ComplexListPlot", 
  "type" -> "keyword", "info" -> "ComplexListPlot[{z , z , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots complex \
numbers z , z , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
as points in the complex plane.ComplexL"|>, <|"label" -> "ComplexPlot", 
  "type" -> "keyword", "info" -> "ComplexPlot[f, {z, z   , z   }] generates a \
plot of Arg[f] over the complex rectangle with corners z"|>, 
 <|"label" -> "ComplexPlot3D", "type" -> "keyword", 
  "info" -> "ComplexPlot3D[f, {z, z   , z   }] generates a 3D plot of Abs[f] \
colored by Arg[f] over the complex r"|>, <|"label" -> "ComplexRegionPlot", 
  "type" -> "keyword", "info" -> "ComplexRegionPlot[pred, {z, z   , z   }] \
makes a plot showing the region in the complex plane for wh"|>, 
 <|"label" -> "ComplexStreamPlot", "type" -> "keyword", 
  "info" -> "ComplexStreamPlot[f, {z, z   , z   }] generates a streamline \
plot of the vector field {Re[f], Im[f]}"|>, <|"label" -> "ComplexVectorPlot", 
  "type" -> "keyword", "info" -> "ComplexVectorPlot[f, {z, z   , z   }] \
generates a vector plot of the vector field {Re[f], Im[f]} ove"|>, 
 <|"label" -> "ComponentMeasurements", "type" -> "keyword", 
  "info" -> "ComponentMeasurements[{image, lmat}, \"prop\"] computes the \
property \"prop\" for components of image in"|>, 
 <|"label" -> "ComposeList", "type" -> "keyword", 
  "info" -> "ComposeList[{f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] generates a \
list of the form {x, f [x], f [f [x]], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}. \n              \
1 "|>, <|"label" -> "ComposeSeries", "type" -> "keyword", 
  "info" -> "ComposeSeries[series , series , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] composes several \
power series. \n                    1        2"|>, 
 <|"label" -> "CompositeQ", "type" -> "keyword", 
  "info" -> "CompositeQ[n] yields True if n is a composite number, and yields \
False otherwise. "|>, <|"label" -> "Composition", "type" -> "keyword", 
  "info" -> "Composition[f , f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
composition of the functions f , f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246. \n             1 \
"|>, <|"label" -> "CompoundElement", "type" -> "keyword", 
  "info" -> "CompoundElement[{spec , spec , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
form or interpreter specification for a list of fiel"|>, 
 <|"label" -> "CompoundExpression", "type" -> "keyword", 
  "info" -> "expr  ; expr  ; \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 evaluates the \
expr  in turn, giving the last one as the result. \n    1       2    "|>, 
 <|"label" -> "CompoundPoissonDistribution", "type" -> "keyword", 
  "info" -> "CompoundPoissonDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet], dist] represents a compound Poisson distribution with rate \
parameter "|>, <|"label" -> "CompoundPoissonProcess", "type" -> "keyword", 
  "info" -> "CompoundPoissonProcess[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet], jdist] represents a compound Poisson process with rate \
parameter \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] and jum"|>, 
 <|"label" -> "CompoundRenewalProcess", "type" -> "keyword", 
  "info" -> "CompoundRenewalProcess[rdist, jdist] represents a compound \
renewal process with renewal-time distrib"|>, 
 <|"label" -> "Compress", "type" -> "keyword", 
  "info" -> 
   "Compress[expr] gives a compressed representation of expr as a string. "|>\
, <|"label" -> "CompressionLevel", "type" -> "keyword", 
  "info" -> "CompressionLevel is an option for Export and CreateArchive that \
specifies the amount of compression "|>, <|"label" -> "ComputeUncertainty", 
  "type" -> "keyword", "info" -> "ComputeUncertainty is an option for \
ClassifierMeasurements, LearnedDistribution and other functions "|>, 
 <|"label" -> "ConcaveHullMesh", "type" -> "keyword", 
  "info" -> "ConcaveHullMesh[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
concave hull mesh from the points p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.ConcaveHullMesh[{\
"|>, <|"label" -> "Condition", "type" -> "keyword", 
  "info" -> "patt/;test is a pattern which matches only if the evaluation of \
test yields True. lhs :> rhs/;test r"|>, 
 <|"label" -> "ConditionalExpression", "type" -> "keyword", 
  "info" -> "ConditionalExpression[expr, cond] is a symbolic construct that \
represents the expression expr when t"|>, <|"label" -> "Conditioned", 
  "type" -> "keyword", "info" -> "Conditioned[expr, cond] or expr \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\223 cond represents expr \
conditioned by the predicate cond."|>, <|"label" -> "Cone", 
  "type" -> "keyword", "info" -> "Cone[{{x , y , z }, {x , y , z }}, r] \
represents a cone with a base of radius r centered at (x , y ,"|>, 
 <|"label" -> "ConfidenceLevel", "type" -> "keyword", 
  "info" -> "ConfidenceLevel is an option for LinearModelFit and other \
fitting functions that specifies the level"|>, 
 <|"label" -> "ConfidenceRange", "type" -> "keyword", 
  "info" -> "ConfidenceRange is an option for SurvivalModelFit and other \
functions that specifies the range over "|>, 
 <|"label" -> "ConfidenceTransform", "type" -> "keyword", 
  "info" -> "ConfidenceTransform is an option for functions such as \
SurvivalModelFit that specifies the transform"|>, 
 <|"label" -> "ConfigurationPath", "type" -> "keyword", 
  "info" -> "ConfigurationPath is a global option that specifies which \
directories are searched for systemwide co"|>, 
 <|"label" -> "Confirm", "type" -> "keyword", "info" -> "Confirm[expr] \
confirms that expr is not considered a failure, otherwise throwing an error \
to the nea"|>, <|"label" -> "ConfirmAssert", "type" -> "keyword", 
  "info" -> "ConfirmAssert[test] confirms that test is True, otherwise \
throwing an error to the nearest surroundi"|>, 
 <|"label" -> "ConfirmBy", "type" -> "keyword", 
  "info" -> "ConfirmBy[expr, f] confirms that f[expr] returns True, otherwise \
throwing an error to the nearest su"|>, <|"label" -> "ConfirmMatch", 
  "type" -> "keyword", "info" -> "ConfirmMatch[expr, form] confirms that expr \
matches the pattern form, otherwise throwing an error to"|>, 
 <|"label" -> "ConfirmQuiet", "type" -> "keyword", 
  "info" -> "ConfirmQuiet[expr] confirms that no messages are generated \
during the evaluation of expr, otherwise "|>, 
 <|"label" -> "ConformationMethod", "type" -> "keyword", 
  "info" -> "ConformationMethod is an option for VideoJoin and others that \
specifies how to conform frames of dif"|>, <|"label" -> "ConformAudio", 
  "type" -> "keyword", "info" -> "ConformAudio[{audio , audio , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] returns a list \
of audio objects where all audio  are made to have "|>, 
 <|"label" -> "ConformImages", "type" -> "keyword", 
  "info" -> "ConformImages[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] returns a list \
of images where all image  are made to have confor"|>, 
 <|"label" -> "Congruent", "type" -> "keyword", 
  "info" -> "Congruent[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DownExclamation] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DownExclamation] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ConicGradientFilling", "type" -> "keyword", 
  "info" -> "ConicGradientFilling[{col , col , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, col }] is a \
two-dimensional graphics directive specifying that "|>, 
 <|"label" -> "ConicHullRegion", "type" -> "keyword", 
  "info" -> "ConicHullRegion[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p     }] \
represents the m-dimensional affine hull region passing through poi"|>, 
 <|"label" -> "ConicOptimization", "type" -> "keyword", 
  "info" -> "ConicOptimization[f, cons, vars] finds values of variables vars \
that minimize the linear objective f"|>, <|"label" -> "Conjugate", 
  "type" -> "keyword", "info" -> "Conjugate[z] or z \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\210 gives the complex \
conjugate of the complex number z. "|>, <|"label" -> "ConjugateTranspose", 
  "type" -> "keyword", "info" -> "                          \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\211\nConjugateTranspose[\
m] or m  gives the conjugate transpose of m. "|>, 
 <|"label" -> "Conjunction", "type" -> "keyword", 
  "info" -> "Conjunction[expr, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
conjunction of expr over all choices of the Boolean variabl"|>, 
 <|"label" -> "Connect", "type" -> "keyword", "info" -> "Connect is a setting \
for the LinkMode option of LinkOpen.  LinkMode->Connect causes a link to be \
cre"|>, <|"label" -> "ConnectedComponents", "type" -> "keyword", 
  "info" -> "ConnectedComponents[g] gives the connected components of the \
graph g.ConnectedComponents[g, {v , v ,"|>, 
 <|"label" -> "ConnectedGraphComponents", "type" -> "keyword", 
  "info" -> "ConnectedGraphComponents[g] gives the connected components of \
the graph g.ConnectedGraphComponents[g"|>, <|"label" -> "ConnectedGraphQ", 
  "type" -> "keyword", "info" -> "ConnectedGraphQ[g] yields True if the graph \
g is connected, and False otherwise."|>, 
 <|"label" -> "ConnectedMeshComponents", "type" -> "keyword", 
  "info" -> "ConnectedMeshComponents[mr] gives a list {c , c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} of disjoint path \
connected meshed regions.\n    "|>, <|"label" -> "ConnectedMoleculeQ", 
  "type" -> "keyword", "info" -> "ConnectedMoleculeQ[mol] returns True if the \
atoms in mol form are connected by bonds, and False othe"|>, 
 <|"label" -> "ConnectionSettings", "type" -> "keyword", 
  "info" -> "ConnectionSettings is an option for URLRead and related \
functions to specify advanced connection set"|>, 
 <|"label" -> "ConnectLibraryCallbackFunction", "type" -> "keyword", 
  "info" -> "ConnectLibraryCallbackFunction[mname, cf] connects a \
CompiledFunction cf with the library callback m"|>, 
 <|"label" -> "ConnesWindow", "type" -> "keyword", 
  "info" -> "ConnesWindow[x] represents a Connes window function of \
x.ConnesWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the parameter \
\[CapitalATilde]\216\\[PlusMinus].\n"|>, 
 <|"label" -> "ConservativeConvectionPDETerm", "type" -> "keyword", 
  "info" -> "ConservativeConvectionPDETerm[vars, \
\[CapitalATilde]\216\\[PlusMinus]] represents a conservative convection term \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\207            \
\[CapitalATilde]\202\\[CenterDot] (-\[CapitalATilde]\216\\[PlusMinus] "|>, 
 <|"label" -> "Constant", "type" -> "keyword", "info" -> "Constant is an \
attribute that indicates zero derivative of a symbol with respect to all \
parameters. "|>, <|"label" -> "ConstantArray", "type" -> "keyword", 
  "info" -> "ConstantArray[c, n] generates a list of n copies of the element \
c.ConstantArray[c, {n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gene"|>, 
 <|"label" -> "ConstantArrayLayer", "type" -> "keyword", 
  "info" -> "ConstantArrayLayer[] represents a layer that has no input and \
produces as output a constant array.Co"|>, <|"label" -> "ConstantImage", 
  "type" -> "keyword", "info" -> "ConstantImage[val, size] gives an image of \
the specified size with constant pixel values of val.Cons"|>, 
 <|"label" -> "ConstantPlusLayer", "type" -> "keyword", 
  "info" -> "ConstantPlusLayer[] represents a layer that adds a learnable \
bias to its input.ConstantPlusLayer[opt"|>, <|"label" -> "ConstantRegionQ", 
  "type" -> "keyword", "info" -> "ConstantRegionQ[reg] gives True if the reg \
is a constant region and False otherwise."|>, 
 <|"label" -> "Constants", "type" -> "keyword", 
  "info" -> "Constants is an option for Dt which gives a list of objects to \
be taken as constants. "|>, <|"label" -> "ConstantTimesLayer", 
  "type" -> "keyword", "info" -> "ConstantTimesLayer[] represents a layer \
that multiplies its input by a learnable scaling array.Const"|>, 
 <|"label" -> "ConstellationData", "type" -> "keyword", 
  "info" -> "ConstellationData[entity, property] gives the value of the \
specified property for the constellation "|>, 
 <|"label" -> "Construct", "type" -> "keyword", 
  "info" -> "Construct[f, x] gives f[x].Construct[f, x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x ] gives f[x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x ].\n           \
                  "|>, <|"label" -> "Containing", "type" -> "keyword", 
  "info" -> "Containing[\"outer\", \"inner\"] represents an object of type \
outer containing objects of type inner."|>, <|"label" -> "ContainsAll", 
  "type" -> "keyword", "info" -> "ContainsAll[e , e ] yields True if e  \
contains all of the elements of e .ContainsAll[e ] is an opera"|>, 
 <|"label" -> "ContainsAny", "type" -> "keyword", 
  "info" -> "ContainsAny[e , e ] yields True if e  contains any of the \
elements of e .ContainsAny[e ] is an opera"|>, 
 <|"label" -> "ContainsExactly", "type" -> "keyword", 
  "info" -> "ContainsExactly[e , e ] yields True if e  contains exactly the \
same elements as e .ContainsExactly[e"|>, <|"label" -> "ContainsNone", 
  "type" -> "keyword", "info" -> "ContainsNone[e , e ] yields True if e  \
contains none of the elements in e .ContainsNone[e ] is an op"|>, 
 <|"label" -> "ContainsOnly", "type" -> "keyword", 
  "info" -> "ContainsOnly[e , e ] yields True if e  contains only elements \
that appear in e .ContainsOnly[e ] is "|>, 
 <|"label" -> "ContentDetectorFunction", "type" -> "keyword", 
  "info" -> "ContentDetectorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a function generated by \
TrainImageContentDetector or TrainText"|>, 
 <|"label" -> "ContentFieldOptions", "type" -> "keyword", 
  "info" -> "ContentFieldOptions is an option for CreateSearchIndex and \
related functions that allows options to "|>, 
 <|"label" -> "ContentLocationFunction", "type" -> "keyword", 
  "info" -> "ContentLocationFunction is an option to CreateSearchIndex and \
related functions that specifies how t"|>, <|"label" -> "ContentObject", 
  "type" -> "keyword", "info" -> "ContentObject[\"string\"] gives a content \
object whose content is \
string.ContentObject[File[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246]] gives "|>, <|"label" -> "ContentPadding", 
  "type" -> "keyword", "info" -> "ContentPadding is an option for objects \
that can be displayed with frames that specifies whether the"|>, 
 <|"label" -> "ContentSelectable", "type" -> "keyword", 
  "info" -> "ContentSelectable is an option to constructs such as Inset, \
Graphics, and GraphicsGroup that specifi"|>, <|"label" -> "ContentSize", 
  "type" -> "keyword", "info" -> "ContentSize is an option for Manipulate and \
other functions that specifies the size of the content a"|>, 
 <|"label" -> "Context", "type" -> "keyword", "info" -> "Context[] gives the \
current context. Context[symbol] gives the context in which a symbol appears. \
Co"|>, <|"label" -> "Contexts", "type" -> "keyword", 
  "info" -> "Contexts[] gives a list of all contexts. Contexts[\"string\"] \
gives a list of the contexts that match "|>, 
 <|"label" -> "ContextToFileName", "type" -> "keyword", 
  "info" -> "ContextToFileName[\"context\"] gives the string specifying the \
file name that is by convention associa"|>, <|"label" -> "Continue", 
  "type" -> "keyword", "info" -> "Continue[] exits to the nearest enclosing \
Do, For, or While in a procedural program. "|>, 
 <|"label" -> "ContinuedFraction", "type" -> "keyword", 
  "info" -> "ContinuedFraction[x, n] generates a list of the first n terms in \
the continued fraction representati"|>, <|"label" -> "ContinuedFractionK", 
  "type" -> "keyword", "info" -> "                                            \
                                 i                      "|>, 
 <|"label" -> "ContinuousAction", "type" -> "keyword", 
  "info" -> "ContinuousAction is an option for Manipulate, Slider, and \
related functions that specifies whether a"|>, 
 <|"label" -> "ContinuousMarkovProcess", "type" -> "keyword", 
  "info" -> "ContinuousMarkovProcess[i , q] represents a continuous-time \
finite-state Markov process with transit"|>, <|"label" -> "ContinuousTask", 
  "type" -> "keyword", "info" -> "ContinuousTask[expr] represents a task in \
which expr is continuously reevaluated.ContinuousTask[expr"|>, 
 <|"label" -> "ContinuousTimeModelQ", "type" -> "keyword", 
  "info" -> "ContinuousTimeModelQ[lsys] gives True if lsys is a \
continuous-time systems model, and False otherwis"|>, 
 <|"label" -> "ContinuousWaveletData", "type" -> "keyword", 
  "info" -> "ContinuousWaveletData[{{oct , voc } -> coef , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, wave] yields a \
continuous wavelet data object with"|>, 
 <|"label" -> "ContinuousWaveletTransform", "type" -> "keyword", 
  "info" -> "ContinuousWaveletTransform[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
continuous wavelet transform of a list of values x"|>, 
 <|"label" -> "ContourDetect", "type" -> "keyword", 
  "info" -> "ContourDetect[image] gives a binary image in which white pixels \
correspond to the zeros and zero cro"|>, <|"label" -> "ContourGraphics", 
  "type" -> "keyword", "info" -> 
   "ContourGraphics[array] is a representation of a contour plot. "|>, 
 <|"label" -> "ContourLabels", "type" -> "keyword", 
  "info" -> "ContourLabels is an option for contour plots that specifies how \
to label contours. "|>, <|"label" -> "ContourLines", "type" -> "keyword", 
  "info" -> "ContourLines is an option for contour plots that specifies \
whether to draw explicit contour lines. "|>, <|"label" -> "ContourPlot", 
  "type" -> "keyword", "info" -> "ContourPlot[f, {x, x   , x   }, {y, y   , y \
  }] generates a contour plot of f as a function of x an"|>, 
 <|"label" -> "ContourPlot3D", "type" -> "keyword", 
  "info" -> "ContourPlot3D[f, {x, x   , x   }, {y, y   , y   }, {z, z   , z   \
}] produces a three-dimensional con"|>, <|"label" -> "Contours", 
  "type" -> "keyword", "info" -> "Contours is an option for contour plots \
that specifies the contours to draw. "|>, <|"label" -> "ContourShading", 
  "type" -> "keyword", "info" -> "ContourShading is an option for contour \
plots that specifies how the regions between contour lines s"|>, 
 <|"label" -> "ContourStyle", "type" -> "keyword", 
  "info" -> "ContourStyle is an option for contour plots that specifies the \
style in which contour lines or surfa"|>, <|"label" -> "ContraharmonicMean", 
  "type" -> "keyword", "info" -> "ContraharmonicMean[list] gives the \
contraharmonic mean of the values in list.ContraharmonicMean[list"|>, 
 <|"label" -> "ContrastiveLossLayer", "type" -> "keyword", 
  "info" -> "ContrastiveLossLayer[] represents a loss layer that computes a \
loss based on a distance metric and a"|>, <|"label" -> "Control", 
  "type" -> "keyword", "info" -> "Control[{u, dom}] represents an interactive \
control for the variable u in the domain dom, with the t"|>, 
 <|"label" -> "ControlActive", "type" -> "keyword", 
  "info" -> "ControlActive[act, norm] evaluates to act if a control that \
affects act is actively being used, and "|>, 
 <|"label" -> "ControllabilityGramian", "type" -> "keyword", 
  "info" -> "ControllabilityGramian[ssm] gives the controllability Gramian of \
the state-space model ssm."|>, <|"label" -> "ControllabilityMatrix", 
  "type" -> "keyword", "info" -> "ControllabilityMatrix[ssm] gives the \
controllability matrix of the state-space model ssm."|>, 
 <|"label" -> "ControllableDecomposition", "type" -> "keyword", 
  "info" -> "ControllableDecomposition[sys] yields the controllable subsystem \
of the state-space model sys.Contro"|>, <|"label" -> "ControllableModelQ", 
  "type" -> "keyword", "info" -> "ControllableModelQ[sys] yields True if the \
state-space model sys is controllable, and False otherwis"|>, 
 <|"label" -> "ControllerInformation", "type" -> "keyword", 
  "info" -> "ControllerInformation[] gives dynamically updated information on \
currently connected controller devi"|>, <|"label" -> "ControllerLinking", 
  "type" -> "keyword", "info" -> "ControllerLinking is an option for \
Manipulate, Graphics3D, Plot3D, and related functions that specif"|>, 
 <|"label" -> "ControllerManipulate", "type" -> "keyword", 
  "info" -> "ControllerManipulate[expr, {u, u   , u   }] generates a version \
of expr set up to allow interactive "|>, <|"label" -> "ControllerMethod", 
  "type" -> "keyword", "info" -> "ControllerMethod is an option for \
Manipulate, Graphics3D, Plot3D, and related functions that specifi"|>, 
 <|"label" -> "ControllerPath", "type" -> "keyword", 
  "info" -> "ControllerPath is an option that gives a list of external \
controllers or classes of controllers to t"|>, 
 <|"label" -> "ControllerState", "type" -> "keyword", 
  "info" -> "ControllerState[\"c\"] gives the state of the control c for the \
first connected controller device on w"|>, <|"label" -> "ControlPlacement", 
  "type" -> "keyword", "info" -> "ControlPlacement is an option for \
Manipulate, TabView, and other control objects that specifies wher"|>, 
 <|"label" -> "ControlsRendering", "type" -> "keyword", 
  "info" -> "ControlsRendering is a Style option that specifies how controls \
should be rendered."|>, <|"label" -> "ControlType", "type" -> "keyword", 
  "info" -> "ControlType is an option for Manipulate and related functions \
that specifies what type of controls s"|>, <|"label" -> "ConvectionPDETerm", 
  "type" -> "keyword", "info" -> "ConvectionPDETerm[vars, \
\[CapitalATilde]\216b2] represents a convection term \[CapitalATilde]\216b2 \
\[CapitalATilde]\202\\[CenterDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\207            u with \
convection coefficie"|>, <|"label" -> "Convergents", "type" -> "keyword", 
  "info" -> "Convergents[list] gives a list of the convergents corresponding \
to the continued fraction terms list"|>, <|"label" -> "ConversionOptions", 
  "type" -> "keyword", "info" -> "ConversionOptions is an option to Import \
and Export used to pass special options to a particular for"|>, 
 <|"label" -> "ConversionRules", "type" -> "keyword", 
  "info" -> "ConversionRules is an option for Cell that can be set to a list \
of rules specifying how the contents"|>, <|"label" -> "ConvexHullMesh", 
  "type" -> "keyword", "info" -> "ConvexHullMesh[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
BoundaryMeshRegion representing the convex hull from the points "|>, 
 <|"label" -> "ConvexHullRegion", "type" -> "keyword", 
  "info" -> "ConvexHullRegion[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
convex hull from the points p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.ConvexHullRegion[\
reg] "|>, <|"label" -> "ConvexOptimization", "type" -> "keyword", 
  "info" -> "ConvexOptimization[f, cons, vars] finds values of variables vars \
that minimize the convex objective "|>, <|"label" -> "ConvexPolygonQ", 
  "type" -> "keyword", "info" -> "ConvexPolygonQ[poly] gives True if the \
polygon poly is convex, and False otherwise."|>, 
 <|"label" -> "ConvexPolyhedronQ", "type" -> "keyword", 
  "info" -> "ConvexPolyhedronQ[poly] gives True if the polyhedron poly is \
convex, and False otherwise."|>, <|"label" -> "ConvexRegionQ", 
  "type" -> "keyword", "info" -> "ConvexRegionQ[reg] gives True if reg is a \
convex region and False otherwise. "|>, <|"label" -> "ConvolutionLayer", 
  "type" -> "keyword", "info" -> "ConvolutionLayer[n, s] represents a \
trainable convolutional net layer having n output channels and u"|>, 
 <|"label" -> "Convolve", "type" -> "keyword", "info" -> "Convolve[f, g, x, \
y] gives the convolution with respect to x of the expressions f and \
g.Convolve[f, "|>, <|"label" -> "ConwayGroupCo1", "type" -> "keyword", 
  "info" -> "ConwayGroupCo1[] represents the sporadic simple Conway group Co \
.\n                                  "|>, <|"label" -> "ConwayGroupCo2", 
  "type" -> "keyword", "info" -> "ConwayGroupCo2[] represents the sporadic \
simple Conway group Co .\n                                  "|>, 
 <|"label" -> "ConwayGroupCo3", "type" -> "keyword", 
  "info" -> "ConwayGroupCo3[] represents the sporadic simple Conway group Co \
.\n                                  "|>, <|"label" -> "CookieFunction", 
  "type" -> "keyword", "info" -> "CookieFunction is an option for URLRead, \
HTTPRequest, and related functions that gives a function to"|>, 
 <|"label" -> "CoordinateBounds", "type" -> "keyword", 
  "info" -> "CoordinateBounds[coords] gives a list {{x   , x   }, {y   , y   \
}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} of the bounds \
in each dimensio"|>, <|"label" -> "CoordinateBoundsArray", 
  "type" -> "keyword", "info" -> "CoordinateBoundsArray[{{x   , x   }, {y   , \
y   }, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
generates an array of {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} coordinates w"|>\
, <|"label" -> "CoordinateChartData", "type" -> "keyword", 
  "info" -> "CoordinateChartData[chart, property] gives the value of the \
specified property for chart.CoordinateC"|>, 
 <|"label" -> "CoordinatesToolOptions", "type" -> "keyword", 
  "info" -> "CoordinatesToolOptions is an option for Graphics that gives \
values of options associated with the Ge"|>, 
 <|"label" -> "CoordinateTransform", "type" -> "keyword", 
  "info" -> "CoordinateTransform[t, pt] performs the coordinate \
transformation t on the point pt.CoordinateTransf"|>, 
 <|"label" -> "CoordinateTransformData", "type" -> "keyword", 
  "info" -> "CoordinateTransformData[t, property] gives the value of the \
specified property for the coordinate tr"|>, <|"label" -> "CoplanarPoints", 
  "type" -> "keyword", "info" -> "CoplanarPoints[{p , p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] tests \
whether the points p , p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p  are \
coplanar."|>, <|"label" -> "CoprimeQ", "type" -> "keyword", 
  "info" -> "CoprimeQ[n , n ] yields True if n  and n  are relatively prime, \
and yields False otherwise. CoprimeQ"|>, <|"label" -> "Coproduct", 
  "type" -> "keyword", "info" -> "Coproduct[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "CopulaDistribution", "type" -> "keyword", 
  "info" -> "CopulaDistribution[ker, {dist , dist , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
copula distribution with kernel distribution"|>, 
 <|"label" -> "CopyDatabin", "type" -> "keyword", 
  "info" -> "CopyDatabin[bin] creates a copy of a databin.CopyDatabin[bin, \
options] creates a copy with the speci"|>, <|"label" -> "CopyDirectory", 
  "type" -> "keyword", "info" -> "CopyDirectory[dir , dir ] copies the \
directory dir  to dir . \n                 1     2              "|>, 
 <|"label" -> "CopyToClipboard", "type" -> "keyword", 
  "info" -> 
   "CopyToClipboard[expr] replaces the contents of the clipboard with expr."|>\
, <|"label" -> "CoreNilpotentDecomposition", "type" -> "keyword", 
  "info" -> "CoreNilpotentDecomposition[m] yields the core-nilpotent \
decomposition of a square matrix m."|>, <|"label" -> "CornerFilter", 
  "type" -> "keyword", "info" -> "CornerFilter[image] computes a measure for \
the presence of a corner for each pixel in image and retu"|>, 
 <|"label" -> "CornerNeighbors", "type" -> "keyword", 
  "info" -> "CornerNeighbors is an option for various array and image \
processing functions that specifies whether"|>, 
 <|"label" -> "CorrelationDistance", "type" -> "keyword", 
  "info" -> "CorrelationDistance[u, v] gives the correlation coefficient \
distance between vectors u and v."|>, <|"label" -> "CorrelationFunction", 
  "type" -> "keyword", "info" -> "CorrelationFunction[data, hspec] estimates \
the correlation function at lags hspec from data.Correlat"|>, 
 <|"label" -> "CorrelationTest", "type" -> "keyword", 
  "info" -> "CorrelationTest[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] tests whether \
the correlation coefficient for a bivariate p"|>, 
 <|"label" -> "Cos", "type" -> "keyword", 
  "info" -> "Cos[z] gives the cosine of z. "|>, 
 <|"label" -> "Cosh", "type" -> "keyword", 
  "info" -> "Cosh[z] gives the hyperbolic cosine of z. "|>, 
 <|"label" -> "CoshIntegral", "type" -> "keyword", 
  "info" -> "CoshIntegral[z] gives the hyperbolic cosine integral Chi(z)."|>, 
 <|"label" -> "CosineDistance", "type" -> "keyword", 
  "info" -> "CosineDistance[u, v] gives the angular cosine distance between \
vectors u and v."|>, <|"label" -> "CosineWindow", "type" -> "keyword", 
  "info" -> "CosineWindow[x] represents a cosine window function of \
x.CosineWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the exponent \
\[CapitalATilde]\216\\[PlusMinus].\n"|>, <|"label" -> "CosIntegral", 
  "type" -> "keyword", "info" -> 
   "CosIntegral[z] gives the cosine integral function Ci(z). "|>, 
 <|"label" -> "Cot", "type" -> "keyword", 
  "info" -> "Cot[z] gives the cotangent of z. "|>, 
 <|"label" -> "Coth", "type" -> "keyword", 
  "info" -> "Coth[z] gives the hyperbolic cotangent of z. "|>, 
 <|"label" -> "CoulombF", "type" -> "keyword", 
  "info" -> "CoulombF[l, \[CapitalATilde]\216\\[CenterDot], r] gives the \
regular Coulomb wavefunction F (\[CapitalATilde]\216\\[CenterDot], r).\n      \
                           "|>, <|"label" -> "CoulombG", "type" -> "keyword", 
  "info" -> "CoulombG[l, \[CapitalATilde]\216\\[CenterDot], r] gives the \
irregular Coulomb wavefunction G (\[CapitalATilde]\216\\[CenterDot], r).\n    \
                           "|>, <|"label" -> "CoulombH1", 
  "type" -> "keyword", "info" -> "                                            \
                          (+)\nCoulombH1[l, \
\[CapitalATilde]\216\\[CenterDot], r] gives t"|>, 
 <|"label" -> "CoulombH2", "type" -> "keyword", 
  "info" -> "                                                                 \
     (-)\nCoulombH2[l, \[CapitalATilde]\216\\[CenterDot], r] gives t"|>, 
 <|"label" -> "Count", "type" -> "keyword", "info" -> "Count[list, pattern] \
gives the number of elements in list that match pattern. Count[expr, pattern, \
l"|>, <|"label" -> "CountDistinct", "type" -> "keyword", 
  "info" -> "CountDistinct[list] gives the number of distinct elements that \
appear in list."|>, <|"label" -> "CountDistinctBy", "type" -> "keyword", 
  "info" -> "CountDistinctBy[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] gives the \
number of distinct values of f[e ] that occur.CountDistinc"|>, 
 <|"label" -> "CounterAssignments", "type" -> "keyword", 
  "info" -> "CounterAssignments is an option for selections that sets the \
value of a specified counter."|>, <|"label" -> "CounterFunction", 
  "type" -> "keyword", "info" -> "CounterFunction is an option for counters \
that specifies the symbols used to display the value of th"|>, 
 <|"label" -> "CounterIncrements", "type" -> "keyword", 
  "info" -> "CounterIncrements is an option for selections that specifies \
whether the value of a specified counte"|>, <|"label" -> "CountRoots", 
  "type" -> "keyword", "info" -> "CountRoots[f, x] gives the number of real \
roots of the univariate function f in x.CountRoots[f, {x, "|>, 
 <|"label" -> "CountryData", "type" -> "keyword", 
  "info" -> "CountryData[\"tag\", property] gives the value of the specified \
property for the country, country-like"|>, <|"label" -> "Counts", 
  "type" -> "keyword", "info" -> "Counts[list] gives an association whose \
keys are the distinct elements of list, and whose values giv"|>, 
 <|"label" -> "CountsBy", "type" -> "keyword", "info" -> "CountsBy[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] gives an \
association whose keys are the distinct values of the f[e ], and w"|>, 
 <|"label" -> "CovarianceEstimatorFunction", "type" -> "keyword", 
  "info" -> "CovarianceEstimatorFunction is an option for generalized linear \
model fitting functions that specifi"|>, <|"label" -> "CovarianceFunction", 
  "type" -> "keyword", "info" -> "CovarianceFunction[data, hspec] estimates \
the covariance function at lags hspec from data.Covariance"|>, 
 <|"label" -> "CoxianDistribution", "type" -> "keyword", 
  "info" -> "CoxianDistribution[{\[CapitalATilde]\216\\[PlusMinus] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus]     }, \
{\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] }] represent an m-phase \
Coxian distribution with phase"|>, <|"label" -> "CoxIngersollRossProcess", 
  "type" -> "keyword", "info" -> "CoxIngersollRossProcess[\[CapitalATilde]\
\216\[CapitalAHat]\274, \[CapitalATilde]\217\[CapitalAHat]\203, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], x ] represents a \
Cox\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Ingersoll\
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Ross process with \
long\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220term mean \
\[CapitalATilde]\216\[CapitalAHat]\274, "|>, <|"label" -> "CoxModel", 
  "type" -> "keyword", "info" -> "CoxModel[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents the symbolic proportional \
hazards model obtained from CoxModelFit."|>, <|"label" -> "CoxModelFit", 
  "type" -> "keyword", "info" -> "CoxModelFit[{e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, e }] constructs \
a model of the baseline hazard h (t) for events times e .CoxMode"|>, 
 <|"label" -> "CramerVonMisesTest", "type" -> "keyword", 
  "info" -> "CramerVonMisesTest[data] tests whether data is normally \
distributed using the \
Cram\[CapitalATilde]\203\[CapitalAHat]\[Copyright]r\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\223von Mises test."|>, 
 <|"label" -> "CreateArchive", "type" -> "keyword", 
  "info" -> "CreateArchive[source] creates a compressed archive in the \
current directory from source.CreateArchiv"|>, 
 <|"label" -> "CreateChannel", "type" -> "keyword", 
  "info" -> "CreateChannel[] creates a new channel for channel communication, \
with a generated name.CreateChannel"|>, 
 <|"label" -> "CreateCompilerEnvironment", "type" -> "keyword", 
  "info" -> "CreateCompilerEnvironment[] creates a compiler environment that \
can be used in FunctionCompile and r"|>, <|"label" -> "CreateDatabin", 
  "type" -> "keyword", "info" -> "CreateDatabin[] creates a databin in the \
Wolfram Data Drop and returns the corresponding Databin obj"|>, 
 <|"label" -> "CreateDataStructure", "type" -> "keyword", 
  "info" -> "CreateDataStructure[\"type\", arg , arg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] creates a data \
structure with the specified type.\n       "|>, 
 <|"label" -> "CreateDirectory", "type" -> "keyword", 
  "info" -> "CreateDirectory[\"dir\"] creates a directory with name dir. \
CreateDirectory[] creates a directory in t"|>, 
 <|"label" -> "CreateFile", "type" -> "keyword", 
  "info" -> "CreateFile[\"file\"] creates a file with name file. CreateFile[] \
creates a file in the default area fo"|>, 
 <|"label" -> "CreateIntermediateDirectories", "type" -> "keyword", 
  "info" -> "CreateIntermediateDirectories is an option for CreateDirectory \
and related functions that specifies "|>, 
 <|"label" -> "CreateLicenseEntitlement", "type" -> "keyword", 
  "info" -> "CreateLicenseEntitlement[settings] creates an on-demand license \
entitlement using settings.CreateLic"|>, 
 <|"label" -> "CreateManagedLibraryExpression", "type" -> "keyword", 
  "info" -> "CreateManagedLibraryExpression[mname, f] creates a managed \
library expression by applying f to a pos"|>, 
 <|"label" -> "CreatePacletArchive", "type" -> "keyword", 
  "info" -> "CreatePacletArchive[source] creates a paclet archive file from \
source.CreatePacletArchive[source, de"|>, 
 <|"label" -> "CreatePermissionsGroup", "type" -> "keyword", 
  "info" -> "CreatePermissionsGroup[\"name\"] creates a permissions group \
with the specified name.CreatePermissions"|>, 
 <|"label" -> "CreateScheduledTask", "type" -> "keyword", 
  "info" -> "CreateScheduledTask[expr] creates a local scheduled task that \
will repeatedly evaluate expr once per"|>, <|"label" -> "CreateSearchIndex", 
  "type" -> "keyword", "info" -> "CreateSearchIndex[dir] creates a search \
index from all files in the directory dir and its subdirecto"|>, 
 <|"label" -> "CreateTemporary", "type" -> "keyword", 
  "info" -> "CreateTemporary[] creates a temporary file with a unique name in \
the default temporary directory and"|>, <|"label" -> "CreateUUID", 
  "type" -> "keyword", "info" -> "CreateUUID[] creates a random, universally \
unique UUID string.CreateUUID[\"base\"] appends a UUID stri"|>, 
 <|"label" -> "CriterionFunction", "type" -> "keyword", 
  "info" -> "CriterionFunction is an option in functions such as \
ClusterClassify that specifies the criterion to "|>, 
 <|"label" -> "CriticalityFailureImportance", "type" -> "keyword", 
  "info" -> "CriticalityFailureImportance[rdist, t] gives the criticality \
failure importances for all components "|>, 
 <|"label" -> "CriticalitySuccessImportance", "type" -> "keyword", 
  "info" -> "CriticalitySuccessImportance[rdist, t] gives the criticality \
success importances for all components "|>, <|"label" -> "CriticalSection", 
  "type" -> "keyword", "info" -> "CriticalSection[var, expr] locks the \
variable var with respect to parallel computation, evaluates ex"|>, 
 <|"label" -> "Cross", "type" -> "keyword", 
  "info" -> "Cross[a, b] gives the vector cross product of a and b. "|>, 
 <|"label" -> "CrossEntropyLossLayer", "type" -> "keyword", 
  "info" -> "CrossEntropyLossLayer[\"Index\"] represents a net layer that \
computes the cross-entropy loss by compar"|>, <|"label" -> "CrossingCount", 
  "type" -> "keyword", "info" -> "CrossingCount[contour, p] gives a count of \
the number of times a ray starting from the point p cross"|>, 
 <|"label" -> "CrossingDetect", "type" -> "keyword", 
  "info" -> "CrossingDetect[image] gives a binary image in which white pixels \
correspond to the zero crossings in"|>, <|"label" -> "CrossingPolygon", 
  "type" -> "keyword", "info" -> "CrossingPolygon[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] gives a \
Polygon representing all points for which a ray from the po"|>, 
 <|"label" -> "Csc", "type" -> "keyword", 
  "info" -> "Csc[z] gives the cosecant of z. "|>, 
 <|"label" -> "Csch", "type" -> "keyword", 
  "info" -> "Csch[z] gives the hyperbolic cosecant of z. "|>, 
 <|"label" -> "CSGRegion", "type" -> "keyword", 
  "info" -> "CSGRegion[\"op\", {reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents the \
solid region corresponding to the Boolean combinatio"|>, 
 <|"label" -> "CSGRegionQ", "type" -> "keyword", 
  "info" -> "CSGRegionQ[reg] yields True if the region reg is a valid \
CSGRegion object and False otherwise."|>, <|"label" -> "CSGRegionTree", 
  "type" -> "keyword", "info" -> "CSGRegionTree[reg] gives the tree \
expression representing the CSG region reg."|>, 
 <|"label" -> "CTCLossLayer", "type" -> "keyword", 
  "info" -> "CTCLossLayer[] represents a net layer that computes the \
connectionist temporal classification loss b"|>, 
 <|"label" -> "Cube", "type" -> "keyword", "info" -> "Cube[] represents a \
regular cube centered at the origin with unit edge length.Cube[l] represents \
a c"|>, <|"label" -> "CubeRoot", "type" -> "keyword", 
  "info" -> "CubeRoot[x] gives the real-valued cube root of x."|>, 
 <|"label" -> "Cubics", "type" -> "keyword", "info" -> "Cubics is an option \
for functions that involve solving algebraic equations, that specifies \
whether e"|>, <|"label" -> "Cuboid", "type" -> "keyword", 
  "info" -> "Cuboid[p   ] represents a unit hypercube with its lower corner \
at p   .Cuboid[p   , p   ] represents"|>, <|"label" -> "Cumulant", 
  "type" -> "keyword", "info" -> "                              th            \
                                                     th "|>, 
 <|"label" -> "CumulantGeneratingFunction", "type" -> "keyword", 
  "info" -> "CumulantGeneratingFunction[dist, t] gives the \
cumulant-generating function for the distribution dist"|>, 
 <|"label" -> "Cup", "type" -> "keyword", "info" -> "Cup[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\214\[CapitalAHat]\[Sterling] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\214\[CapitalAHat]\[Sterling] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "CupCap", "type" -> "keyword", "info" -> "CupCap[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\215 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\215 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Curl", "type" -> "keyword", "info" -> "Curl[{f , f }, {x , x \
}] gives the curl \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 \
f /\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 x  - \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 f \
/\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 x .Curl[{f , f , \
f }, {x , x , x }] gives"|>, <|"label" -> "CurrencyConvert", 
  "type" -> "keyword", "info" -> "CurrencyConvert[quantity, target] attempts \
to convert the specified currency quantity to the specifi"|>, 
 <|"label" -> "CurrentDate", "type" -> "keyword", 
  "info" -> "CurrentDate[gran] gives the current date of the specified \
granularity type gran.CurrentDate[date, gr"|>, 
 <|"label" -> "CurrentImage", "type" -> "keyword", 
  "info" -> "CurrentImage[] returns the current image captured from a \
connected camera.CurrentImage[n] returns n "|>, 
 <|"label" -> "CurrentScreenImage", "type" -> "keyword", 
  "info" -> "CurrentScreenImage[] returns an image captured from all current \
display screens on your computer. Cu"|>, <|"label" -> "Curry", 
  "type" -> "keyword", "info" -> "Curry[f, n] represents an operator form of \
the function f of n arguments so that Curry[f, n][x ] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246[x"|>, 
 <|"label" -> "CurryApplied", "type" -> "keyword", 
  "info" -> "CurryApplied[f, n] represents an operator form of the function f \
of n arguments so that CurryApplied"|>, <|"label" -> "CurvatureFlowFilter", 
  "type" -> "keyword", "info" -> "CurvatureFlowFilter[image] applies a mean \
curvature flow filter to image.CurvatureFlowFilter[image, "|>, 
 <|"label" -> "CurveClosed", "type" -> "keyword", 
  "info" -> "CurveClosed is an option for JoinedCurve that specifies whether \
individual curve components should b"|>, <|"label" -> "Cyan", 
  "type" -> "keyword", "info" -> 
   "Cyan represents the color cyan in graphics or style specifications. "|>, 
 <|"label" -> "CycleGraph", "type" -> "keyword", 
  "info" -> "CycleGraph[n] gives the cycle graph with n vertices C .\n        \
                                    "|>, <|"label" -> "CycleIndexPolynomial", 
  "type" -> "keyword", "info" -> "CycleIndexPolynomial[perm, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] constructs \
the cycle index monomial of the permutation perm "|>, 
 <|"label" -> "Cycles", "type" -> "keyword", "info" -> "Cycles[{cyc , cyc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
permutation with disjoint cycles cyc .\n           1     2      "|>, 
 <|"label" -> "CyclicGroup", "type" -> "keyword", 
  "info" -> "CyclicGroup[n] represents the cyclic group of degree n."|>, 
 <|"label" -> "Cyclotomic", "type" -> "keyword", 
  "info" -> "                             th\nCyclotomic[n, x] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    cyclotomic \
polynomial in x. "|>, <|"label" -> "Cylinder", "type" -> "keyword", 
  "info" -> "Cylinder[{{x , y , z }, {x , y , z }}, r] represents a cylinder \
of radius r around the line from (x "|>, 
 <|"label" -> "CylindricalDecomposition", "type" -> "keyword", 
  "info" -> "CylindricalDecomposition[expr, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds a \
decomposition of the region represented by the s"|>, 
 <|"label" -> "CylindricalDecompositionFunction", "type" -> "keyword", 
  "info" -> "CylindricalDecompositionFunction[data][x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
cylindrical algebraic formula in x , "|>, 
 <|"label" -> "D", "type" -> "keyword", "info" -> "                           \
                                                               n      n  "|>, 
 <|"label" -> "DagumDistribution", "type" -> "keyword", 
  "info" -> "DagumDistribution[p, a, b] represents a Dagum distribution with \
shape parameters p and a and scale p"|>, <|"label" -> "DamData", 
  "type" -> "keyword", "info" -> "DamData[entity, property] gives the value \
of the specified property for the dam entity.DamData[{enti"|>, 
 <|"label" -> "DamerauLevenshteinDistance", "type" -> "keyword", 
  "info" -> "DamerauLevenshteinDistance[u, v] gives the \
Damerau\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Levenshtein \
distance between strings or vectors u"|>, <|"label" -> "DampingFactor", 
  "type" -> "keyword", "info" -> "DampingFactor is an option for FindRoot, \
which can be used to control convergence behavior. DampingF"|>, 
 <|"label" -> "Darker", "type" -> "keyword", "info" -> "Darker[color] \
represents a darker version of the specified color. Darker[color, f] \
represents a vers"|>, <|"label" -> "Dashed", "type" -> "keyword", 
  "info" -> "Dashed is a graphics directive specifying that lines that follow \
should be drawn dashed."|>, <|"label" -> "Dashing", "type" -> "keyword", 
  "info" -> "Dashing[{r , r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a \
two-dimensional graphics directive specifying that lines that follow are t"|>\
, <|"label" -> "DatabaseConnect", "type" -> "keyword", 
  "info" -> 
   "DatabaseConnect[db] activates a connection to the database db."|>, 
 <|"label" -> "DatabaseDisconnect", "type" -> "keyword", 
  "info" -> 
   "DatabaseDisconnect[db] deactivates a connection to the database db. "|>, 
 <|"label" -> "DatabaseReference", "type" -> "keyword", 
  "info" -> "DatabaseReference[File[\"filename\"]] represents a reference to \
a local file-based SQL database.Databa"|>, <|"label" -> "Databin", 
  "type" -> "keyword", "info" -> "Databin[\"id\"] represents a databin in the \
Wolfram Data Drop.Databin[\"id\", n] represents the first n "|>, 
 <|"label" -> "DatabinAdd", "type" -> "keyword", 
  "info" -> "DatabinAdd[bin, data] adds the specified data to a databin."|>, 
 <|"label" -> "DatabinRemove", "type" -> "keyword", 
  "info" -> "                                    th\nDatabinRemove[bin, i] \
removes the i\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   entry \
from a databin.Da"|>, <|"label" -> "Databins", "type" -> "keyword", 
  "info" -> "Databins[] gives a list of databins associated with the \
currently connected user."|>, <|"label" -> "DatabinSubmit", 
  "type" -> "keyword", "info" -> "DatabinSubmit[bin, data] submits the \
specified data to be added to the databin bin asynchronously."|>, 
 <|"label" -> "DatabinUpload", "type" -> "keyword", 
  "info" -> "DatabinUpload[bin, {entry , entry , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] bulk uploads \
all the entries entry  to a databin.DatabinUplo"|>, 
 <|"label" -> "DataDistribution", "type" -> "keyword", 
  "info" -> "DataDistribution[ddist, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
probability distribution of type ddist, estimated from a set"|>, 
 <|"label" -> "DataRange", "type" -> "keyword", 
  "info" -> "DataRange is an option for functions such as ListPlot and \
ListDensityPlot that specifies what range "|>, 
 <|"label" -> "DataReversed", "type" -> "keyword", 
  "info" -> "DataReversed is an option for ArrayPlot and related functions \
that specifies whether data should be "|>, <|"label" -> "Dataset", 
  "type" -> "keyword", "info" -> "Dataset[data] represents a structured \
dataset based on a hierarchy of lists and associations."|>, 
 <|"label" -> "DatasetTheme", "type" -> "keyword", 
  "info" -> "DatasetTheme is an option for Dataset that specifies an overall \
theme for a dataset and its elements"|>, <|"label" -> "DataStructure", 
  "type" -> "keyword", "info" -> 
   "DataStructure[\"type\", data] represents a data structure."|>, 
 <|"label" -> "DataStructureQ", "type" -> "keyword", 
  "info" -> "DataStructureQ[ds] yields True if ds is a valid data structure \
and False otherwise.DataStructureQ[ds"|>, <|"label" -> "Date", 
  "type" -> "keyword", "info" -> "Date[] gives the current local date and \
time in the form {year, month, day, hour, minute, second}. "|>, 
 <|"label" -> "DateBounds", "type" -> "keyword", 
  "info" -> "DateBounds[{date , date , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
earliest and latest of the date .DateBounds[tseries] gives t"|>, 
 <|"label" -> "Dated", "type" -> "keyword", "info" -> "Dated[obj, year] \
represents the object obj associated with a particular year.Dated[obj, date] \
repres"|>, <|"label" -> "DateDifference", "type" -> "keyword", 
  "info" -> "DateDifference[date , date ] gives the number of days from date  \
to date .DateDifference[date , date"|>, <|"label" -> "DatedUnit", 
  "type" -> "keyword", "info" -> 
   "DatedUnit[unit, date] represents the specified unit at a specific date."|>\
, <|"label" -> "DateFunction", "type" -> "keyword", 
  "info" -> "DateFunction is an option for DateListPlot and TemporalData that \
specifies how dates given as input "|>, <|"label" -> "DateHistogram", 
  "type" -> "keyword", "info" -> "DateHistogram[{date , date , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a \
histogram of the dates date .DateHistogram[{date , date , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "DateInterval", "type" -> "keyword", 
  "info" -> "DateInterval[{start, end}] represents the continuous interval of \
time between start and end.DateInte"|>, <|"label" -> "DateList", 
  "type" -> "keyword", "info" -> "DateList[] gives the current local date and \
time in the form {year, month, day, hour, minute, second"|>, 
 <|"label" -> "DateListLogPlot", "type" -> "keyword", 
  "info" -> "DateListLogPlot[{{date , v }, {date , v }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a log \
plot with values v  at a sequence of date"|>, <|"label" -> "DateListPlot", 
  "type" -> "keyword", "info" -> "DateListPlot[{{date , v }, {date , v }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {date , v }}] \
plots points with values v  at a sequence o"|>, 
 <|"label" -> "DateListStepPlot", "type" -> "keyword", 
  "info" -> "DateListStepPlot[{{date , v }, {date , v }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots the \
values v  in steps at a sequence of dates."|>, 
 <|"label" -> "DateObject", "type" -> "keyword", 
  "info" -> "DateObject[] gives the current local date.DateObject[date] gives \
a date object corresponding to the "|>, <|"label" -> "DateObjectQ", 
  "type" -> "keyword", "info" -> "DateObjectQ[expr] gives True if expr is a \
DateObject with valid arguments, and False otherwise."|>, 
 <|"label" -> "DateOverlapsQ", "type" -> "keyword", 
  "info" -> "DateOverlapsQ[date , date ] returns True if the calendar dates \
date  and date  overlap, and False ot"|>, <|"label" -> "DatePattern", 
  "type" -> "keyword", "info" -> "DatePattern[{\"e \", \"e \", \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents the \
characters of a date with elements of type \"e \" in Strin"|>, 
 <|"label" -> "DatePlus", "type" -> "keyword", "info" -> "DatePlus[date, n] \
gives the date n days after date.DatePlus[date, {n, step}] gives the date n \
calend"|>, <|"label" -> "DateRange", "type" -> "keyword", 
  "info" -> "DateRange[date , date ] gives all dates in the range from date  \
to date .DateRange[date , date , inc"|>, <|"label" -> "DateReduction", 
  "type" -> "keyword", "info" -> "DateReduction is an option for \
DateHistogram that specifies the length for cyclic periods of time."|>, 
 <|"label" -> "DateScale", "type" -> "keyword", 
  "info" -> "DateScale[] represents the canonical mapping of continuous dates \
and times to a quantitative scale."|>, <|"label" -> "DateSelect", 
  "type" -> "keyword", "info" -> "DateSelect[list, crit] picks out all dates \
date  of a list for which crit[date ] is True.DateSelect["|>, 
 <|"label" -> "DateString", "type" -> "keyword", 
  "info" -> "DateString[] gives a string representing the complete current \
local date and time. DateString[date] "|>, <|"label" -> "DateTicksFormat", 
  "type" -> "keyword", "info" -> "DateTicksFormat is an option for \
DateListPlot which specifies how date tick labels should be formatt"|>, 
 <|"label" -> "DateValue", "type" -> "keyword", 
  "info" -> "DateValue[\"elem\"] gives the specified element of the current \
date and time.DateValue[{elem , elem , "|>, <|"label" -> "DateWithinQ", 
  "type" -> "keyword", "info" -> "DateWithinQ[date , date ] returns True if \
the calendar date date  is entirely contained within date "|>, 
 <|"label" -> "DaubechiesWavelet", "type" -> "keyword", 
  "info" -> "DaubechiesWavelet[] represents a Daubechies wavelet of order 2. \
DaubechiesWavelet[n] represents a Da"|>, <|"label" -> "DavisDistribution", 
  "type" -> "keyword", "info" -> "DavisDistribution[b, n, \
\[CapitalATilde]\216\[CapitalAHat]\274] represents a Davis distribution with \
scale parameter b, shape parameter n"|>, <|"label" -> "DawsonF", 
  "type" -> "keyword", "info" -> 
   "DawsonF[z] gives the Dawson integral F(z)."|>, 
 <|"label" -> "DayCount", "type" -> "keyword", "info" -> "DayCount[date , \
date ] gives the number of days from date  to date .DayCount[date , date , \
daytype] "|>, <|"label" -> "DayCountConvention", "type" -> "keyword", 
  "info" -> "DayCountConvention is an option that specifies the day count \
convention used by DateDifference."|>, <|"label" -> "DayHemisphere", 
  "type" -> "keyword", "info" -> "DayHemisphere[] is a two-dimensional \
GeoGraphics primitive that represents the half of the Earth tha"|>, 
 <|"label" -> "DaylightQ", "type" -> "keyword", 
  "info" -> "DaylightQ[] gives True if it is currently daylight from the \
user's location.DaylightQ[datespec] give"|>, <|"label" -> "DayMatchQ", 
  "type" -> "keyword", "info" -> "DayMatchQ[date, daytype] returns True if \
the date matches the daytype specification and returns Fals"|>, 
 <|"label" -> "DayName", "type" -> "keyword", "info" -> "DayName[] gives the \
current day of the week.DayName[date] gives the day of the week for the given \
da"|>, <|"label" -> "DayNightTerminator", "type" -> "keyword", 
  "info" -> "DayNightTerminator[] is a one-dimensional GeoGraphics primitive \
that represents the separation line "|>, <|"label" -> "DayPlus", 
  "type" -> "keyword", "info" -> "DayPlus[date, n] gives the date n days away \
from date.DayPlus[date, n, daytype] gives the date that "|>, 
 <|"label" -> "DayRange", "type" -> "keyword", "info" -> "DayRange[date , \
date ] gives the dates in the range from date  to date .DayRange[date , date \
, dayty"|>, <|"label" -> "DayRound", "type" -> "keyword", 
  "info" -> "DayRound[date, daytype] rounds date to the nearest day of \
daytype, using the next-day rounding conve"|>, 
 <|"label" -> "DeBruijnGraph", "type" -> "keyword", 
  "info" -> "DeBruijnGraph[m, n] gives the n-dimensional De Bruijn graph with \
m symbols.DeBruijnGraph[m, n, type]"|>, <|"label" -> "DeBruijnSequence", 
  "type" -> "keyword", "info" -> "DeBruijnSequence[list, n] gives a de Bruijn \
sequence on the elements in list taken n at a time.DeBru"|>, 
 <|"label" -> "Decapitalize", "type" -> "keyword", 
  "info" -> "Decapitalize[string] yields a string in which the first \
character has been made lowercase."|>, <|"label" -> "DecimalForm", 
  "type" -> "keyword", "info" -> "DecimalForm[expr] prints with approximate \
real numbers in expr always given in decimal form, without"|>, 
 <|"label" -> "DeclarePackage", "type" -> "keyword", 
  "info" -> "DeclarePackage[\"context`\", {\"name \", \"name \", \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] declares that \
Needs[\"context`\"] should automatical"|>, <|"label" -> "Decompose", 
  "type" -> "keyword", "info" -> "Decompose[poly, x] decomposes a polynomial, \
if possible, into a composition of simpler polynomials. "|>, 
 <|"label" -> "DeconvolutionLayer", "type" -> "keyword", 
  "info" -> "DeconvolutionLayer[n, sz] represents a trainable deconvolutional \
net layer having n output channels "|>, <|"label" -> "Decrement", 
  "type" -> "keyword", "info" -> 
   "x -- decreases the value of x by 1, returning the old value of x. "|>, 
 <|"label" -> "Decrypt", "type" -> "keyword", "info" -> "Decrypt[\"password\"\
, enc] attempts to decrypt the encrypted object enc using the specified \
password.D"|>, <|"label" -> "DecryptFile", "type" -> "keyword", 
  "info" -> "DecryptFile[\"password\", file] generates a decrypted version of \
a file, using the specified password."|>, <|"label" -> "DedekindEta", 
  "type" -> "keyword", "info" -> "DedekindEta[\[CapitalATilde]\217\
\[CapitalAHat]\204] gives the Dedekind eta modular elliptic function \
\[CapitalATilde]\216\\[CenterDot](\[CapitalATilde]\217\[CapitalAHat]\204)."|>\
, <|"label" -> "DeepSpaceProbeData", "type" -> "keyword", 
  "info" -> "DeepSpaceProbeData[entity, property] gives the value of the \
specified property for the deep space pr"|>, <|"label" -> "DefaultAxesStyle", 
  "type" -> "keyword", "info" -> "DefaultAxesStyle is a low-level option for \
graphics functions that specifies the default style to us"|>, 
 <|"label" -> "DefaultColor", "type" -> "keyword", 
  "info" -> "DefaultColor is an option for graphics functions that specifies \
the default color to use for lines, "|>, <|"label" -> "DefaultDuration", 
  "type" -> "keyword", "info" -> "DefaultDuration is an option to Animate and \
related functions that specifies the default total durat"|>, 
 <|"label" -> "DefaultElement", "type" -> "keyword", 
  "info" -> "DefaultElement is an option for Grid and related constructs \
which specifies what to insert when a ne"|>, 
 <|"label" -> "DefaultFaceGridsStyle", "type" -> "keyword", 
  "info" -> "DefaultFaceGridsStyle is a low-level option for 3D graphics \
functions that specifies the default sty"|>, 
 <|"label" -> "DefaultFieldHintStyle", "type" -> "keyword", 
  "info" -> "DefaultFieldHintStyle is a low-level option for InputField that \
specifies the default style to use f"|>, 
 <|"label" -> "DefaultFontProperties", "type" -> "keyword", 
  "info" -> "DefaultFontProperties is a global option that specifies various \
properties of a font family, such as"|>, <|"label" -> "DefaultFrameStyle", 
  "type" -> "keyword", "info" -> "DefaultFrameStyle is a low-level option for \
graphics and related constructs that specifies the defau"|>, 
 <|"label" -> "DefaultFrameTicksStyle", "type" -> "keyword", 
  "info" -> "DefaultFrameTicksStyle is a low-level option for 2D graphics \
functions that specifies the default st"|>, 
 <|"label" -> "DefaultGridLinesStyle", "type" -> "keyword", 
  "info" -> "DefaultGridLinesStyle is a low-level option for 2D graphics \
functions that specifies the default sty"|>, 
 <|"label" -> "DefaultNaturalLanguage", "type" -> "keyword", 
  "info" -> "DefaultNaturalLanguage is an option for character selections \
that specifies the language used when c"|>, <|"label" -> "DefaultOptions", 
  "type" -> "keyword", "info" -> "DefaultOptions is a style option that \
allows default options to be specified for particular formatti"|>, 
 <|"label" -> "DefaultPrintPrecision", "type" -> "keyword", 
  "info" -> "DefaultPrintPrecision is an option for NumberForm, DecimalForm \
and related functions that specifies "|>, 
 <|"label" -> "DefaultStyleDefinitions", "type" -> "keyword", 
  "info" -> "DefaultStyleDefinitions is a global option that specifies the \
default stylesheet for all new noteboo"|>, <|"label" -> "DefaultTicksStyle", 
  "type" -> "keyword", "info" -> "DefaultTicksStyle is a low-level option for \
graphics functions that specifies the default style to u"|>, 
 <|"label" -> "DefaultTooltipStyle", "type" -> "keyword", 
  "info" -> "DefaultTooltipStyle is a low-level option for tooltips that \
specifies the default style to use in di"|>, <|"label" -> "DefaultValues", 
  "type" -> "keyword", "info" -> "DefaultValues[f] gives a list of \
transformation rules corresponding to all default argument values ("|>, 
 <|"label" -> "Defer", "type" -> "keyword", "info" -> "Defer[expr] yields an \
object that displays as the unevaluated form of expr, but that is evaluated \
if"|>, <|"label" -> "DefineInputStreamMethod", "type" -> "keyword", 
  "info" -> "DefineInputStreamMethod[\"name\", {fname  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] function , fname  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] function , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 }] defines a \
custom input"|>, <|"label" -> "DefineOutputStreamMethod", 
  "type" -> "keyword", "info" -> "DefineOutputStreamMethod[\"name\", {fname  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] function , fname  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] function , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 }] defines a \
custom outp"|>, <|"label" -> "DefineResourceFunction", "type" -> "keyword", 
  "info" -> "DefineResourceFunction[f] defines a resource function that can \
be applied to arguments to give the s"|>, <|"label" -> "Definition", 
  "type" -> "keyword", "info" -> "Definition[symbol] prints as the \
definitions given for a symbol.Definition[\"symbol\"] prints as the d"|>, 
 <|"label" -> "Degree", "type" -> "keyword", "info" -> "                      \
                                                         \
\[CapitalATilde]\217\[CapitalAHat]\200\nDegree gives the nu"|>, 
 <|"label" -> "DegreeCentrality", "type" -> "keyword", 
  "info" -> "DegreeCentrality[g] gives a list of vertex degrees for the \
vertices in the underlying simple graph o"|>, 
 <|"label" -> "DegreeGraphDistribution", "type" -> "keyword", 
  "info" -> "DegreeGraphDistribution[dlist] represents a degree graph \
distribution with vertex degree dlist."|>, <|"label" -> "DEigensystem", 
  "type" -> "keyword", "info" -> "DEigensystem[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\204\[CapitalAHat]\222[u[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]], u, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\216\[CapitalAHat]\[Copyright], n] gives the n smallest \
magnitude eigenvalues and eige"|>, <|"label" -> "DEigenvalues", 
  "type" -> "keyword", "info" -> "DEigenvalues[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\204\[CapitalAHat]\222[u[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], u, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\216\[CapitalAHat]\[Copyright], n] gives the n smallest \
magnitude eigenvalues for the l"|>, <|"label" -> "Deinitialization", 
  "type" -> "keyword", "info" -> "Deinitialization is an option for Dynamic, \
DynamicModule, Manipulate, and related constructs that sp"|>, 
 <|"label" -> "Del", "type" -> "keyword", "info" -> "Del[x] displays as \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\207 x."|>, 
 <|"label" -> "DelaunayMesh", "type" -> "keyword", 
  "info" -> "DelaunayMesh[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
MeshRegion representing the Delaunay mesh from the points p , p , "|>, 
 <|"label" -> "Delayed", "type" -> "keyword", "info" -> "Delayed[expr] \
represents an expression whose evaluation is delayed until its value is \
externally req"|>, <|"label" -> "Delete", "type" -> "keyword", 
  "info" -> "Delete[expr, n] deletes the element at position n in expr. If n \
is negative, the position is counted"|>, <|"label" -> "DeleteAnomalies", 
  "type" -> "keyword", "info" -> "DeleteAnomalies[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a list in \
which example  that are considered anomalou"|>, 
 <|"label" -> "DeleteBorderComponents", "type" -> "keyword", 
  "info" -> "DeleteBorderComponents[image] replaces connected components \
adjacent to the border in a binary image"|>, <|"label" -> "DeleteCases", 
  "type" -> "keyword", "info" -> "DeleteCases[expr, pattern] removes all \
elements of expr that match pattern. DeleteCases[expr, patter"|>, 
 <|"label" -> "DeleteChannel", "type" -> "keyword", 
  "info" -> "DeleteChannel[channel] deletes the specified channel from the \
channel broker server.DeleteChannel[{c"|>, <|"label" -> "DeleteContents", 
  "type" -> "keyword", "info" -> "DeleteContents is an option for \
DeleteDirectory that specifies whether the contents of directories s"|>, 
 <|"label" -> "DeleteDirectory", "type" -> "keyword", 
  "info" -> "DeleteDirectory[\"dir\"] deletes the specified directory. "|>, 
 <|"label" -> "DeleteDuplicates", "type" -> "keyword", 
  "info" -> "DeleteDuplicates[list] deletes all duplicates from \
list.DeleteDuplicates[list, test] applies test to"|>, 
 <|"label" -> "DeleteDuplicatesBy", "type" -> "keyword", 
  "info" -> "DeleteDuplicatesBy[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] deletes \
those e  that yield duplicates in the list {f[e ], f[e ],"|>, 
 <|"label" -> "DeleteFile", "type" -> "keyword", 
  "info" -> "DeleteFile[\"file\"] deletes a file. DeleteFile[{\"file \", \
\"file \", \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
deletes a list of files. \n     "|>, <|"label" -> "DeleteMissing", 
  "type" -> "keyword", "info" -> "DeleteMissing[list] drops elements with \
head Missing from a list.DeleteMissing[assoc] drops elements"|>, 
 <|"label" -> "DeleteObject", "type" -> "keyword", 
  "info" -> "DeleteObject[obj] deletes the object obj.DeleteObject[{obj , obj \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] deletes all \
the obj .\n       "|>, <|"label" -> "DeletePermissionsKey", 
  "type" -> "keyword", "info" -> "DeletePermissionsKey[key] deletes a \
permissions key, rendering it invalid.DeletePermissionsKey[{key "|>, 
 <|"label" -> "DeleteSearchIndex", "type" -> "keyword", 
  "info" -> "DeleteSearchIndex[obj] deletes the search index represented by \
the search index object obj.DeleteSea"|>, 
 <|"label" -> "DeleteSmallComponents", "type" -> "keyword", 
  "info" -> "DeleteSmallComponents[image] replaces small connected components \
in a binary image image with backgr"|>, <|"label" -> "DeleteStopwords", 
  "type" -> "keyword", "info" -> "DeleteStopwords[list] deletes stopwords \
from a list of words.DeleteStopwords[\"string\"] deletes stopw"|>, 
 <|"label" -> "DelimitedSequence", "type" -> "keyword", 
  "info" -> "DelimitedSequence[form] represents a delimited sequence of \
elements of the specified form in Interpr"|>, 
 <|"label" -> "Delimiter", "type" -> "keyword", 
  "info" -> "Delimiter represents a delimiter to be displayed in objects such \
as PopupMenu, Manipulate, and FormO"|>, <|"label" -> "DelimiterMatching", 
  "type" -> "keyword", "info" -> "DelimiterMatching is an option for \
selections that specifies whether an opening delimiter will match"|>, 
 <|"label" -> "Delimiters", "type" -> "keyword", 
  "info" -> "Delimiters is an option to various functions that specifies what \
delimiters to use or look for."|>, <|"label" -> "DeliveryFunction", 
  "type" -> "keyword", "info" -> "DeliveryFunction is an option that \
specifies how material such as documents generated by DocumentGen"|>, 
 <|"label" -> "Dendrogram", "type" -> "keyword", 
  "info" -> "Dendrogram[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] constructs a \
dendrogram from the hierarchical clustering of the elements e ,"|>, 
 <|"label" -> "Denominator", "type" -> "keyword", 
  "info" -> "Denominator[expr] gives the denominator of expr. "|>, 
 <|"label" -> "DensityGraphics", "type" -> "keyword", 
  "info" -> 
   "DensityGraphics[array] is a representation of a density plot. "|>, 
 <|"label" -> "DensityHistogram", "type" -> "keyword", 
  "info" -> "DensityHistogram[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a density \
histogram of the values {x , y }.DensityHi"|>, 
 <|"label" -> "DensityPlot", "type" -> "keyword", 
  "info" -> "DensityPlot[f, {x, x   , x   }, {y, y   , y   }] makes a density \
plot of f as a function of x and y."|>, <|"label" -> "DensityPlot3D", 
  "type" -> "keyword", "info" -> "DensityPlot3D[f, {x, x   , x   }, {y, y   , \
y   }, {z, z   , z   }] makes a density plot of f as a f"|>, 
 <|"label" -> "DependentVariables", "type" -> "keyword", 
  "info" -> "DependentVariables is an option for NDSolve and other functions \
that specifies the list of all objec"|>, <|"label" -> "Depth", 
  "type" -> "keyword", "info" -> "Depth[expr] gives the maximum number of \
indices needed to specify any part of expr, plus 1. "|>, 
 <|"label" -> "DepthFirstScan", "type" -> "keyword", 
  "info" -> "DepthFirstScan[g, s, {event  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f , event  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] performs a \
depth-first scan of the graph g start"|>, <|"label" -> "Derivative", 
  "type" -> "keyword", "info" -> "f ' represents the derivative of a function \
f of one argument. Derivative[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246][f] is the gener"\
|>, <|"label" -> "DerivativeFilter", "type" -> "keyword", 
  "info" -> "                                                    \
th\nDerivativeFilter[data, {n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] computes "|>, 
 <|"label" -> "DerivativePDETerm", "type" -> "keyword", 
  "info" -> "DerivativePDETerm[vars, \[CapitalATilde]\216b3] represents a \
load derivative term \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\207            \
\[CapitalATilde]\202\\[CenterDot] (\[CapitalATilde]\216b3) with load \
derivative"|>, <|"label" -> "DerivedKey", "type" -> "keyword", 
  "info" -> "DerivedKey[assoc] represents a derived key generated by \
GenerateDerivedKey."|>, <|"label" -> "DescriptorStateSpace", 
  "type" -> "keyword", "info" -> "DescriptorStateSpace is an option to \
StateSpaceModel and StateSpaceTransform that specifies whether "|>, 
 <|"label" -> "DesignMatrix", "type" -> "keyword", 
  "info" -> "DesignMatrix[{{x  , x  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }, {x  , x  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] constructs the \
des"|>, <|"label" -> "Det", "type" -> "keyword", 
  "info" -> "Det[m] gives the determinant of the square matrix m. "|>, 
 <|"label" -> "DeviceClose", "type" -> "keyword", 
  "info" -> "DeviceClose[device] closes the connection to a device and frees \
related resources."|>, <|"label" -> "DeviceConfigure", "type" -> "keyword", 
  "info" -> "DeviceConfigure[device, config] configures the specified device \
according to config."|>, <|"label" -> "DeviceExecute", "type" -> "keyword", 
  "info" -> "DeviceExecute[device, \"command\"] executes the specified \
command on a device.DeviceExecute[device, \"c"|>, 
 <|"label" -> "DeviceExecuteAsynchronous", "type" -> "keyword", 
  "info" -> "DeviceExecuteAsynchronous[device, \"command\", fun] initiates \
asynchronous execution of the specified "|>, <|"label" -> "DeviceObject", 
  "type" -> "keyword", "info" -> "DeviceObject[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents a device that can be \
accessed in a Wolfram Language session."|>, <|"label" -> "DeviceOpen", 
  "type" -> "keyword", "info" -> "DeviceOpen[\"devclass\"] opens a connection \
to the first available device in the class specified by \"d"|>, 
 <|"label" -> "DeviceRead", "type" -> "keyword", 
  "info" -> "DeviceRead[devobj] reads a single default item from the open \
device corresponding to the specified D"|>, <|"label" -> "DeviceReadBuffer", 
  "type" -> "keyword", "info" -> "DeviceReadBuffer[device] reads the complete \
contents of the buffer on a device.DeviceReadBuffer[devi"|>, 
 <|"label" -> "DeviceReadLatest", "type" -> "keyword", 
  "info" -> "DeviceReadLatest[device] returns the most recently collected \
default item from a device.DeviceReadLa"|>, <|"label" -> "DeviceReadList", 
  "type" -> "keyword", "info" -> "DeviceReadList[device, n] reads from the \
specified device n times, returning a list of the results.D"|>, 
 <|"label" -> "DeviceReadTimeSeries", "type" -> "keyword", 
  "info" -> "DeviceReadTimeSeries[device, {t, dt}] repeatedly reads default \
items from the specified device at in"|>, <|"label" -> "Devices", 
  "type" -> "keyword", "info" -> "Devices[] gives a list of registered \
devices on a particular system.Devices[form] gives a list of de"|>, 
 <|"label" -> "DeviceStreams", "type" -> "keyword", 
  "info" -> "DeviceStreams[device] gives a list of all open streams \
associated with a device.DeviceStreams[device"|>, 
 <|"label" -> "DeviceWrite", "type" -> "keyword", 
  "info" -> "DeviceWrite[device, val] writes the value val to the specified \
device.DeviceWrite[device, {val , val"|>, <|"label" -> "DeviceWriteBuffer", 
  "type" -> "keyword", "info" -> "DeviceWriteBuffer[device, vals] fills the \
buffer on a device with the values vals.DeviceWriteBuffer["|>, 
 <|"label" -> "DGaussianWavelet", "type" -> "keyword", 
  "info" -> "DGaussianWavelet[] represents a derivative of Gaussian wavelet \
of derivative order 2.DGaussianWavele"|>, 
 <|"label" -> "DiagonalizableMatrixQ", "type" -> "keyword", 
  "info" -> "DiagonalizableMatrixQ[m] gives True if m is diagonalizable, and \
False otherwise. "|>, <|"label" -> "Dialog", "type" -> "keyword", 
  "info" -> "Dialog[] initiates a dialog. Dialog[expr] initiates a dialog \
with expr as the current value of %. \n"|>, <|"label" -> "Diamond", 
  "type" -> "keyword", "info" -> "Diamond[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\204 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\204 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DiceDissimilarity", "type" -> "keyword", 
  "info" -> "DiceDissimilarity[x, y] gives the Dice dissimilarity between \
Boolean vectors x and y."|>, <|"label" -> "DictionaryLookup", 
  "type" -> "keyword", "info" -> "DictionaryLookup[patt] finds all words in \
an English dictionary that match the string pattern patt.D"|>, 
 <|"label" -> "DictionaryWordQ", "type" -> "keyword", 
  "info" -> "DictionaryWordQ[\"word\"] tests whether \"word\" is a recognized \
dictionary word."|>, <|"label" -> "DifferenceQuotient", "type" -> "keyword", 
  "info" -> "DifferenceQuotient[f, {x, h}]  gives the difference quotient \
(f(x + h) - f(x))/h.DifferenceQuotient["|>, <|"label" -> "DifferenceRoot", 
  "type" -> "keyword", "info" -> "DifferenceRoot[lde][k] gives the holonomic \
sequence h(k), specified by the linear difference equatio"|>, 
 <|"label" -> "DifferenceRootReduce", "type" -> "keyword", 
  "info" -> "DifferenceRootReduce[expr, n] attempts to reduce expr to a \
single DifferenceRoot object as a functio"|>, <|"label" -> "DifferentialD", 
  "type" -> "keyword", "info" -> "DifferentialD[x] displays as \
\[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\214 x."|>, 
 <|"label" -> "DifferentialRoot", "type" -> "keyword", 
  "info" -> "DifferentialRoot[lde][x] gives the holonomic function h(x), \
specified by the linear differential equ"|>, 
 <|"label" -> "DifferentialRootReduce", "type" -> "keyword", 
  "info" -> "DifferentialRootReduce[expr, x] attempts to reduce expr to a \
single DifferentialRoot object as a fun"|>, 
 <|"label" -> "DifferentiatorFilter", "type" -> "keyword", 
  "info" -> "DifferentiatorFilter[data, \
\[CapitalATilde]\217\[CapitalAHat]\211 ] applies a differentiator filter with \
a cutoff frequency \[CapitalATilde]\217\[CapitalAHat]\211  to an arra"|>, 
 <|"label" -> "DiffusionPDETerm", "type" -> "keyword", 
  "info" -> "DiffusionPDETerm[vars] represents a diffusion term \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\207            \
\[CapitalATilde]\202\\[CenterDot] \
(-\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\207            u) \
with model varia"|>, <|"label" -> "DigitalSignature", "type" -> "keyword", 
  "info" -> 
   "DigitalSignature[assoc] represents a digital signature object."|>, 
 <|"label" -> "DigitBlock", "type" -> "keyword", 
  "info" -> "DigitBlock is an option for NumberForm and related functions \
that specifies the maximum length of bl"|>, <|"label" -> "DigitCharacter", 
  "type" -> "keyword", "info" -> "DigitCharacter represents a digit character \
0\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\2239 in \
StringExpression. "|>, <|"label" -> "DigitCount", "type" -> "keyword", 
  "info" -> "DigitCount[n, b, d] gives the number of d digits in the base-b \
representation of n. DigitCount[n, b]"|>, <|"label" -> "DigitQ", 
  "type" -> "keyword", "info" -> "DigitQ[string] yields True if all the \
characters in the string are digits in the range 0 through 9, "|>, 
 <|"label" -> "DihedralAngle", "type" -> "keyword", 
  "info" -> "DihedralAngle[{p , p }, {v, w}] gives the angle between two \
half-planes bounded by the line through "|>, <|"label" -> "DihedralGroup", 
  "type" -> "keyword", "info" -> 
   "DihedralGroup[n] represents the dihedral group of order 2n."|>, 
 <|"label" -> "Dilation", "type" -> "keyword", "info" -> "Dilation[image, \
ker] gives the morphological dilation of image with respect to the \
structuring eleme"|>, <|"label" -> "DimensionalCombinations", 
  "type" -> "keyword", "info" -> "DimensionalCombinations[{pq , pq , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] returns the \
possible combinations of the list of physical qua"|>, 
 <|"label" -> "DimensionalMeshComponents", "type" -> "keyword", 
  "info" -> "DimensionalMeshComponents[mr] gives a list {r , r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} of regions such \
that r  has dimension d for a"|>, <|"label" -> "DimensionReduce", 
  "type" -> "keyword", "info" -> "DimensionReduce[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] projects the \
examples example  to a lower-dimensional appro"|>, 
 <|"label" -> "DimensionReducerFunction", "type" -> "keyword", 
  "info" -> "DimensionReducerFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a function generated by DimensionReduction \
that projects data"|>, <|"label" -> "DimensionReduction", 
  "type" -> "keyword", "info" -> "DimensionReduction[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
DimensionReducerFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] that projects fr"|>, <|"label" -> "Dimensions", 
  "type" -> "keyword", "info" -> "Dimensions[expr] gives a list of the \
dimensions of expr. Dimensions[expr, n] gives a list of the dim"|>, 
 <|"label" -> "DiracComb", "type" -> "keyword", 
  "info" -> "DiracComb[x] represents the Dirac comb function \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\235(x) giving a delta \
function at every integer point."|>, <|"label" -> "DiracDelta", 
  "type" -> "keyword", "info" -> "DiracDelta[x] represents the Dirac delta \
function \[CapitalATilde]\216b4(x). DiracDelta[x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents the \
multidi"|>, <|"label" -> "DirectedEdge", "type" -> "keyword", 
  "info" -> "                                                                 \
                             t\nDire"|>, <|"label" -> "DirectedEdges", 
  "type" -> "keyword", "info" -> "DirectedEdges is an option for Graph, \
GraphPlot, and related functions that specifies whether edges "|>, 
 <|"label" -> "DirectedGraph", "type" -> "keyword", 
  "info" -> "DirectedGraph[g] gives a directed graph from the undirected \
graph g.DirectedGraph[g, conv] gives a d"|>, <|"label" -> "DirectedGraphQ", 
  "type" -> "keyword", "info" -> "DirectedGraphQ[g] yields True if the graph \
g is a directed graph and False otherwise."|>, 
 <|"label" -> "DirectedInfinity", "type" -> "keyword", 
  "info" -> "DirectedInfinity[] represents an infinite numerical quantity \
whose direction in the complex plane is"|>, <|"label" -> "Direction", 
  "type" -> "keyword", "info" -> "Direction is an option for Limit and \
related functions that specifies the direction in which the lim"|>, 
 <|"label" -> "DirectionalLight", "type" -> "keyword", 
  "info" -> "DirectionalLight[col, pt] is a \
three\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223dimensional \
graphics directive that specifies the directional l"|>, 
 <|"label" -> "Directive", "type" -> "keyword", 
  "info" -> "Directive[g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
single graphics directive composed of the directives g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n  "|>, 
 <|"label" -> "Directory", "type" -> "keyword", 
  "info" -> "Directory[] gives the current working directory. "|>, 
 <|"label" -> "DirectoryName", "type" -> "keyword", 
  "info" -> "DirectoryName[\"name\"] extracts the directory name from the \
specification for a file. "|>, <|"label" -> "DirectoryQ", 
  "type" -> "keyword", "info" -> "DirectoryQ[\"name\"] gives True if the \
directory with the specified name exists, and gives False other"|>, 
 <|"label" -> "DirectoryStack", "type" -> "keyword", 
  "info" -> "DirectoryStack[] gives the directory stack that represents the \
sequence of current directories used."|>, <|"label" -> "DirichletBeta", 
  "type" -> "keyword", "info" -> "DirichletBeta[s] gives the Dirichlet beta \
function \[CapitalATilde]\216b2(s)."|>, <|"label" -> "DirichletCharacter", 
  "type" -> "keyword", "info" -> "DirichletCharacter[k, j, n] gives the \
Dirichlet character \[CapitalATilde]\217\[CapitalAHat]\207    (n) with \
modulus k and index j.\n     "|>, <|"label" -> "DirichletCondition", 
  "type" -> "keyword", "info" -> "DirichletCondition[beqn, pred] represents a \
Dirichlet boundary condition given by equation beqn, sat"|>, 
 <|"label" -> "DirichletConvolve", "type" -> "keyword", 
  "info" -> "DirichletConvolve[f, g, n, m] gives the Dirichlet convolution of \
the expressions f and g. "|>, <|"label" -> "DirichletDistribution", 
  "type" -> "keyword", "info" -> "DirichletDistribution[{\[CapitalATilde]\
\216\\[PlusMinus] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus]     }] represents a Dirichlet distribution \
of dimension k with shape"|>, <|"label" -> "DirichletEta", 
  "type" -> "keyword", "info" -> "DirichletEta[s] gives the Dirichlet eta \
function \[CapitalATilde]\216\\[CenterDot](s)."|>, 
 <|"label" -> "DirichletL", "type" -> "keyword", 
  "info" -> "DirichletL[k, j, s] gives the Dirichlet L-function \
L(\[CapitalATilde]\217\[CapitalAHat]\207, s) for the Dirichlet character \
\[CapitalATilde]\217\[CapitalAHat]\207(n) with mod"|>, 
 <|"label" -> "DirichletLambda", "type" -> "keyword", 
  "info" -> "DirichletLambda[s] gives the Dirichlet lambda function \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet](s)."|>, 
 <|"label" -> "DirichletTransform", "type" -> "keyword", 
  "info" -> "DirichletTransform[expr, n, s] gives the Dirichlet transform of \
expr with respect to n."|>, <|"label" -> "DirichletWindow", 
  "type" -> "keyword", "info" -> 
   "DirichletWindow[x] represents a Dirichlet window function of x."|>, 
 <|"label" -> "DiscreteAsymptotic", "type" -> "keyword", 
  "info" -> "DiscreteAsymptotic[expr, n \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\236] gives an \
asymptotic approximation for expr as n tends to infinity ov"|>, 
 <|"label" -> "DiscreteChirpZTransform", "type" -> "keyword", 
  "info" -> "DiscreteChirpZTransform[list] gives the chirp Z transform of \
list.DiscreteChirpZTransform[list, n] r"|>, <|"label" -> "DiscreteConvolve", 
  "type" -> "keyword", "info" -> "DiscreteConvolve[f, g, n, m] gives the \
convolution with respect to n of the expressions f and g. Dis"|>, 
 <|"label" -> "DiscreteDelta", "type" -> "keyword", 
  "info" -> "DiscreteDelta[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
discrete delta function \[CapitalATilde]\216b4 (n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246), equal to 1 if \
all the n  a"|>, <|"label" -> "DiscreteHadamardTransform", 
  "type" -> "keyword", "info" -> "DiscreteHadamardTransform[list] gives the \
discrete Hadamard transform of list."|>, <|"label" -> "DiscreteIndicator", 
  "type" -> "keyword", "info" -> "DiscreteIndicator[x, x , {u , u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields the \
discrete indicator function, equal to 1 if x = x  a"|>, 
 <|"label" -> "DiscreteLQEstimatorGains", "type" -> "keyword", 
  "info" -> "DiscreteLQEstimatorGains[ssm, {w, v}, \
\[CapitalATilde]\217\[CapitalAHat]\204] gives the optimal discrete-time \
estimator gain matrix with "|>, <|"label" -> "DiscreteLQRegulatorGains", 
  "type" -> "keyword", "info" -> "DiscreteLQRegulatorGains[sspec, wts, \
\[CapitalATilde]\217\[CapitalAHat]\204] gives the discrete-time state \
feedback gains with sampling p"|>, <|"label" -> "DiscreteLyapunovSolve", 
  "type" -> "keyword", "info" -> "DiscreteLyapunovSolve[a, c] finds the \
numeric solution x of the discrete matrix equation a . x . a \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\211"|>, 
 <|"label" -> "DiscreteMarkovProcess", "type" -> "keyword", 
  "info" -> "DiscreteMarkovProcess[i , m] represents a discrete-time, \
finite-state Markov process with transition"|>, 
 <|"label" -> "DiscretePlot", "type" -> "keyword", 
  "info" -> "DiscretePlot[expr, {n, n   }] generates a plot of the values of \
expr when n runs from 1 to n   .Disc"|>, <|"label" -> "DiscretePlot3D", 
  "type" -> "keyword", "info" -> "DiscretePlot3D[expr, {i, i   , i   }, {j, j \
  , j   }] generates a plot of the values of expr when i"|>, 
 <|"label" -> "DiscreteRatio", "type" -> "keyword", 
  "info" -> "                                             f(i + \
1)\nDiscreteRatio[f, i] gives the discrete ratio -"|>, 
 <|"label" -> "DiscreteTimeModelQ", "type" -> "keyword", 
  "info" -> "DiscreteTimeModelQ[lsys] gives True if lsys is a discrete-time \
systems model, and False otherwise."|>, 
 <|"label" -> "DiscreteUniformDistribution", "type" -> "keyword", 
  "info" -> "DiscreteUniformDistribution[{i   , i   }] represents a discrete \
uniform distribution over the intege"|>, <|"label" -> "DiscreteVariables", 
  "type" -> "keyword", "info" -> "DiscreteVariables is an option for NDSolve \
and other functions that specifies variables that only ch"|>, 
 <|"label" -> "DiscreteWaveletData", "type" -> "keyword", 
  "info" -> "DiscreteWaveletData[{wind  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] coef , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, wave, wtrans] \
yields a discrete wavelet data object with wav"|>, 
 <|"label" -> "DiscreteWaveletPacketTransform", "type" -> "keyword", 
  "info" -> "DiscreteWaveletPacketTransform[data] gives the discrete wavelet \
packet transform (DWPT) of an array "|>, 
 <|"label" -> "DiscreteWaveletTransform", "type" -> "keyword", 
  "info" -> "DiscreteWaveletTransform[data] gives the discrete wavelet \
transform (DWT) of an array of data.Discre"|>, 
 <|"label" -> "DiscretizeGraphics", "type" -> "keyword", 
  "info" -> "DiscretizeGraphics[g] discretizes a 2D or 3D graphic g into a \
MeshRegion.DiscretizeGraphics[g, patt]"|>, <|"label" -> "DiscretizeRegion", 
  "type" -> "keyword", "info" -> "DiscretizeRegion[reg] discretizes a region \
reg into a MeshRegion.DiscretizeRegion[reg, {{x   , x   }"|>, 
 <|"label" -> "Discriminant", "type" -> "keyword", 
  "info" -> "Discriminant[poly, var] computes the discriminant of the \
polynomial poly with respect to the variabl"|>, 
 <|"label" -> "DisjointQ", "type" -> "keyword", 
  "info" -> "DisjointQ[list , list ] yields True if list  and list  do not \
share any common elements, and False o"|>, <|"label" -> "Disjunction", 
  "type" -> "keyword", "info" -> "Disjunction[expr, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
disjunction of expr over all choices of the Boolean variabl"|>, 
 <|"label" -> "Disk", "type" -> "keyword", "info" -> "Disk[{x, y}, r] \
represents a disk of radius r centered at {x, y}.Disk[{x, y}] gives a disk of \
radius"|>, <|"label" -> "DiskSegment", "type" -> "keyword", 
  "info" -> "DiskSegment[{x, y}, r, \
{\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] , \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] }] represents the disk segment \
from angle \[CapitalATilde]\216\[CapitalAHat]\[Cedilla]  to \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]  in a disk centered "|>, 
 <|"label" -> "Dispatch", "type" -> "keyword", "info" -> "Dispatch[{lhs  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] rhs , lhs  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] rhs , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates an \
optimized dispatch table representation of a li"|>, 
 <|"label" -> "DispersionEstimatorFunction", "type" -> "keyword", 
  "info" -> "DispersionEstimatorFunction is an option for generalized linear \
model fitting functions that specifi"|>, <|"label" -> "Display", 
  "type" -> "keyword", "info" -> "Display[channel, graphics] writes graphics \
or sound to the specified output channel in PostScript fo"|>, 
 <|"label" -> "DisplayAllSteps", "type" -> "keyword", 
  "info" -> "DisplayAllSteps is an option to Animate and related functions \
that specifies whether all frames shou"|>, <|"label" -> "DisplayEndPacket", 
  "type" -> "keyword", "info" -> "DisplayEndPacket[] is a WSTP packet that \
indicates the end of a series of expressions relating to a "|>, 
 <|"label" -> "DisplayFunction", "type" -> "keyword", 
  "info" -> "DisplayFunction is an option for graphics and sound functions \
that specifies a function to apply to "|>, <|"label" -> "DisplayPacket", 
  "type" -> "keyword", "info" -> "DisplayPacket[] is a WSTP packet that \
indicates the beginning of a series of expressions related to "|>, 
 <|"label" -> "DisplayString", "type" -> "keyword", 
  "info" -> "DisplayString[graphics] generates a string giving graphics or \
sound in PostScript format. DisplayStr"|>, <|"label" -> "DistanceFunction", 
  "type" -> "keyword", "info" -> "DistanceFunction is an option for functions \
such as Nearest that specifies the distance value to ass"|>, 
 <|"label" -> "DistanceMatrix", "type" -> "keyword", 
  "info" -> "DistanceMatrix[{u , u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
matrix of distances between each pair of elements u , u . Dist"|>, 
 <|"label" -> "DistanceTransform", "type" -> "keyword", 
  "info" -> "DistanceTransform[image] gives the distance transform of image, \
in which the value of each pixel is "|>, <|"label" -> "Distribute", 
  "type" -> "keyword", "info" -> "Distribute[f[x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]] distributes f \
over Plus appearing in any of the x . Distribute[expr, g] dis"|>, 
 <|"label" -> "Distributed", "type" -> "keyword", 
  "info" -> "Distributed[x, dist] or x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist asserts that \
the random variable x is distributed according to the "|>, 
 <|"label" -> "DistributedContexts", "type" -> "keyword", 
  "info" -> "DistributedContexts is an option for various parallel computing \
functions that specifies which defin"|>, 
 <|"label" -> "DistributeDefinitions", "type" -> "keyword", 
  "info" -> "DistributeDefinitions[s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] distributes all \
definitions for the symbols s  to all parallel kern"|>, 
 <|"label" -> "DistributionChart", "type" -> "keyword", 
  "info" -> "DistributionChart[{data , data , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a \
distribution chart with a distribution symbol for each "|>, 
 <|"label" -> "DistributionFitTest", "type" -> "keyword", 
  "info" -> "DistributionFitTest[data] tests whether data is normally \
distributed. DistributionFitTest[data, dist"|>, 
 <|"label" -> "DistributionParameterAssumptions", "type" -> "keyword", 
  "info" -> "DistributionParameterAssumptions[dist] gives a logical \
expression for assumptions on parameters in t"|>, 
 <|"label" -> "DistributionParameterQ", "type" -> "keyword", 
  "info" -> "DistributionParameterQ[dist] yields True if dist is a valid \
distribution, and yields False otherwise"|>, <|"label" -> "Dithering", 
  "type" -> "keyword", "info" -> "Dithering is an option for ColorQuantize \
that specifies whether or not to apply dithering while quan"|>, 
 <|"label" -> "Div", "type" -> "keyword", "info" -> "Div[{f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f }, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] gives the \
divergence \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 f \
/\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 x  + \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 + \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 f \
/\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 x .Div[{f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f }, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "Divide", "type" -> "keyword", 
  "info" -> "x/y or Divide[x, y] is equivalent to x y^-1. "|>, 
 <|"label" -> "DivideBy", "type" -> "keyword", 
  "info" -> "x/=c divides x by c and returns the new value of x. "|>, 
 <|"label" -> "Dividers", "type" -> "keyword", "info" -> "Dividers is an \
option for Grid and related constructs that specifies where and how to draw \
divider l"|>, <|"label" -> "DivideSides", "type" -> "keyword", 
  "info" -> "DivideSides[rel, x] divides each side of the equation or \
inequality rel by x.DivideSides[rel , rel ]"|>, 
 <|"label" -> "Divisible", "type" -> "keyword", 
  "info" -> "Divisible[n, m] yields True if n is divisible by m, and yields \
False if it is not. "|>, <|"label" -> "Divisors", "type" -> "keyword", 
  "info" -> "Divisors[n] gives a list of the integers that divide n. "|>, 
 <|"label" -> "DivisorSigma", "type" -> "keyword", 
  "info" -> "DivisorSigma[k, n] gives the divisor function \
\[CapitalATilde]\217\[CapitalAHat]\203 (n). \n                                \
              "|>, <|"label" -> "DivisorSum", "type" -> "keyword", 
  "info" -> "DivisorSum[n, form] represents the sum of form[i] for all i that \
divide n.DivisorSum[n, form, cond] "|>, <|"label" -> "DMSList", 
  "type" -> "keyword", "info" -> "DMSList[\[CapitalATilde]\216\[CapitalAHat]\
\[Cedilla]] converts an angle \[CapitalATilde]\216\[CapitalAHat]\[Cedilla] \
given in decimal degrees to a DMS list {degree, minute, second}.DMSLi"|>, 
 <|"label" -> "DMSString", "type" -> "keyword", 
  "info" -> "DMSString[\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] converts \
an angle \[CapitalATilde]\216\[CapitalAHat]\[Cedilla] given in decimal \
degrees to a degrees-minutes-seconds string.DMSStr"|>, 
 <|"label" -> "Do", "type" -> "keyword", "info" -> "Do[expr, n] evaluates \
expr n times. Do[expr, {i, i   }] evaluates expr with the variable i \
successiv"|>, <|"label" -> "DocumentGenerator", "type" -> "keyword", 
  "info" -> "DocumentGenerator[template, timespec] represents a document \
generator with template template to be e"|>, 
 <|"label" -> "DocumentGeneratorInformation", "type" -> "keyword", 
  "info" -> "DocumentGeneratorInformation[CloudObject] returns information \
about a generator.\nDocumentGeneratorIn"|>, 
 <|"label" -> "DocumentWeightingRules", "type" -> "keyword", 
  "info" -> "DocumentWeightingRules is an option for TextSearch and related \
functions that allows the specificati"|>, <|"label" -> "Dodecahedron", 
  "type" -> "keyword", "info" -> "Dodecahedron[] represents a regular \
dodecahedron centered at the origin with unit edge length.Dodeca"|>, 
 <|"label" -> "DominantColors", "type" -> "keyword", 
  "info" -> "DominantColors[image] returns dominant colors in \
image.DominantColors[image, n] returns at most n do"|>, 
 <|"label" -> "DominatorTreeGraph", "type" -> "keyword", 
  "info" -> "DominatorTreeGraph[g, v] gives the dominator tree of the \
directed graph g from the root vertex v."|>, 
 <|"label" -> "DominatorVertexList", "type" -> "keyword", 
  "info" -> "DominatorVertexList[g, v] gives the list of immediate dominators \
of the directed graph g from the ro"|>, <|"label" -> "DOSTextFormat", 
  "type" -> "keyword", "info" -> "DOSTextFormat is an option for OpenRead, \
OpenWrite, and OpenAppend that specifies whether files shou"|>, 
 <|"label" -> "Dot", "type" -> "keyword", "info" -> "a . b . c or Dot[a, b, \
c] gives products of vectors, matrices, and tensors. "|>, 
 <|"label" -> "DotDashed", "type" -> "keyword", 
  "info" -> "DotDashed is a graphics directive specifying that lines that \
follow should be drawn dot-dashed."|>, <|"label" -> "DotEqual", 
  "type" -> "keyword", "info" -> "DotEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DotLayer", "type" -> "keyword", 
  "info" -> "DotLayer[] represents a net layer that takes the dot product of \
two or more arrays.DotLayer[{spec , "|>, <|"label" -> "DotPlusLayer", 
  "type" -> "keyword", "info" -> "DotPlusLayer[n] is equivalent to \
LinearLayer[n] and should no longer be used. "|>, 
 <|"label" -> "Dotted", "type" -> "keyword", "info" -> "Dotted is a graphics \
directive specifying that lines that follow should be drawn dotted."|>, 
 <|"label" -> "DoubleBracketingBar", "type" -> "keyword", 
  "info" -> "DoubleBracketingBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\205 x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\206."|>, 
 <|"label" -> "DoubleDownArrow", "type" -> "keyword", 
  "info" -> "DoubleDownArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\223 \
y\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleLeftArrow", "type" -> "keyword", 
  "info" -> "DoubleLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleLeftRightArrow", "type" -> "keyword", 
  "info" -> "DoubleLeftRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\224 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\224 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleLeftTee", "type" -> "keyword", 
  "info" -> "DoubleLeftTee[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[LeftGuillemet]\[CapitalAHat]\
\[Currency] y."|>, <|"label" -> "DoubleLongLeftArrow", "type" -> "keyword", 
  "info" -> "DoubleLongLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\[CapitalAHat]\[Cedilla] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\[CapitalAHat]\[Cedilla] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleLongLeftRightArrow", "type" -> "keyword", 
  "info" -> "DoubleLongLeftRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\[CapitalAHat]\272 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\[CapitalAHat]\272 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleLongRightArrow", "type" -> "keyword", 
  "info" -> "DoubleLongRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\[CapitalAHat]\271 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\[CapitalAHat]\271 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleRightArrow", "type" -> "keyword", 
  "info" -> "DoubleRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\222 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\222 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleRightTee", "type" -> "keyword", 
  "info" -> "DoubleRightTee[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\[DoubleDot] y."|>, 
 <|"label" -> "DoubleUpArrow", "type" -> "keyword", 
  "info" -> "DoubleUpArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\221 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\221 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleUpDownArrow", "type" -> "keyword", 
  "info" -> "DoubleUpDownArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\225 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\225 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoubleVerticalBar", "type" -> "keyword", 
  "info" -> "DoubleVerticalBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\[Yen] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\[Yen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DoublyInfinite", "type" -> "keyword", 
  "info" -> "DoublyInfinite is an option for LerchPhi. With DoublyInfinite -> \
True, the summation is taken from -"|>, <|"label" -> "DownArrow", 
  "type" -> "keyword", "info" -> "DownArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\223 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\223 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownArrowBar", "type" -> "keyword", 
  "info" -> "DownArrowBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Currency]\[CapitalAHat]\223 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Currency]\[CapitalAHat]\223 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownArrowUpArrow", "type" -> "keyword", 
  "info" -> "DownArrowUpArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\\[Micro] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\\[Micro] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownLeftRightVector", "type" -> "keyword", 
  "info" -> "DownLeftRightVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownLeftTeeVector", "type" -> "keyword", 
  "info" -> "DownLeftTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\236 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\236 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownLeftVector", "type" -> "keyword", 
  "info" -> "DownLeftVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\275 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\275 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownLeftVectorBar", "type" -> "keyword", 
  "info" -> "DownLeftVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\226 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\226 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownRightTeeVector", "type" -> "keyword", 
  "info" -> "DownRightTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\237 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\237 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownRightVector", "type" -> "keyword", 
  "info" -> "DownRightVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\201 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\201 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownRightVectorBar", "type" -> "keyword", 
  "info" -> "DownRightVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\227 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\227 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Downsample", "type" -> "keyword", 
  "info" -> "                                                                 \
                   th\nDownsample[ar"|>, <|"label" -> "DownTee", 
  "type" -> "keyword", "info" -> "DownTee[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\[Currency] y."|>, 
 <|"label" -> "DownTeeArrow", "type" -> "keyword", 
  "info" -> "DownTeeArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[Section] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[Section] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "DownValues", "type" -> "keyword", 
  "info" -> "DownValues[f] gives a list of transformation rules corresponding \
to all downvalues (values for \
f[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246])"|>, 
 <|"label" -> "DrazinInverse", "type" -> "keyword", 
  "info" -> "                                                       \
D\nDrazinInverse[m] finds the Drazin generaliz"|>, 
 <|"label" -> "DropoutLayer", "type" -> "keyword", 
  "info" -> "DropoutLayer[] represents a net layer that sets its input \
elements to zero with probability 0.5 duri"|>, 
 <|"label" -> "DSolve", "type" -> "keyword", "info" -> "DSolve[eqn, u, x] \
solves a differential equation for the function u, with independent \
variable\[CapitalATilde]\202\[CapitalAHat] x. DS"|>, 
 <|"label" -> "DSolveValue", "type" -> "keyword", 
  "info" -> "DSolveValue[eqn, expr, x] gives the value of expr determined by \
a symbolic solution to the ordinary "|>, <|"label" -> "DualPlanarGraph", 
  "type" -> "keyword", "info" -> 
   "DualPlanarGraph[g] gives the dual of the planar graph g."|>, 
 <|"label" -> "DualPolyhedron", "type" -> "keyword", 
  "info" -> 
   "DualPolyhedron[poly] gives the dual polyhedron of the polyhedron poly."|>\
, <|"label" -> "DumpGet", "type" -> "keyword", 
  "info" -> "DumpGet[ \"filename\"] reads in a file saved with DumpSave."|>, 
 <|"label" -> "DumpSave", "type" -> "keyword", "info" -> "DumpSave[\"file.mx\
\", symbol] writes definitions associated with a symbol to a file in internal \
Wolfra"|>, <|"label" -> "DuplicateFreeQ", "type" -> "keyword", 
  "info" -> "DuplicateFreeQ[list] gives True if list has no duplicates, and \
False otherwise.DuplicateFreeQ[list, "|>, <|"label" -> "Duration", 
  "type" -> "keyword", "info" -> 
   "Duration[expr] returns the duration of expr."|>, 
 <|"label" -> "E", "type" -> "keyword", "info" -> "E is the exponential \
constant \[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\215 (base of \
natural logarithms), with numerical value \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 2.71828."|>, 
 <|"label" -> "EarthImpactData", "type" -> "keyword", 
  "info" -> "EarthImpactData[entity, property] gives the value of the \
specified property for the earth impact cra"|>, 
 <|"label" -> "EarthquakeData", "type" -> "keyword", 
  "info" -> "EarthquakeData[loc] gives all earthquake properties for the \
location corresponding to loc.Earthquake"|>, 
 <|"label" -> "EccentricityCentrality", "type" -> "keyword", 
  "info" -> "EccentricityCentrality[g] gives a list of eccentricity \
centralities for the vertices in the graph g."|>, 
 <|"label" -> "Echo", "type" -> "keyword", "info" -> "Echo[expr] prints expr \
and returns expr.Echo[expr, label] prints expr prepending label and returns \
e"|>, <|"label" -> "EchoEvaluation", "type" -> "keyword", 
  "info" -> "EchoEvaluation[expr] prints expr before evaluation, then prints \
the result after evaluation and retu"|>, <|"label" -> "EchoFunction", 
  "type" -> "keyword", "info" -> "EchoFunction[f][expr] prints f[expr] and \
returns expr.EchoFunction[label, f][expr] prints f[expr] pr"|>, 
 <|"label" -> "EchoLabel", "type" -> "keyword", 
  "info" -> 
   "EchoLabel[label][expr] prints expr prepending label and returns expr."|>, 
 <|"label" -> "EchoTiming", "type" -> "keyword", 
  "info" -> "EchoTiming[expr] evaluates expr, prints the time in seconds used \
and returns the result of the evalu"|>, <|"label" -> "EclipseType", 
  "type" -> "keyword", "info" -> "EclipseType is an option for SolarEclipse \
and LunarEclipse that specifies the type of eclipse being "|>, 
 <|"label" -> "EdgeAdd", "type" -> "keyword", "info" -> "EdgeAdd[g, e] makes \
a graph by adding the edge e to the graph g.EdgeAdd[g, {e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] adds a colle"|>\
, <|"label" -> "EdgeBetweennessCentrality", "type" -> "keyword", 
  "info" -> "EdgeBetweennessCentrality[g] gives a list of betweenness \
centralities for the edges in the graph g.E"|>, 
 <|"label" -> "EdgeCapacity", "type" -> "keyword", 
  "info" -> "EdgeCapacity is an option and annotation for Graph and related \
functions that specifies an edge capa"|>, <|"label" -> "EdgeChromaticNumber", 
  "type" -> "keyword", "info" -> "EdgeChromaticNumber[g] gives the chromatic \
number for the edges of the graph g."|>, <|"label" -> "EdgeConnectivity", 
  "type" -> "keyword", "info" -> "EdgeConnectivity[g] gives the edge \
connectivity of the graph g.EdgeConnectivity[g, s, t] gives the s"|>, 
 <|"label" -> "EdgeContract", "type" -> "keyword", 
  "info" -> "EdgeContract[g, e] contracts the edge e of the graph \
g.EdgeContract[g, {e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] contracts a \
coll"|>, <|"label" -> "EdgeCost", "type" -> "keyword", 
  "info" -> "EdgeCost is an option and annotation for Graph and related \
functions that specifies an edge cost."|>, <|"label" -> "EdgeCount", 
  "type" -> "keyword", "info" -> "EdgeCount[g] gives a count of the number of \
edges in the graph g.EdgeCount[g, patt] gives a count of"|>, 
 <|"label" -> "EdgeCoverQ", "type" -> "keyword", 
  "info" -> "EdgeCoverQ[g, elist] yields True if the edge list elist is an \
edge cover of the graph g and False ot"|>, <|"label" -> "EdgeCycleMatrix", 
  "type" -> "keyword", "info" -> "EdgeCycleMatrix[g] gives the edge cycle \
matrix of a graph g.EdgeCycleMatrix[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v"|>\
, <|"label" -> "EdgeDelete", "type" -> "keyword", 
  "info" -> "EdgeDelete[g, e] makes a graph by deleting the edge e from the \
graph g.EdgeDelete[g, {e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] de"|>, 
 <|"label" -> "EdgeDetect", "type" -> "keyword", 
  "info" -> "EdgeDetect[image] finds edges in image and returns the result as \
a binary image.EdgeDetect[image, r]"|>, <|"label" -> "EdgeForm", 
  "type" -> "keyword", "info" -> "EdgeForm[g] is a graphics directive that \
specifies that edges of polygons and other filled graphics "|>, 
 <|"label" -> "EdgeIndex", "type" -> "keyword", 
  "info" -> "EdgeIndex[g, e] gives the integer index for the edge e in the \
graph g.EdgeIndex[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] uses "|>, 
 <|"label" -> "EdgeLabeling", "type" -> "keyword", 
  "info" -> "EdgeLabeling is an option for GraphPlot and related functions \
that specifies whether labeling specif"|>, <|"label" -> "EdgeLabels", 
  "type" -> "keyword", "info" -> "EdgeLabels is an option and annotation for \
Graph and related functions that specifies what labels an"|>, 
 <|"label" -> "EdgeLabelStyle", "type" -> "keyword", 
  "info" -> "EdgeLabelStyle is an option and property for Graph and related \
functions that specifies the style to"|>, <|"label" -> "EdgeList", 
  "type" -> "keyword", "info" -> "EdgeList[g] gives the list of edges for the \
graph g.EdgeList[g, patt] gives a list of edges that mat"|>, 
 <|"label" -> "EdgeQ", "type" -> "keyword", "info" -> "EdgeQ[g, e] yields \
True if e is an edge in the graph g and False otherwise."|>, 
 <|"label" -> "EdgeRenderingFunction", "type" -> "keyword", 
  "info" -> "EdgeRenderingFunction is an option for GraphPlot and related \
functions that gives a function to gene"|>, <|"label" -> "EdgeRules", 
  "type" -> "keyword", "info" -> "EdgeRules[g] gives the list of edge rules \
for the graph g.EdgeRules[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w to "|>, 
 <|"label" -> "EdgeShapeFunction", "type" -> "keyword", 
  "info" -> "EdgeShapeFunction is an option and annotation for Graph and \
related functions that specifies a funct"|>, <|"label" -> "EdgeStyle", 
  "type" -> "keyword", "info" -> "EdgeStyle is an option and annotation for \
Graph and related functions that specifies what style to u"|>, 
 <|"label" -> "EdgeTaggedGraph", "type" -> "keyword", 
  "info" -> "EdgeTaggedGraph[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a graph \
with edges e  tagged with unique tags.EdgeTaggedGraph[{e"|>, 
 <|"label" -> "EdgeTaggedGraphQ", "type" -> "keyword", 
  "info" -> "EdgeTaggedGraphQ[g] yields True if the graph g has edges tagged \
and False otherwise."|>, <|"label" -> "EdgeTags", "type" -> "keyword", 
  "info" -> "EdgeTags[g] gives the list of tags for all edges in the graph \
g.EdgeTags[g, {u, v}] gives the list o"|>, 
 <|"label" -> "EdgeTransitiveGraphQ", "type" -> "keyword", 
  "info" -> "EdgeTransitiveGraphQ[g] yields True if the graph g is a \
edge-transitive graph and False otherwise."|>, 
 <|"label" -> "EdgeValueRange", "type" -> "keyword", 
  "info" -> "EdgeValueRange is an option for GeoGraphValuePlot that specifies \
the range of edge values to include"|>, <|"label" -> "EdgeValueSizes", 
  "type" -> "keyword", "info" -> "EdgeValueSizes is an option for \
GeoGraphValuePlot that specifies the thicknesses used to show edge v"|>, 
 <|"label" -> "EdgeWeight", "type" -> "keyword", 
  "info" -> "EdgeWeight is an option and annotation for Graph and related \
functions that specifies an edge weight"|>, 
 <|"label" -> "EdgeWeightedGraphQ", "type" -> "keyword", 
  "info" -> "EdgeWeightedGraphQ[g] yields True if the graph g is an \
edge-weighted graph and False otherwise."|>, <|"label" -> "EditDistance", 
  "type" -> "keyword", "info" -> "EditDistance[u, v] gives the edit or \
Levenshtein distance between strings or vectors u and v.EditDis"|>, 
 <|"label" -> "EffectiveInterest", "type" -> "keyword", 
  "info" -> "EffectiveInterest[r, q] gives the effective interest rate \
corresponding to interest specification r,"|>, 
 <|"label" -> "Eigensystem", "type" -> "keyword", 
  "info" -> "Eigensystem[m] gives a list {values, vectors} of the eigenvalues \
and eigenvectors of the square matr"|>, <|"label" -> "Eigenvalues", 
  "type" -> "keyword", "info" -> "Eigenvalues[m] gives a list of the \
eigenvalues of the square matrix m. Eigenvalues[{m, a}] gives the"|>, 
 <|"label" -> "EigenvectorCentrality", "type" -> "keyword", 
  "info" -> "EigenvectorCentrality[g] gives a list of eigenvector \
centralities for the vertices in the graph g.Ei"|>, 
 <|"label" -> "Eigenvectors", "type" -> "keyword", 
  "info" -> "Eigenvectors[m] gives a list of the eigenvectors of the square \
matrix m. Eigenvectors[{m, a}] gives "|>, <|"label" -> "Element", 
  "type" -> "keyword", "info" -> "Element[x, dom] or x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 dom asserts that \
x is an element of the domain dom. Element[x, reg] or x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 re"|>, 
 <|"label" -> "ElementwiseLayer", "type" -> "keyword", 
  "info" -> "ElementwiseLayer[f] represents a net layer that applies a unary \
function f to every element of the i"|>, <|"label" -> "ElidedForms", 
  "type" -> "keyword", "info" -> "ElidedForms is an option to TextString and \
related functions that specifies which expressions should"|>, 
 <|"label" -> "Eliminate", "type" -> "keyword", 
  "info" -> "Eliminate[eqns, vars] eliminates variables between a set of \
simultaneous equations. "|>, <|"label" -> "Ellipsoid", "type" -> "keyword", 
  "info" -> "Ellipsoid[p, {r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
axis-aligned ellipsoid centered at the point p and with semiaxes"|>, 
 <|"label" -> "EllipticE", "type" -> "keyword", 
  "info" -> "EllipticE[m] gives the complete elliptic integral E(m). \
EllipticE[\[CapitalATilde]\217\[CapitalAHat]\225, m] gives the elliptic \
integral "|>, <|"label" -> "EllipticExp", "type" -> "keyword", 
  "info" -> "EllipticExp[u, {a, b}] is the inverse for EllipticLog. It \
produces a list {x, y} such that u == Elli"|>, 
 <|"label" -> "EllipticExpPrime", "type" -> "keyword", 
  "info" -> "EllipticExpPrime[u, {a, b}] gives the derivative of \
EllipticExp[u, {a, b}] with respect to u."|>, 
 <|"label" -> "EllipticF", "type" -> "keyword", 
  "info" -> "EllipticF[\[CapitalATilde]\217\[CapitalAHat]\225, m] gives the \
elliptic integral of the first kind F(\[CapitalATilde]\217\[CapitalAHat]\225 \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). "|>, 
 <|"label" -> "EllipticFilterModel", "type" -> "keyword", 
  "info" -> "EllipticFilterModel[n] designs a lowpass elliptic filter of \
order n.EllipticFilterModel[{n, \[CapitalATilde]\217\[CapitalAHat]\211 }] \
use"|>, <|"label" -> "EllipticK", "type" -> "keyword", 
  "info" -> "EllipticK[m] gives the complete elliptic integral of the first \
kind K(m). "|>, <|"label" -> "EllipticLog", "type" -> "keyword", 
  "info" -> "                                                                 \
                               2   "|>, <|"label" -> "EllipticNomeQ", 
  "type" -> "keyword", "info" -> "EllipticNomeQ[m] gives the nome q \
corresponding to the parameter m in an elliptic function. "|>, 
 <|"label" -> "EllipticPi", "type" -> "keyword", 
  "info" -> "EllipticPi[n, m] gives the complete elliptic integral of the \
third kind \[CapitalATilde]\216\[CapitalAHat]  (n \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). EllipticPi[n, \
\[CapitalATilde]\217\[CapitalAHat]\225, "|>, 
 <|"label" -> "EllipticReducedHalfPeriods", "type" -> "keyword", 
  "info" -> "EllipticReducedHalfPeriods[{u, v}] gives a reduced pair of half \
periods {w, w '} corresponding to th"|>, <|"label" -> "EllipticTheta", 
  "type" -> "keyword", "info" -> "EllipticTheta[a, u, q] gives the theta \
function \[CapitalATilde]\217\[CapitalAHat]\221 (u, q) (a = 1, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
4).EllipticTheta[a, q] gives the"|>, <|"label" -> "EmbedCode", 
  "type" -> "keyword", "info" -> "EmbedCode[obj] generates the code necessary \
to embed the object obj on a webpage.EmbedCode[obj, \"des"|>, 
 <|"label" -> "EmbeddedHTML", "type" -> "keyword", 
  "info" -> "EmbeddedHTML[\"string\"] is an object that formats as a web \
frame containing the HTML content \"string\""|>, 
 <|"label" -> "EmbeddedService", "type" -> "keyword", 
  "info" -> "EmbeddedService[service] is an object that formats as a web \
frame containing content from the specif"|>, 
 <|"label" -> "EmbeddedSQLEntityClass", "type" -> "keyword", 
  "info" -> "EmbeddedSQLEntityClass[string, props] represents a verbatim SQL \
query to be interpreted as an entity"|>, 
 <|"label" -> "EmbeddedSQLExpression", "type" -> "keyword", 
  "info" -> "EmbeddedSQLExpression[string] represents an SQL expression to be \
evaluated verbatim within an Entity"|>, <|"label" -> "EmbeddingLayer", 
  "type" -> "keyword", "info" -> "EmbeddingLayer[size, n] represents a \
trainable net layer that embeds integers between 1 and n into a"|>, 
 <|"label" -> "EmitSound", "type" -> "keyword", 
  "info" -> "EmitSound[snd] emits the sound snd when evaluated. \
EmitSound[{snd , snd , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] emits each of \
the soun"|>, <|"label" -> "EmpiricalDistribution", "type" -> "keyword", 
  "info" -> "EmpiricalDistribution[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
empirical distribution based on the data values x ."|>, 
 <|"label" -> "EmptyGraphQ", "type" -> "keyword", 
  "info" -> 
   "EmptyGraphQ[g] yields True if g is an empty graph and False otherwise."|>\
, <|"label" -> "EmptyRegion", "type" -> "keyword", 
  "info" -> "                                               n\nEmptyRegion[n] \
represents the empty subset of \
\[CapitalATilde]\257\[CapitalAHat]\236\\[Micro] . "|>, 
 <|"label" -> "EmptySpaceF", "type" -> "keyword", 
  "info" -> "EmptySpaceF[pdata, r] estimates the empty space function F(r) \
for point data pdata at radius r.Empty"|>, <|"label" -> "Enabled", 
  "type" -> "keyword", "info" -> "Enabled is an option for objects such as \
Slider that specifies whether the objects should be enabled"|>, 
 <|"label" -> "Enclose", "type" -> "keyword", "info" -> "Enclose[expr] \
attempts to evaluate expr and return the result, but stops if it catches an \
error and "|>, <|"label" -> "Encode", "type" -> "keyword", 
  "info" -> "Encode[\"source\", \"dest\"] writes an encoded version of the \
file source to the file dest. << dest deco"|>, 
 <|"label" -> "Encrypt", "type" -> "keyword", "info" -> "Encrypt[\"password\"\
, expr] encrypts expr using the specified password, to give an encrypted \
object.En"|>, <|"label" -> "EncryptedObject", "type" -> "keyword", 
  "info" -> 
   "EncryptedObject[assoc] represents encrypted data generated by Encrypt."|>\
, <|"label" -> "EncryptFile", "type" -> "keyword", 
  "info" -> "EncryptFile[\"password\", file] generates an encrypted version \
of a file, using the specified password"|>, 
 <|"label" -> "End", "type" -> "keyword", 
  "info" -> 
   "End[] returns the present context, and reverts to the previous one. "|>, 
 <|"label" -> "EndAdd", "type" -> "keyword", "info" -> "EndAdd[ ] returns the \
present context, and reverts to the previous one, prepending the present \
conte"|>, <|"label" -> "EndDialogPacket", "type" -> "keyword", 
  "info" -> "EndDialogPacket[integer] is a WSTP packet indicating the end of \
the Dialog subsession referenced by "|>, <|"label" -> "EndOfBuffer", 
  "type" -> "keyword", "info" -> "EndOfBuffer is a symbol that represents the \
end of currently available data in the buffer for a proc"|>, 
 <|"label" -> "EndOfFile", "type" -> "keyword", 
  "info" -> "EndOfFile is a symbol returned by Read when it reaches the end \
of a file. "|>, <|"label" -> "EndOfLine", "type" -> "keyword", 
  "info" -> "EndOfLine represents the end of a line in a string for purposes \
of matching in StringExpression."|>, <|"label" -> "EndOfString", 
  "type" -> "keyword", "info" -> "EndOfString represents the end of a string \
for purposes of matching in StringExpression."|>, 
 <|"label" -> "EndPackage", "type" -> "keyword", 
  "info" -> "EndPackage[] restores ECContext and ECContextPath to their \
values before the preceding BeginPackage, a"|>, 
 <|"label" -> "EngineeringForm", "type" -> "keyword", 
  "info" -> "EngineeringForm[expr] prints with all real numbers in expr given \
in engineering notation. Engineerin"|>, <|"label" -> "EnterExpressionPacket", 
  "type" -> "keyword", "info" -> "EnterExpressionPacket[expr] is a WSTP \
packet that requests the evaluation of expr."|>, 
 <|"label" -> "EnterTextPacket", "type" -> "keyword", 
  "info" -> "EnterTextPacket[string] is a WSTP packet that requests the \
parsing and evaluation of string as an ex"|>, 
 <|"label" -> "Entity", "type" -> "keyword", "info" -> "Entity[\"type\", \
name] represents an entity of the specified type, identified by \
name.Entity[cspec, na"|>, <|"label" -> "EntityClass", "type" -> "keyword", 
  "info" -> "EntityClass[\"type\", name] represents a class of entities of \
the specified type identified by name.En"|>, <|"label" -> "EntityClassList", 
  "type" -> "keyword", "info" -> "EntityClassList[\"type\"] gives a list of \
entity classes for the specified type of entity."|>, 
 <|"label" -> "EntityCopies", "type" -> "keyword", 
  "info" -> "EntityCopies[entity, n] represents n copies of entity."|>, 
 <|"label" -> "EntityFunction", "type" -> "keyword", 
  "info" -> "EntityFunction[x, body] is a function with a single formal \
parameter x, to be used in EntityValue an"|>, <|"label" -> "EntityGroup", 
  "type" -> "keyword", "info" -> "EntityGroup[{entity , entity , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
group of entities.\n                   1        2"|>, 
 <|"label" -> "EntityInstance", "type" -> "keyword", 
  "info" -> "EntityInstance[entity, qual \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val] represents \
an entity whose qualifier qual has value val.EntityIns"|>, 
 <|"label" -> "EntityList", "type" -> "keyword", 
  "info" -> "EntityList[class] gives a list of entities in the specified \
entity class. EntityList[\"type\"] gives a"|>, 
 <|"label" -> "EntityPrefetch", "type" -> "keyword", 
  "info" -> "EntityPrefetch[\"type\"] fetches cacheable values associated \
with all entities of the specified type.E"|>, 
 <|"label" -> "EntityProperties", "type" -> "keyword", 
  "info" -> 
   "EntityProperties[type] lists properties associated with entity type \
type."|>, <|"label" -> "EntityProperty", "type" -> "keyword", 
  "info" -> "EntityProperty[type, pname] represents a property identified by \
pname for use in EntityValue.EntityP"|>, <|"label" -> "EntityPropertyClass", 
  "type" -> "keyword", "info" -> "EntityPropertyClass[type, pcname] \
represents a class of properties identified by the name pcname."|>, 
 <|"label" -> "EntityRegister", "type" -> "keyword", 
  "info" -> "EntityRegister[estore] registers the entities in the entity \
store estore so that they can be accesse"|>, <|"label" -> "EntityStore", 
  "type" -> "keyword", "info" -> "EntityStore[\"type\"] represents an empty \
entity store for entities of type \"type\".EntityStore[\"type\" "|>, 
 <|"label" -> "EntityStores", "type" -> "keyword", 
  "info" -> "EntityStores[] gives a list of all registered entity stores that \
are accessed when Entity is used."|>, <|"label" -> "EntityTypeName", 
  "type" -> "keyword", "info" -> "EntityTypeName[entity] gives the name of \
the entity type of entity.EntityTypeName[{entity , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, entit"|>, 
 <|"label" -> "EntityUnregister", "type" -> "keyword", 
  "info" -> "EntityUnregister[\"type\"] unregisters all entities in the first \
entity store that defines entities of"|>, <|"label" -> "EntityValue", 
  "type" -> "keyword", "info" -> "EntityValue[entity, property] gives the \
value of the specified property for the given entity.EntityV"|>, 
 <|"label" -> "Entropy", "type" -> "keyword", "info" -> "Entropy[list] gives \
the base \[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\215 information \
entropy of the values in list.Entropy[k, list] gives the "|>, 
 <|"label" -> "Environment", "type" -> "keyword", 
  "info" -> "Environment[\"var\"] gives the value of an operating system \
environment variable. "|>, <|"label" -> "Epilog", "type" -> "keyword", 
  "info" -> "Epilog is an option for graphics functions that gives a list of \
graphics primitives to be rendered a"|>, <|"label" -> "EpilogFunction", 
  "type" -> "keyword", "info" -> "EpilogFunction is an option for \
DocumentGenerator allowing arbitrary code to be executed after a doc"|>, 
 <|"label" -> "Equal", "type" -> "keyword", 
  "info" -> "lhs == rhs returns True if lhs and rhs are identical. "|>, 
 <|"label" -> "EqualTilde", "type" -> "keyword", 
  "info" -> "EqualTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\202 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\202 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "EqualTo", "type" -> "keyword", "info" -> "EqualTo[y] is an \
operator form that yields x == y when applied to an expression x. "|>, 
 <|"label" -> "EquatedTo", "type" -> "keyword", 
  "info" -> "EquatedTo is an option for Roots, which specifies an expression \
to use in place of the variable in t"|>, <|"label" -> "Equilibrium", 
  "type" -> "keyword", "info" -> "Equilibrium[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\214 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\214 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "EquirippleFilterKernel", "type" -> "keyword", 
  "info" -> "EquirippleFilterKernel[{{{\[CapitalATilde]\217\[CapitalAHat]\
\211  , \[CapitalATilde]\217\[CapitalAHat]\211  }, \
{\[CapitalATilde]\217\[CapitalAHat]\211  , \
\[CapitalATilde]\217\[CapitalAHat]\211  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}}, n] creates a \
finite impulse respo"|>, <|"label" -> "Equivalent", "type" -> "keyword", 
  "info" -> "Equivalent[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents the \
logical equivalence e  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\224 e  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\224 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, giving True when \
all of the e "|>, <|"label" -> "Erf", "type" -> "keyword", 
  "info" -> "Erf[z] gives the error function erf(z). Erf[z , z ] gives the \
generalized error function erf(z ) - e"|>, <|"label" -> "Erfc", 
  "type" -> "keyword", "info" -> 
   "Erfc[z] gives the complementary error function erfc(z). "|>, 
 <|"label" -> "Erfi", "type" -> "keyword", "info" -> "Erfi[z] gives the \
imaginary error function \
erf(i\[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat] z)/i. "|>, 
 <|"label" -> "ErlangB", "type" -> "keyword", 
  "info" -> "ErlangB[c, a] computes the Erlang B loss probability for an \
M/M/c/c queue."|>, <|"label" -> "ErlangC", "type" -> "keyword", 
  "info" -> "ErlangC[c, a] computes the Erlang C probability for nonzero \
waiting time in an M/M/c queue."|>, <|"label" -> "ErlangDistribution", 
  "type" -> "keyword", "info" -> "ErlangDistribution[k, \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]] represents the Erlang \
distribution with shape parameter k and rate \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]."|>, 
 <|"label" -> "Erosion", "type" -> "keyword", "info" -> "Erosion[image, ker] \
gives the morphological erosion of image with respect to the structuring \
element"|>, <|"label" -> "EscapeRadius", "type" -> "keyword", 
  "info" -> "EscapeRadius is an option to MandelbrotSetPlot that specifies \
the criterion to use to decide that a "|>, 
 <|"label" -> "EstimatedBackground", "type" -> "keyword", 
  "info" -> "EstimatedBackground[data] estimates the background of \
data.EstimatedBackground[data, \[CapitalATilde]\217\[CapitalAHat]\203] tries \
to pre"|>, <|"label" -> "EstimatedDistribution", "type" -> "keyword", 
  "info" -> "EstimatedDistribution[data, dist] estimates the parametric \
distribution dist from data.EstimatedDist"|>, 
 <|"label" -> "EstimatedPointProcess", "type" -> "keyword", 
  "info" -> "EstimatedPointProcess[pdata, pproc] estimates the parametric \
point process pproc from point data pda"|>, <|"label" -> "EstimatedProcess", 
  "type" -> "keyword", "info" -> "EstimatedProcess[data, proc] estimates the \
parametric process proc from data.EstimatedProcess[data, "|>, 
 <|"label" -> "EstimatedVariogramModel", "type" -> "keyword", 
  "info" -> "EstimatedVariogramModel[{loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] estimates the \
best variogram function from va"|>, <|"label" -> "EstimatorGains", 
  "type" -> "keyword", "info" -> "EstimatorGains[ssm, {p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] gives the \
estimator gain matrix for the StateSpaceModel ssm, su"|>, 
 <|"label" -> "EstimatorRegulator", "type" -> "keyword", 
  "info" -> "EstimatorRegulator[sspec, {l, \
\[CapitalATilde]\216\[CapitalAHat]\272}] gives the output feedback controller \
with estimator and regulator "|>, <|"label" -> "EuclideanDistance", 
  "type" -> "keyword", "info" -> "EuclideanDistance[u, v] gives the Euclidean \
distance between vectors u and v."|>, <|"label" -> "EulerAngles", 
  "type" -> "keyword", "info" -> "EulerAngles[r] gives Euler angles \
{\[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b2, \
\[CapitalATilde]\216b3} corresponding to the rotation matrix r.EulerAngles[r, \
{a"|>, <|"label" -> "EulerCharacteristic", "type" -> "keyword", 
  "info" -> 
   "EulerCharacteristic[poly] gives the Euler characteristic of a poly."|>, 
 <|"label" -> "EulerE", "type" -> "keyword", "info" -> "EulerE[n] gives the \
Euler number E . EulerE[n, x] gives the Euler polynomial E (x). \n            \
   "|>, <|"label" -> "EulerGamma", "type" -> "keyword", 
  "info" -> "EulerGamma is \
Euler\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\231s constant \
\[CapitalATilde]\216b3, with numerical value \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 0.577216. "|>, 
 <|"label" -> "EulerianGraphQ", "type" -> "keyword", 
  "info" -> "EulerianGraphQ[g] yields True if the graph g is Eulerian, and \
False otherwise."|>, <|"label" -> "EulerMatrix", "type" -> "keyword", 
  "info" -> "EulerMatrix[{\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216b3}] gives the Euler 3D rotation \
matrix formed by rotating by \[CapitalATilde]\216\\[PlusMinus] around the \
current"|>, <|"label" -> "EulerPhi", "type" -> "keyword", 
  "info" -> "EulerPhi[n] gives the Euler totient function \
\[CapitalATilde]\217\[CapitalAHat]\225(n). "|>, 
 <|"label" -> "Evaluate", "type" -> "keyword", "info" -> "Evaluate[expr] \
causes expr to be evaluated even if it appears as the argument of a function \
whose at"|>, <|"label" -> "EvaluatePacket", "type" -> "keyword", 
  "info" -> 
   "EvaluatePacket[expr] is a WSTP packet requesting evaluation of expr."|>, 
 <|"label" -> "EvaluateScheduledTask", "type" -> "keyword", 
  "info" -> "EvaluateScheduledTask[expr] triggers immediate local execution \
of the specified task object."|>, <|"label" -> "EvaluationData", 
  "type" -> "keyword", "info" -> "EvaluationData[expr] gives an association \
containing the result of evaluating expr and metadata abou"|>, 
 <|"label" -> "EvaluationEnvironment", "type" -> "keyword", 
  "info" -> "EvaluationEnvironment is an option for functions such as \
InitializationValue and InitializationObjec"|>, 
 <|"label" -> "EvaluationMonitor", "type" -> "keyword", 
  "info" -> "EvaluationMonitor is an option for various numerical computation \
and plotting functions that gives a"|>, <|"label" -> "EvaluationObject", 
  "type" -> "keyword", "info" -> "EvaluationObject[n, expr, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an \
expression submitted for evaluation on any available para"|>, 
 <|"label" -> "Evaluator", "type" -> "keyword", 
  "info" -> "Evaluator is an option for objects such as Button, Dynamic, and \
Cell that gives the name of the kern"|>, <|"label" -> "EvaluatorNames", 
  "type" -> "keyword", "info" -> "EvaluatorNames is a global option that \
specifies the kernels that are currently configured to perfor"|>, 
 <|"label" -> "EvenQ", "type" -> "keyword", 
  "info" -> 
   "EvenQ[expr] gives True if expr is an even integer, and False otherwise. "\
|>, <|"label" -> "EventSeries", "type" -> "keyword", 
  "info" -> "EventSeries[{{t , v }, {t , v } \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
series of events given as time-value pairs {t , v }"|>, 
 <|"label" -> "ExactBlackmanWindow", "type" -> "keyword", 
  "info" -> 
   "ExactBlackmanWindow[x] represents an exact Blackman window function of \
x."|>, <|"label" -> "ExactNumberQ", "type" -> "keyword", 
  "info" -> "ExactNumberQ[expr] returns True if expr is an exact real or \
complex number, and returns False otherw"|>, 
 <|"label" -> "ExactRootIsolation", "type" -> "keyword", 
  "info" -> "ExactRootIsolation is an option for Root, which specifies \
whether exact isolating intervals rather t"|>, 
 <|"label" -> "ExampleData", "type" -> "keyword", 
  "info" -> "ExampleData[\"type\"] gives a list of names of examples of the \
specified type.ExampleData[{\"type\", \"na"|>, 
 <|"label" -> "Except", "type" -> "keyword", "info" -> "Except[c] is a \
pattern object which represents any expression except one that matches c. \
Except[c, p"|>, <|"label" -> "ExcludedContexts", "type" -> "keyword", 
  "info" -> "ExcludedContexts is an option for FullDefinition, Manipulate and \
related symbols that gives contexts"|>, <|"label" -> "ExcludedForms", 
  "type" -> "keyword", "info" -> "ExcludedForms is an option that gives a \
list of patterns for expressions that should be excluded fro"|>, 
 <|"label" -> "ExcludedLines", "type" -> "keyword", 
  "info" -> "ExcludedLines is an option for SemanticImport and related \
functions that specifies which lines shoul"|>, 
 <|"label" -> "ExcludedPhysicalQuantities", "type" -> "keyword", 
  "info" -> "ExcludedPhysicalQuantities is an option for FormulaLookup that \
specifies physical quantities that sh"|>, <|"label" -> "ExcludePods", 
  "type" -> "keyword", "info" -> "ExcludePods is an option to WolframAlpha \
that specifies pod IDs to exclude from the results."|>, 
 <|"label" -> "Exclusions", "type" -> "keyword", 
  "info" -> "Exclusions is an option that specifies where to exclude in \
regions used by functions like Plot, Plot"|>, <|"label" -> "ExclusionsStyle", 
  "type" -> "keyword", "info" -> "ExclusionsStyle is an option to plotting \
functions that specifies how to render subregions excluded "|>, 
 <|"label" -> "Exists", "type" -> "keyword", "info" -> "Exists[x, expr] \
represents the statement that there exists a value of x for which expr is \
True. Exis"|>, <|"label" -> "Exit", "type" -> "keyword", 
  "info" -> "Exit[] terminates a Wolfram Language kernel session. "|>, 
 <|"label" -> "ExoplanetData", "type" -> "keyword", 
  "info" -> "ExoplanetData[entity, property] gives the value of the specified \
property for the exoplanet entity.E"|>, <|"label" -> "Exp", 
  "type" -> "keyword", "info" -> "Exp[z] gives the exponential of z. "|>, 
 <|"label" -> "Expand", "type" -> "keyword", "info" -> "Expand[expr] expands \
out products and positive integer powers in expr. Expand[expr, patt] leaves \
une"|>, <|"label" -> "ExpandAll", "type" -> "keyword", 
  "info" -> "ExpandAll[expr] expands out all products and integer powers in \
any part of expr. ExpandAll[expr, pat"|>, <|"label" -> "ExpandDenominator", 
  "type" -> "keyword", "info" -> "ExpandDenominator[expr] expands out \
products and powers that appear as denominators in expr. "|>, 
 <|"label" -> "ExpandFileName", "type" -> "keyword", 
  "info" -> "ExpandFileName[\"name\"] textually expands name to have the form \
of an absolute file name for your ope"|>, <|"label" -> "ExpandNumerator", 
  "type" -> "keyword", "info" -> "ExpandNumerator[expr] expands out products \
and powers that appear in the numerator of expr. "|>, 
 <|"label" -> "Expectation", "type" -> "keyword", 
  "info" -> "Expectation[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist] gives the \
expectation of expr under the assumption that x follows the pr"|>, 
 <|"label" -> "ExpectedValue", "type" -> "keyword", 
  "info" -> "ExpectedValue[f, list] gives the expected value of the pure \
function f with respect to the values in"|>, 
 <|"label" -> "ExpGammaDistribution", "type" -> "keyword", 
  "info" -> "ExpGammaDistribution[\[CapitalATilde]\216\[CapitalAHat]\272, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
\[CapitalATilde]\216\[CapitalAHat]\274] represents an exp-gamma distribution \
with shape parameter \[CapitalATilde]\216\[CapitalAHat]\272, scale par"|>, 
 <|"label" -> "ExpIntegralE", "type" -> "keyword", 
  "info" -> "ExpIntegralE[n, z] gives the exponential integral function E \
(z).\n                                  "|>, <|"label" -> "Offload", 
  "type" -> "keyword", "info" -> 
   "Use Offload[expr_] to keep expr from evaluation on Kernel"|>, 
 <|"label" -> "ExpIntegralEi", "type" -> "keyword", 
  "info" -> "ExpIntegralEi[z] gives the exponential integral function Ei(z). \
"|>, <|"label" -> "ExpirationDate", "type" -> "keyword", 
  "info" -> "ExpirationDate is an option for various functions that specifies \
when a persistent value should be t"|>, <|"label" -> "Exponent", 
  "type" -> "keyword", "info" -> "Exponent[expr, form] gives the maximum \
power with which form appears in the expanded form of expr. E"|>, 
 <|"label" -> "ExponentFunction", "type" -> "keyword", 
  "info" -> "ExponentFunction is an option for NumberForm and related \
functions that determines the exponent to u"|>, 
 <|"label" -> "ExponentialDistribution", "type" -> "keyword", 
  "info" -> "ExponentialDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet]] represents an exponential distribution with scale \
inversely proportional "|>, <|"label" -> "ExponentialFamily", 
  "type" -> "keyword", "info" -> "ExponentialFamily is an option for \
GeneralizedLinearModelFit that specifies the exponential family f"|>, 
 <|"label" -> "ExponentialMovingAverage", "type" -> "keyword", 
  "info" -> "ExponentialMovingAverage[list, \
\[CapitalATilde]\216\\[PlusMinus]] gives the exponential moving average of \
list with smoothing consta"|>, <|"label" -> "ExponentialPowerDistribution", 
  "type" -> "keyword", "info" -> "ExponentialPowerDistribution[\
\[CapitalATilde]\216\[CapitalAHat]\272, \
\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents an exponential power \
distribution with shape parame"|>, <|"label" -> "ExponentStep", 
  "type" -> "keyword", "info" -> "ExponentStep is an option for NumberForm \
and related functions that determines in what steps exponen"|>, 
 <|"label" -> "Export", "type" -> "keyword", "info" -> "Export[\"dest.ext\", \
expr] exports data to a file, converting it to the format corresponding to \
the fi"|>, <|"label" -> "ExportByteArray", "type" -> "keyword", 
  "info" -> "ExportByteArray[expr, \"format\"] generates a ByteArray object \
corresponding to expr exported in the s"|>, <|"label" -> "ExportForm", 
  "type" -> "keyword", "info" -> "ExportForm[expr, \"fmt\"] specifies that \
expr should be exported in the specified format in functions "|>, 
 <|"label" -> "ExportString", "type" -> "keyword", 
  "info" -> "ExportString[expr, \"format\"] generates a string corresponding \
to expr exported in the specified form"|>, <|"label" -> "Expression", 
  "type" -> "keyword", "info" -> "Expression is a symbol that represents an \
ordinary Wolfram Language expression in Read and related f"|>, 
 <|"label" -> "ExpressionGraph", "type" -> "keyword", 
  "info" -> "ExpressionGraph[expr] gives the tree graph with different levels \
at different depths. ExpressionGrap"|>, <|"label" -> "ExpressionTree", 
  "type" -> "keyword", "info" -> "ExpressionTree[expr] gives a Tree object \
from the structure of the expression expr.ExpressionTree[ex"|>, 
 <|"label" -> "ExpToTrig", "type" -> "keyword", 
  "info" -> "ExpToTrig[expr] converts exponentials in expr to trigonometric \
functions. "|>, <|"label" -> "ExtendedEntityClass", "type" -> "keyword", 
  "info" -> "ExtendedEntityClass[class, \"name\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] f] represents an \
entity class derived from class by adding a new"|>, 
 <|"label" -> "ExtendedGCD", "type" -> "keyword", 
  "info" -> "ExtendedGCD[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
extended greatest common divisor of the integers n . \n             "|>, 
 <|"label" -> "Extension", "type" -> "keyword", 
  "info" -> "Extension is an option for various polynomial and algebraic \
functions that specifies generators for "|>, 
 <|"label" -> "ExtentElementFunction", "type" -> "keyword", 
  "info" -> "ExtentElementFunction is an option to DiscretePlot and \
DiscretePlot3D that gives a function to use t"|>, 
 <|"label" -> "ExtentMarkers", "type" -> "keyword", 
  "info" -> "ExtentMarkers is an option to DiscretePlot and DiscretePlot3D \
that specifies markers to draw at exte"|>, <|"label" -> "ExtentSize", 
  "type" -> "keyword", "info" -> "ExtentSize is an option to DiscretePlot and \
DiscretePlot3D that specifies how far to extend out from"|>, 
 <|"label" -> "ExternalBundle", "type" -> "keyword", 
  "info" -> "ExternalBundle[{name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] obj , name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] obj , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
bundle of resources to be externally de"|>, 
 <|"label" -> "ExternalDataCharacterEncoding", "type" -> "keyword", 
  "info" -> "ExternalDataCharacterEncoding is a global option that specifies \
the character encoding used in readi"|>, <|"label" -> "ExternalEvaluate", 
  "type" -> "keyword", "info" -> "ExternalEvaluate[\"sys\", \"cmd\"] \
evaluates the command cmd in the external evaluator sys, returning an"|>, 
 <|"label" -> "ExternalFunction", "type" -> "keyword", 
  "info" -> "ExternalFunction[sys, \"f\"] represents an external function \
named \"f\" defined in the external evaluat"|>, 
 <|"label" -> "ExternalIdentifier", "type" -> "keyword", 
  "info" -> "ExternalIdentifier[\"type\", id] represents a resource \
identified by id in the external identifier sys"|>, 
 <|"label" -> "ExternalObject", "type" -> "keyword", 
  "info" -> "ExternalObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents an external object inside an \
ExternalSessionObject."|>, <|"label" -> "ExternalOptions", 
  "type" -> "keyword", "info" -> "ExternalOptions is an option for EmbedCode \
and related functions that gives options specific to the "|>, 
 <|"label" -> "ExternalSessionObject", "type" -> "keyword", 
  "info" -> "ExternalSessionObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents an external session started by \
StartExternalSession for use with"|>, <|"label" -> "ExternalSessions", 
  "type" -> "keyword", "info" -> "ExternalSessions[] gives the list of \
currently active external evaluator sessions.ExternalSessions[s"|>, 
 <|"label" -> "ExternalStorageBase", "type" -> "keyword", 
  "info" -> "ExternalStorageBase is an option for various external storage \
functions that specifies which externa"|>, 
 <|"label" -> "ExternalStorageDownload", "type" -> "keyword", 
  "info" -> "ExternalStorageDownload[location] downloads content from the \
specified location.ExternalStorageDownl"|>, 
 <|"label" -> "ExternalStorageGet", "type" -> "keyword", 
  "info" -> "ExternalStorageGet[ExternalStorageObject[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246]] reads in an expression stored at an \
external storage sp"|>, <|"label" -> "ExternalStorageObject", 
  "type" -> "keyword", "info" -> "ExternalStorageObject[location] represents \
a file stored in an external location.ExternalStorageObje"|>, 
 <|"label" -> "ExternalStoragePut", "type" -> "keyword", 
  "info" -> "ExternalStoragePut[expr] writes expr to an external storage \
specified by ECExternalStorageBase.Extern"|>, 
 <|"label" -> "ExternalStorageUpload", "type" -> "keyword", 
  "info" -> "ExternalStorageUpload[file] uploads file to an external storage \
specified by ECExternalStorageBase.Ex"|>, 
 <|"label" -> "ExternalTypeSignature", "type" -> "keyword", 
  "info" -> "ExternalTypeSignature is an option for EmbedCode that gives \
rules specifying the mapping to external"|>, <|"label" -> "ExternalValue", 
  "type" -> "keyword", "info" -> "ExternalValue[sys, \"sym\"] gives the value \
of \"sym\" in external evaluator sys. ExternalValue[session,"|>, 
 <|"label" -> "Extract", "type" -> "keyword", "info" -> "Extract[expr, pos] \
extracts the part of expr at the position specified by pos. Extract[expr, \
{pos , "|>, <|"label" -> "ExtractArchive", "type" -> "keyword", 
  "info" -> "ExtractArchive[source] expands an archive file, saving its \
content into the current directory.Extrac"|>, <|"label" -> "ExtractLayer", 
  "type" -> "keyword", "info" -> "ExtractLayer[] represents a net layer that \
takes an array and a position specification as inputs and"|>, 
 <|"label" -> "ExtractPacletArchive", "type" -> "keyword", 
  "info" -> "ExtractPacletArchive[file] extracts the contents of the paclet \
archive file into the directory in wh"|>, 
 <|"label" -> "ExtremeValueDistribution", "type" -> "keyword", 
  "info" -> "ExtremeValueDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents an extreme value distribution with \
location parameter \[CapitalATilde]\216\\[PlusMinus] an"|>, 
 <|"label" -> "FaceAlign", "type" -> "keyword", 
  "info" -> "FaceAlign[image] attempts to find faces in image and align \
them.FaceAlign[image, fref] gives aligned"|>, 
 <|"label" -> "FaceForm", "type" -> "keyword", "info" -> "FaceForm[g] is a \
graphics directive which specifies that faces of polygons and other filled \
graphics"|>, <|"label" -> "FaceGrids", "type" -> "keyword", 
  "info" -> "FaceGrids is an option for three-dimensional graphics functions \
that specifies grid lines to draw on"|>, <|"label" -> "FaceGridsStyle", 
  "type" -> "keyword", "info" -> "FaceGridsStyle is an option for 3D graphics \
functions that specifies how face grids should be render"|>, 
 <|"label" -> "FaceRecognize", "type" -> "keyword", 
  "info" -> "FaceRecognize[{example  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] name , example  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] name , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
ClassifierFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] based on th"|>, <|"label" -> "FacialFeatures", "type" -> "keyword", 
  "info" -> "FacialFeatures[image] returns a minimal summary of facial \
features for all detected faces in image.F"|>, 
 <|"label" -> "Factor", "type" -> "keyword", "info" -> "Factor[poly] factors \
a polynomial over the integers. Factor[poly, Modulus \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] p] factors a \
polynomial "|>, <|"label" -> "Factorial", "type" -> "keyword", 
  "info" -> "n ! gives the factorial of n. "|>, 
 <|"label" -> "Factorial2", "type" -> "keyword", 
  "info" -> "n !! gives the double factorial of n. "|>, 
 <|"label" -> "FactorialMoment", "type" -> "keyword", 
  "info" -> "                                     th                          \
                                   "|>, 
 <|"label" -> "FactorialMomentGeneratingFunction", "type" -> "keyword", 
  "info" -> "FactorialMomentGeneratingFunction[dist, t] gives the factorial \
moment-generating function for the di"|>, <|"label" -> "FactorialPower", 
  "type" -> "keyword", "info" -> "                                            \
    (n)                                                 "|>, 
 <|"label" -> "FactorInteger", "type" -> "keyword", 
  "info" -> "FactorInteger[n] gives a list of the prime factors of the \
integer n, together with their exponents. "|>, 
 <|"label" -> "FactorList", "type" -> "keyword", 
  "info" -> "FactorList[poly] gives a list of the factors of a polynomial, \
together with their exponents. "|>, <|"label" -> "FactorSquareFree", 
  "type" -> "keyword", "info" -> 
   "FactorSquareFree[poly] pulls out any multiple factors in a polynomial. "|>\
, <|"label" -> "FactorSquareFreeList", "type" -> "keyword", 
  "info" -> "FactorSquareFreeList[poly] gives a list of \
square\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220free factors \
of a polynomial, together with their "|>, <|"label" -> "FactorTerms", 
  "type" -> "keyword", "info" -> "FactorTerms[poly] pulls out any overall \
numerical factor in poly. FactorTerms[poly, x] pulls out any"|>, 
 <|"label" -> "FactorTermsList", "type" -> "keyword", 
  "info" -> "FactorTermsList[poly] gives a list in which the first element is \
the overall numerical factor in pol"|>, <|"label" -> "Failure", 
  "type" -> "keyword", "info" -> "Failure[\"tag\", assoc] represents a \
failure of a type indicated by tag, with details given by the ass"|>, 
 <|"label" -> "FailureAction", "type" -> "keyword", 
  "info" -> "FailureAction is an option to Query and related functions that \
determines what should happen when a "|>, <|"label" -> "FailureDistribution", 
  "type" -> "keyword", "info" -> "FailureDistribution[bexpr, {{x , dist }, {x \
, dist }, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
represents the failure distribution for a "|>, 
 <|"label" -> "FailureQ", "type" -> "keyword", "info" -> "FailureQ[expr] \
gives True if expr has head Failure or is equal to ECFailed or ECAborted."|>, 
 <|"label" -> "False", "type" -> "keyword", 
  "info" -> "False is the symbol for the Boolean value false. "|>, 
 <|"label" -> "FareySequence", "type" -> "keyword", 
  "info" -> "                                                                 \
                        th\nFareySeq"|>, <|"label" -> "FeatureDistance", 
  "type" -> "keyword", "info" -> "FeatureDistance[example , example , \
extractor] gives the distance between example  and example  in t"|>, 
 <|"label" -> "FeatureExtract", "type" -> "keyword", 
  "info" -> "FeatureExtract[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] extracts \
features for each of the example  using a feature e"|>, 
 <|"label" -> "FeatureExtraction", "type" -> "keyword", 
  "info" -> "FeatureExtraction[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
FeatureExtractorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] trained from the "|>, <|"label" -> "FeatureExtractor", 
  "type" -> "keyword", "info" -> "FeatureExtractor is an option for functions \
such as Classify that specifies how features should be e"|>, 
 <|"label" -> "FeatureExtractorFunction", "type" -> "keyword", 
  "info" -> "FeatureExtractorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a feature extractor function generated by \
FeatureExtraction."|>, <|"label" -> "FeatureNames", "type" -> "keyword", 
  "info" -> "FeatureNames is an option for machine learning functions such as \
Classify or Predict that specifies "|>, <|"label" -> "FeatureNearest", 
  "type" -> "keyword", "info" -> "FeatureNearest[{elem , elem , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] gives the \
list of elem  to which x is nearest in a computed fea"|>, 
 <|"label" -> "FeatureSpacePlot", "type" -> "keyword", 
  "info" -> "FeatureSpacePlot[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots features \
extracted from the example  as a scatter pl"|>, 
 <|"label" -> "FeatureSpacePlot3D", "type" -> "keyword", 
  "info" -> "FeatureSpacePlot3D[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots features \
extracted from the example  as a scatter "|>, <|"label" -> "FeatureTypes", 
  "type" -> "keyword", "info" -> "FeatureTypes is an option for machine \
learning functions such as Classify or Predict that specifies "|>, 
 <|"label" -> "FeedbackLinearize", "type" -> "keyword", 
  "info" -> "FeedbackLinearize[asys] input-output linearizes the \
AffineStateSpaceModel asys by state transformati"|>, 
 <|"label" -> "FeedbackSector", "type" -> "keyword", 
  "info" -> "FeedbackSector is an option to NyquistPlot that specifies the \
sector limits of the nonlinearity in t"|>, 
 <|"label" -> "FeedbackSectorStyle", "type" -> "keyword", 
  "info" -> "FeedbackSectorStyle is an option to NyquistPlot that specifies \
the style in which graphics of Feedba"|>, <|"label" -> "FeedbackType", 
  "type" -> "keyword", "info" -> "FeedbackType is an option for some control \
system functions that specifies the feedback type."|>, 
 <|"label" -> "FetalGrowthData", "type" -> "keyword", 
  "info" -> "FetalGrowthData[age] returns the values for all properties of \
fetal development for the specified ag"|>, <|"label" -> "Fibonacci", 
  "type" -> "keyword", "info" -> "Fibonacci[n] gives the Fibonacci number F . \
Fibonacci[n, x] gives the Fibonacci polynomial F (x). \n "|>, 
 <|"label" -> "Fibonorial", "type" -> "keyword", 
  "info" -> "Fibonorial[n] gives the fibonorial n ! .\n                       \
               F"|>, <|"label" -> "FieldCompletionFunction", 
  "type" -> "keyword", "info" -> "FieldCompletionFunction is an option for \
InputField that specifies a function to apply to the input "|>, 
 <|"label" -> "FieldHint", "type" -> "keyword", 
  "info" -> "FieldHint is an option for InputField that specifies contents to \
display when the input field is emp"|>, <|"label" -> "FieldHintStyle", 
  "type" -> "keyword", "info" -> "FieldHintStyle is an option for InputField \
that specifies the style to use for displaying the field "|>, 
 <|"label" -> "FieldMasked", "type" -> "keyword", 
  "info" -> "FieldMasked is an option to InputField that determines whether \
to mask user input."|>, <|"label" -> "FieldSize", "type" -> "keyword", 
  "info" -> "FieldSize is an option for InputField, PopupMenu, and related \
functions that specifies the size of t"|>, <|"label" -> "File", 
  "type" -> "keyword", "info" -> "File[\"path\"] is a symbolic representation \
of a location in the local file system. "|>, <|"label" -> "FileBaseName", 
  "type" -> "keyword", "info" -> "FileBaseName[\"file\"] gives the base name \
for a file without its extension."|>, <|"label" -> "FileByteCount", 
  "type" -> "keyword", "info" -> 
   "FileByteCount[file] gives the number of bytes in a file. "|>, 
 <|"label" -> "FileConvert", "type" -> "keyword", 
  "info" -> "FileConvert[source \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \"dest.ext\"] \
converts the contents of source to the format defined by the extens"|>, 
 <|"label" -> "FileDate", "type" -> "keyword", "info" -> "FileDate[\"file\"] \
gives the date and time at which a file was last modified. FileDate[\"file\", \
\"type\"]"|>, <|"label" -> "FileExistsQ", "type" -> "keyword", 
  "info" -> "FileExistsQ[\"name\"] gives True if the file with the specified \
name exists, and gives False otherwise"|>, <|"label" -> "FileExtension", 
  "type" -> "keyword", "info" -> 
   "FileExtension[\"file\"] gives the file extension for a file name."|>, 
 <|"label" -> "FileFormat", "type" -> "keyword", 
  "info" -> "FileFormat[source] attempts to determine what Import format \
could be used to import the file corresp"|>, 
 <|"label" -> "FileFormatProperties", "type" -> "keyword", 
  "info" -> "FileFormatProperties[\"fmt\"] returns an association of \
properties for the specified format \"fmt\".File"|>, 
 <|"label" -> "FileFormatQ", "type" -> "keyword", 
  "info" -> "FileFormatQ[source, \"fmt\"] gives True if the file \
corresponding to source might be imported as forma"|>, 
 <|"label" -> "FileHash", "type" -> "keyword", "info" -> "FileHash[file] \
gives an integer hash code for the contents of the specified \
file.FileHash[file, \"typ"|>, <|"label" -> "FileNameDepth", 
  "type" -> "keyword", "info" -> "FileNameDepth[\"name\"] gives the number of \
path elements in the file name \"file\"."|>, 
 <|"label" -> "FileNameDialogSettings", "type" -> "keyword", 
  "info" -> "FileNameDialogSettings is a global option that specifies \
settings for the Insert File Path dialog bo"|>, 
 <|"label" -> "FileNameDrop", "type" -> "keyword", 
  "info" -> "FileNameDrop[\"name\", n] drops the first n path elements in the \
file name \"name\".FileNameDrop[\"name\","|>, <|"label" -> "FileNameForms", 
  "type" -> "keyword", "info" -> "FileNameForms is an option that specifies \
the pattern for file names to be selected by a function."|>, 
 <|"label" -> "FileNameJoin", "type" -> "keyword", 
  "info" -> "FileNameJoin[{name , name , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] joins the name  \
together into a file name suitable for your current "|>, 
 <|"label" -> "FileNames", "type" -> "keyword", 
  "info" -> "FileNames[] lists all files in the current working directory. \
FileNames[form] lists all files in the"|>, <|"label" -> "FileNameSetter", 
  "type" -> "keyword", "info" -> "FileNameSetter[name] represents a file name \
setter which displays as a Browse button and when clicke"|>, 
 <|"label" -> "FileNameSplit", "type" -> "keyword", 
  "info" -> "FileNameSplit[\"name\"] splits a file name into a list of \
parts."|>, <|"label" -> "FileNameTake", "type" -> "keyword", 
  "info" -> "FileNameTake[\"name\"] gives the last path element in the file \
name \"name\".FileNameTake[\"name\", n] giv"|>, 
 <|"label" -> "FileNameToFormatList", "type" -> "keyword", 
  "info" -> "FileNameToFormatList[] returns lists of file formats \
corresponding to all registered file name patte"|>, 
 <|"label" -> "FilePrint", "type" -> "keyword", 
  "info" -> "FilePrint[\"file\"] prints out the raw textual contents of \
file.FilePrint[\"file\", n] prints out the fi"|>, 
 <|"label" -> "FileSize", "type" -> "keyword", 
  "info" -> "FileSize[file] gives the size of a file as a quantity."|>, 
 <|"label" -> "FileTemplate", "type" -> "keyword", 
  "info" -> "FileTemplate[\"file\"] yields a TemplateObject expression that \
represents a file template to be applie"|>, <|"label" -> "FileTemplateApply", 
  "type" -> "keyword", "info" -> "FileTemplateApply[template] applies a \
template, evaluating all template elements it contains, and th"|>, 
 <|"label" -> "FileType", "type" -> "keyword", "info" -> "FileType[\"file\"] \
gives the type of a file, typically File, Directory, or None. "|>, 
 <|"label" -> "FilledCurve", "type" -> "keyword", 
  "info" -> "FilledCurve[{segment , segment , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
filled curve consisting of segment  followed by se"|>, 
 <|"label" -> "FilledTorus", "type" -> "keyword", 
  "info" -> "FilledTorus[{x, y, z}, {r     , r     }] represents a filled \
torus centered at {x, y, z} with inner "|>, <|"label" -> "Filling", 
  "type" -> "keyword", "info" -> "Filling is an option for ListPlot, Plot, \
Plot3D, and related functions that specifies what filling t"|>, 
 <|"label" -> "FillingStyle", "type" -> "keyword", 
  "info" -> "FillingStyle is an option for ListPlot, Plot, Plot3D, and \
related functions that specifies the defau"|>, 
 <|"label" -> "FillingTransform", "type" -> "keyword", 
  "info" -> "FillingTransform[image] gives a version of image with all \
extended minima filled.FillingTransform[im"|>, 
 <|"label" -> "FilteredEntityClass", "type" -> "keyword", 
  "info" -> "FilteredEntityClass[class, f] represents a class of entities \
where only entities for which the Entit"|>, <|"label" -> "FilterRules", 
  "type" -> "keyword", "info" -> "FilterRules[rules, patt] filters the list \
rules by picking out only those rules whose left-hand side"|>, 
 <|"label" -> "FinancialBond", "type" -> "keyword", 
  "info" -> "FinancialBond[params, ambientparams] gives the value of a \
financial bond instrument.FinancialBond[pa"|>, 
 <|"label" -> "FinancialData", "type" -> "keyword", 
  "info" -> "FinancialData[\"name\"] gives the last known price or value for \
the financial entity specified by \"nam"|>, 
 <|"label" -> "FinancialDerivative", "type" -> "keyword", 
  "info" -> "FinancialDerivative[instrument, params, ambientparams] gives the \
value of the specified financial in"|>, <|"label" -> "FinancialIndicator", 
  "type" -> "keyword", "info" -> "FinancialIndicator[\"ind\", par , par , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
financial indicator \"ind\" with parameters par "|>, 
 <|"label" -> "Find", "type" -> "keyword", "info" -> "Find[stream, \"text\"] \
finds the first line in an input stream that contains the specified string. \
Fin"|>, <|"label" -> "FindAnomalies", "type" -> "keyword", 
  "info" -> "FindAnomalies[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a list of \
the example  that are considered anomalous wi"|>, 
 <|"label" -> "FindArgMax", "type" -> "keyword", 
  "info" -> "FindArgMax[f, x] gives the position x    of a local maximum of \
f.FindArgMax[f, {x, x }] gives the po"|>, <|"label" -> "FindArgMin", 
  "type" -> "keyword", "info" -> "FindArgMin[f, x] gives the position x    of \
a local minimum of f.FindArgMin[f, {x, x }] gives the po"|>, 
 <|"label" -> "FindChannels", "type" -> "keyword", 
  "info" -> "FindChannels[] gives a list of channels in your home area on the \
channel broker server.FindChannels["|>, <|"label" -> "FindClique", 
  "type" -> "keyword", "info" -> "FindClique[g] finds a largest clique in the \
graph g.FindClique[g, n] finds a clique containing at mo"|>, 
 <|"label" -> "FindClusters", "type" -> "keyword", 
  "info" -> "FindClusters[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] partitions the \
e  into clusters of similar elements. FindClusters[{e  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] v "|>, 
 <|"label" -> "FindCookies", "type" -> "keyword", 
  "info" -> "FindCookies[] gives a list of all currently set \
cookies.FindCookies[domain] gives a list of cookies "|>, 
 <|"label" -> "FindCurvePath", "type" -> "keyword", 
  "info" -> "FindCurvePath[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an \
ordering of the {x , y } that corresponds to one or "|>, 
 <|"label" -> "FindCycle", "type" -> "keyword", 
  "info" -> "FindCycle[g] finds a cycle in the graph g.FindCycle[g, k] finds \
a cycle of length at most k in the g"|>, <|"label" -> "FindDevices", 
  "type" -> "keyword", "info" -> "FindDevices[] searches for available \
devices on your computer system.FindDevices[form] gives a list "|>, 
 <|"label" -> "FindDistribution", "type" -> "keyword", 
  "info" -> "FindDistribution[data] finds a simple functional form to fit the \
distribution of data.FindDistributi"|>, 
 <|"label" -> "FindDistributionParameters", "type" -> "keyword", 
  "info" -> "FindDistributionParameters[data, dist] finds the parameter \
estimates for the distribution dist from "|>, <|"label" -> "FindDivisions", 
  "type" -> "keyword", "info" -> "FindDivisions[{x   , x   }, n] finds a list \
of about n \"nice\" numbers that divide the interval aroun"|>, 
 <|"label" -> "FindEdgeColoring", "type" -> "keyword", 
  "info" -> "FindEdgeColoring[g] finds a coloring with minimal size for the \
edges in the graph g.FindEdgeColoring"|>, <|"label" -> "FindEdgeCover", 
  "type" -> "keyword", "info" -> "FindEdgeCover[g] finds an edge cover of the \
graph g with a minimum number of edges.FindEdgeCover[{v "|>, 
 <|"label" -> "FindEdgeCut", "type" -> "keyword", 
  "info" -> "FindEdgeCut[g] finds a smallest edge cut of the graph \
g.FindEdgeCut[g, s, t] finds a smallest s-t ed"|>, 
 <|"label" -> "FindEdgeIndependentPaths", "type" -> "keyword", 
  "info" -> "FindEdgeIndependentPaths[g, s, t, k] finds at most k \
edge-independent paths from vertex s to vertex "|>, 
 <|"label" -> "FindEquationalProof", "type" -> "keyword", 
  "info" -> "FindEquationalProof[thm, axms] tries to find an equational proof \
of the symbolic theorem thm using t"|>, <|"label" -> "FindEulerianCycle", 
  "type" -> "keyword", "info" -> "FindEulerianCycle[g] finds an Eulerian \
cycle in the graph g.FindEulerianCycle[g, k] finds at most k "|>, 
 <|"label" -> "FindExternalEvaluators", "type" -> "keyword", 
  "info" -> "FindExternalEvaluators[] finds installed external evaluators \
that can be used with ExternalEvaluate,"|>, <|"label" -> "FindFile", 
  "type" -> "keyword", "info" -> "FindFile[name] finds the file with the \
specified name that would be loaded by Get[name] and related "|>, 
 <|"label" -> "FindFit", "type" -> "keyword", "info" -> "FindFit[data, expr, \
pars, vars] finds numerical values of the parameters pars that make expr give \
a "|>, <|"label" -> "FindFormula", "type" -> "keyword", 
  "info" -> "FindFormula[data] finds a pure function that approximates \
data.FindFormula[data, x] finds a symbolic"|>, 
 <|"label" -> "FindFundamentalCycles", "type" -> "keyword", 
  "info" -> 
   "FindFundamentalCycles[g] finds fundamental cycles of the graph g."|>, 
 <|"label" -> "FindGeneratingFunction", "type" -> "keyword", 
  "info" -> "                                                                 \
                                 th"|>, <|"label" -> "FindGeoLocation", 
  "type" -> "keyword", "info" -> "FindGeoLocation[] attempts to find the \
current geo location of your computer.FindGeoLocation[\"ip\"] g"|>, 
 <|"label" -> "FindGeometricConjectures", "type" -> "keyword", 
  "info" -> "FindGeometricConjectures[scene] finds conjectures that appear to \
hold for the GeometricScene object "|>, 
 <|"label" -> "FindGeometricTransform", "type" -> "keyword", 
  "info" -> "FindGeometricTransform[pts , pts ] finds a geometric \
transformation that aligns positions specified "|>, 
 <|"label" -> "FindGraphCommunities", "type" -> "keyword", 
  "info" -> "FindGraphCommunities[g] finds communities in the graph \
g.FindGraphCommunities[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules"|>, 
 <|"label" -> "FindGraphIsomorphism", "type" -> "keyword", 
  "info" -> "FindGraphIsomorphism[g , g ] finds an isomorphism that maps the \
graph g  to g  by renaming vertices."|>, <|"label" -> "FindGraphPartition", 
  "type" -> "keyword", "info" -> "FindGraphPartition[g] gives a partition of \
vertices of the graph g.FindGraphPartition[g, k] gives a "|>, 
 <|"label" -> "FindHamiltonianCycle", "type" -> "keyword", 
  "info" -> "FindHamiltonianCycle[g] finds a Hamiltonian cycle in the graph \
g.FindHamiltonianCycle[g, k] finds at"|>, <|"label" -> "FindHamiltonianPath", 
  "type" -> "keyword", "info" -> "FindHamiltonianPath[g] finds a Hamiltonian \
path in the graph g with the smallest total length.FindHa"|>, 
 <|"label" -> "FindHiddenMarkovStates", "type" -> "keyword", 
  "info" -> "FindHiddenMarkovStates[data, hmm] finds the most likely hidden \
states of the HiddenMarkovProcess hmm"|>, 
 <|"label" -> "FindIndependentEdgeSet", "type" -> "keyword", 
  "info" -> "FindIndependentEdgeSet[g] finds an independent edge set of the \
graph g with a maximum number of edge"|>, 
 <|"label" -> "FindIndependentVertexSet", "type" -> "keyword", 
  "info" -> "FindIndependentVertexSet[g] finds an independent vertex set of \
the graph g with a maximum number of "|>, <|"label" -> "FindInstance", 
  "type" -> "keyword", "info" -> "FindInstance[expr, vars] finds an instance \
of vars that makes the statement expr be True. FindInstan"|>, 
 <|"label" -> "FindIntegerNullVector", "type" -> "keyword", 
  "info" -> "FindIntegerNullVector[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] finds a \
list of integers a  such that a  x  + a  x  + \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\257 + a  "|>, 
 <|"label" -> "FindIsomorphicSubgraph", "type" -> "keyword", 
  "info" -> "FindIsomorphicSubgraph[g , g ] finds a subgraph of g  that is \
isomorphic to g .FindIsomorphicSubgrap"|>, <|"label" -> "FindKClan", 
  "type" -> "keyword", "info" -> "FindKClan[g, k] finds a largest k-clan in \
the graph g.FindKClan[g, k, n] finds a k-clan containing a"|>, 
 <|"label" -> "FindKClique", "type" -> "keyword", 
  "info" -> "FindKClique[g, k] finds a largest k-clique in the graph \
g.FindKClique[g, k, n] finds a k-clique cont"|>, 
 <|"label" -> "FindKClub", "type" -> "keyword", 
  "info" -> "FindKClub[g, k] finds a largest k-club in the graph g."|>, 
 <|"label" -> "FindKPlex", "type" -> "keyword", 
  "info" -> "FindKPlex[g, k] finds a largest k-plex in the graph \
g.FindKPlex[g, k, n] finds a k-plex containing a"|>, 
 <|"label" -> "FindLibrary", "type" -> "keyword", 
  "info" -> "FindLibrary[lib] finds a dynamic library that can be loaded by \
LibraryFunctionLoad."|>, <|"label" -> "FindLinearRecurrence", 
  "type" -> "keyword", "info" -> "FindLinearRecurrence[list] finds if \
possible the minimal linear recurrence that generates list.FindL"|>, 
 <|"label" -> "FindList", "type" -> "keyword", "info" -> "FindList[\"file\", \
\"text\"] gives a list of lines in the file that contain the specified \
string. FindLi"|>, <|"label" -> "FindMatchingColor", "type" -> "keyword", 
  "info" -> "FindMatchingColor[image, color] returns a color similar to the \
color that is present in image.FindMa"|>, <|"label" -> "FindMaximum", 
  "type" -> "keyword", "info" -> "FindMaximum[f, x] searches for a local \
maximum in f, starting from an automatically selected point.F"|>, 
 <|"label" -> "FindMaximumCut", "type" -> "keyword", 
  "info" -> "FindMaximumCut[g] gives the maximum cut of the graph g."|>, 
 <|"label" -> "FindMaximumFlow", "type" -> "keyword", 
  "info" -> "FindMaximumFlow[g, s, t] finds the maximum flow between source \
vertex s and target vertex t in a gra"|>, <|"label" -> "FindMaxValue", 
  "type" -> "keyword", "info" -> "FindMaxValue[f, x] gives the value at a \
local maximum of f.FindMaxValue[f, {x, x }] gives the value "|>, 
 <|"label" -> "FindMeshDefects", "type" -> "keyword", 
  "info" -> "FindMeshDefects[mreg] finds defects in the mesh region \
mreg.FindMeshDefects[mreg, {def , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds o"|>, 
 <|"label" -> "FindMinimum", "type" -> "keyword", 
  "info" -> "FindMinimum[f, x] searches for a local minimum in f, starting \
from an automatically selected point.F"|>, 
 <|"label" -> "FindMinimumCostFlow", "type" -> "keyword", 
  "info" -> "FindMinimumCostFlow[g, {sd , sd , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds the \
minimum cost flow in the graph g with sd , sd , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 ve"|>, 
 <|"label" -> "FindMinimumCut", "type" -> "keyword", 
  "info" -> "FindMinimumCut[g] gives the minimum cut of the graph \
g.FindMinimumCut[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w t"|>, 
 <|"label" -> "FindMinValue", "type" -> "keyword", 
  "info" -> "FindMinValue[f, x] gives the value at a local minimum of \
f.FindMinValue[f, {x, x }] gives the value "|>, 
 <|"label" -> "FindMoleculeSubstructure", "type" -> "keyword", 
  "info" -> "FindMoleculeSubstructure[mol, patt] finds a mapping between the \
atom indices in mol and an occurrenc"|>, <|"label" -> "FindPath", 
  "type" -> "keyword", "info" -> "FindPath[g, s, t] finds a path between \
vertex s and vertex t in the graph g.FindPath[g, s, t, k] fin"|>, 
 <|"label" -> "FindPeaks", "type" -> "keyword", 
  "info" -> "FindPeaks[list] gives positions and values of the detected peaks \
in list.FindPeaks[list, \[CapitalATilde]\217\[CapitalAHat]\203] finds pe"|>, 
 <|"label" -> "FindPermutation", "type" -> "keyword", 
  "info" -> "FindPermutation[expr] gives a permutation that produces expr by \
permuting Sort[expr].FindPermutation"|>, <|"label" -> "FindPlanarColoring", 
  "type" -> "keyword", "info" -> "FindPlanarColoring[g] finds a coloring with \
minimal size for the faces of the planar graph g.FindPla"|>, 
 <|"label" -> "FindPointProcessParameters", "type" -> "keyword", 
  "info" -> "FindPointProcessParameters[pdata, pproc] estimates the \
parameters of the point process pproc from po"|>, 
 <|"label" -> "FindPostmanTour", "type" -> "keyword", 
  "info" -> "FindPostmanTour[g] finds a Chinese postman tour in the graph g \
of minimal length.FindPostmanTour[g, "|>, 
 <|"label" -> "FindProcessParameters", "type" -> "keyword", 
  "info" -> "FindProcessParameters[data, proc] finds the parameter estimates \
for the process proc from data.FindP"|>, <|"label" -> "FindRegionTransform", 
  "type" -> "keyword", "info" -> "FindRegionTransform[reg , reg ] gives the \
transformation function that maps the region reg  to the r"|>, 
 <|"label" -> "FindRepeat", "type" -> "keyword", 
  "info" -> "FindRepeat[list] finds the minimal sublist or subarray that \
repeats to give list.FindRepeat[list, n]"|>, <|"label" -> "FindRoot", 
  "type" -> "keyword", "info" -> "FindRoot[f, {x, x }] searches for a \
numerical root of f, starting from the point x = x .FindRoot[lhs"|>, 
 <|"label" -> "FindSequenceFunction", "type" -> "keyword", 
  "info" -> "FindSequenceFunction[{a , a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] attempts to \
find a simple function that yields the sequence a "|>, 
 <|"label" -> "FindShortestPath", "type" -> "keyword", 
  "info" -> "FindShortestPath[g, s, t] finds the shortest path from source \
vertex s to target vertex t in the gra"|>, <|"label" -> "FindShortestTour", 
  "type" -> "keyword", "info" -> "FindShortestTour[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] attempts to \
find an ordering of the v  that minimizes the total distan"|>, 
 <|"label" -> "FindSpanningTree", "type" -> "keyword", 
  "info" -> "FindSpanningTree[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, v }] finds a \
spanning tree that minimizes the total distance between th"|>, 
 <|"label" -> "FindSubgraphIsomorphism", "type" -> "keyword", 
  "info" -> "FindSubgraphIsomorphism[g , g ] finds a subgraph isomorphism \
that maps the graph g  to a subgraph of"|>, <|"label" -> "FindTextualAnswer", 
  "type" -> "keyword", "info" -> "FindTextualAnswer[text, \"question\"] gives \
the substring of text that best appears to answer question"|>, 
 <|"label" -> "FindThreshold", "type" -> "keyword", 
  "info" -> "FindThreshold[image] finds a global threshold value that \
partitions the intensity values in image in"|>, 
 <|"label" -> "FindTransientRepeat", "type" -> "keyword", 
  "info" -> "FindTransientRepeat[list, n] returns a pair of lists {transient, \
repeat} where the elements of repea"|>, <|"label" -> "FindVertexColoring", 
  "type" -> "keyword", "info" -> "FindVertexColoring[g] finds a coloring with \
minimal size for the vertices in the graph g. FindVertex"|>, 
 <|"label" -> "FindVertexCover", "type" -> "keyword", 
  "info" -> "FindVertexCover[g] finds a vertex cover of the graph g with a \
minimum number of vertices.FindVertexC"|>, <|"label" -> "FindVertexCut", 
  "type" -> "keyword", "info" -> "FindVertexCut[g] finds a smallest vertex \
cut of the graph g.FindVertexCut[g, s, t] finds a smallest "|>, 
 <|"label" -> "FindVertexIndependentPaths", "type" -> "keyword", 
  "info" -> "FindVertexIndependentPaths[g, s, t, k] finds at most k \
vertex-independent paths from vertex s to ver"|>, 
 <|"label" -> "FinishDynamic", "type" -> "keyword", 
  "info" -> "FinishDynamic[] finishes updating and displaying all currently \
visible Dynamic objects. "|>, <|"label" -> "FiniteAbelianGroupCount", 
  "type" -> "keyword", "info" -> "FiniteAbelianGroupCount[n] gives the number \
of finite Abelian groups of order n."|>, <|"label" -> "FiniteGroupCount", 
  "type" -> "keyword", "info" -> 
   "FiniteGroupCount[n] gives the number of finite groups of order n."|>, 
 <|"label" -> "FiniteGroupData", "type" -> "keyword", 
  "info" -> "FiniteGroupData[name, \"property\"] gives the value of the \
specified property for the finite group spe"|>, 
 <|"label" -> "First", "type" -> "keyword", "info" -> "First[expr] gives the \
first element in expr. First[expr, def] gives the first element if it exists, \
"|>, <|"label" -> "FirstCase", "type" -> "keyword", 
  "info" -> "FirstCase[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, pattern] gives \
the first e  to match pattern, or Missing[\"NotFound\"] if none "|>, 
 <|"label" -> "FirstPassageTimeDistribution", "type" -> "keyword", 
  "info" -> "FirstPassageTimeDistribution[mproc, f] represents the \
distribution of times for the Markov process m"|>, 
 <|"label" -> "FirstPosition", "type" -> "keyword", 
  "info" -> "FirstPosition[expr, pattern] gives the position of the first \
element in expr that matches pattern, o"|>, <|"label" -> "FischerGroupFi22", 
  "type" -> "keyword", "info" -> "FischerGroupFi22[] represents the sporadic \
simple Fischer group Fi  .\n                              "|>, 
 <|"label" -> "FischerGroupFi23", "type" -> "keyword", 
  "info" -> "FischerGroupFi23[] represents the sporadic simple Fischer group \
Fi  .\n                              "|>, 
 <|"label" -> "FischerGroupFi24Prime", "type" -> "keyword", 
  "info" -> "                                                                 \
      \[CapitalATilde]\[Cent]\[CapitalAHat]\200b2\nFischerGroupFi24Prime[] \
rep"|>, <|"label" -> "FisherHypergeometricDistribution", "type" -> "keyword", 
  "info" -> "FisherHypergeometricDistribution[n, n    , n   , w] represents a \
Fisher noncentral hypergeometric di"|>, <|"label" -> "FisherZDistribution", 
  "type" -> "keyword", "info" -> "FisherZDistribution[n, m] represents a \
Fisher z distribution with n numerator and m denominator degr"|>, 
 <|"label" -> "Fit", "type" -> "keyword", "info" -> "Fit[data, {f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f }, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds a fit a  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\201\[CapitalAHat]\[Cent] f  + \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 + a  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\201\[CapitalAHat]\[Cent] f  to a list \
of data for functions "|>, <|"label" -> "FitRegularization", 
  "type" -> "keyword", "info" -> "FitRegularization is an option for Fit and \
FindFit that specifies a regularization for fitting a mod"|>, 
 <|"label" -> "FittedModel", "type" -> "keyword", 
  "info" -> "FittedModel[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents the symbolic fitted model obtained from \
functions like LinearModelFit."|>, <|"label" -> "FixedOrder", 
  "type" -> "keyword", "info" -> "FixedOrder[p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is a grammar \
rules pattern object that represents a sequence of elements match"|>, 
 <|"label" -> "FixedPoint", "type" -> "keyword", 
  "info" -> "FixedPoint[f, expr] starts with expr, then applies f repeatedly \
until the result no longer changes. "|>, <|"label" -> "FixedPointList", 
  "type" -> "keyword", "info" -> "FixedPointList[f, expr] generates a list \
giving the results of applying f repeatedly, starting with "|>, 
 <|"label" -> "Flat", "type" -> "keyword", "info" -> "Flat is an attribute \
that can be assigned to a symbol f to indicate that all expressions involving \
n"|>, <|"label" -> "Flatten", "type" -> "keyword", 
  "info" -> "Flatten[list] flattens out nested lists. Flatten[list, n] \
flattens to level n. Flatten[list, n, h] f"|>, 
 <|"label" -> "FlattenAt", "type" -> "keyword", 
  "info" -> "                                                                \
th\nFlattenAt[list, n] flattens out a"|>, <|"label" -> "FlattenLayer", 
  "type" -> "keyword", "info" -> "FlattenLayer[] represents a net layer that \
flattens any input array into a vector.FlattenLayer[n] re"|>, 
 <|"label" -> "FlatTopWindow", "type" -> "keyword", 
  "info" -> 
   "FlatTopWindow[x] represents an exact flat top window function of x."|>, 
 <|"label" -> "FlightData", "type" -> "keyword", 
  "info" -> "FlightData[spec, options] returns a subset of properties for a \
flight or selection of flights with s"|>, <|"label" -> "FlipView", 
  "type" -> "keyword", "info" -> "FlipView[{expr , expr }] represents an \
object which flips between displaying expr  and expr  each ti"|>, 
 <|"label" -> "Floor", "type" -> "keyword", "info" -> "Floor[x] gives the \
greatest integer less than or equal to x. Floor[x, a] gives the greatest \
multiple"|>, <|"label" -> "FlowPolynomial", "type" -> "keyword", 
  "info" -> "FlowPolynomial[g, k] gives the flow polynomial of the graph \
g.FlowPolynomial[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] uses rul"|>, 
 <|"label" -> "Fold", "type" -> "keyword", "info" -> "Fold[f, x, list] gives \
the last element of FoldList[f, x, list].Fold[f, list] is equivalent to \
Fold["|>, <|"label" -> "FoldList", "type" -> "keyword", 
  "info" -> "FoldList[f, x, {a, b, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives {x, f[x, \
a], f[f[x, a], b], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}. FoldList[f, {a, \
b, c, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives {a, \
"|>, <|"label" -> "FoldPair", "type" -> "keyword", 
  "info" -> "FoldPair[f, y , list] gives the last element of FoldPairList[f, \
y , list].FoldPair[f, y , list, g] g"|>, <|"label" -> "FoldPairList", 
  "type" -> "keyword", "info" -> "FoldPairList[f, y , {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the list \
of successive x  obtained by applying f to pairs of "|>, 
 <|"label" -> "FoldWhile", "type" -> "keyword", 
  "info" -> "FoldWhile[f, x, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, test] returns \
the first expression \
f[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 f[f[x, a ], a ] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a ] to which "|>\
, <|"label" -> "FoldWhileList", "type" -> "keyword", 
  "info" -> "FoldWhileList[f, x, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, test] returns \
{x, f[x, a ], f[f[x, a ], a ], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, repeatedly \
applyin"|>, <|"label" -> "FollowRedirects", "type" -> "keyword", 
  "info" -> "FollowRedirects is an option for URLRead and related functions \
that specifies whether to follow HTTP"|>, <|"label" -> "FontColor", 
  "type" -> "keyword", "info" -> "FontColor is an option for Style, Cell, and \
related constructs that specifies the default color in w"|>, 
 <|"label" -> "FontFamily", "type" -> "keyword", 
  "info" -> "FontFamily is an option for Style and Cell that specifies the \
font family in which text should be re"|>, <|"label" -> "FontSize", 
  "type" -> "keyword", "info" -> "FontSize is an option for Style and Cell \
that specifies the default size in printer's points of the "|>, 
 <|"label" -> "FontSlant", "type" -> "keyword", 
  "info" -> "FontSlant is an option for Style, Cell, and related constructs \
that specifies how slanted characters"|>, <|"label" -> "FontSubstitutions", 
  "type" -> "keyword", "info" -> "FontSubstitutions is a global option that \
gives a list of substitutions to try for font family names"|>, 
 <|"label" -> "FontTracking", "type" -> "keyword", 
  "info" -> "FontTracking is an option for Style and Cell that specifies how \
condensed or expanded you want the f"|>, <|"label" -> "FontVariations", 
  "type" -> "keyword", "info" -> "FontVariations is an option for Style, \
Cell, and related constructs that specifies what font variati"|>, 
 <|"label" -> "FontWeight", "type" -> "keyword", 
  "info" -> "FontWeight is an option for Style, Cell, and related constructs \
that specifies how heavy the charact"|>, <|"label" -> "For", 
  "type" -> "keyword", "info" -> "For[start, test, incr, body] executes \
start, then repeatedly evaluates body and incr until test fail"|>, 
 <|"label" -> "ForAll", "type" -> "keyword", "info" -> "ForAll[x, expr] \
represents the statement that expr is True for all values of x. ForAll[x, \
cond, expr"|>, <|"label" -> "ForceVersionInstall", "type" -> "keyword", 
  "info" -> "ForceVersionInstall is an option to PacletInstall and \
PacletInstallSubmit that specifies whether an "|>, 
 <|"label" -> "Format", "type" -> "keyword", "info" -> "Format[expr] prints \
as the formatted form of expr. Assigning values to Format[expr] defines print \
fo"|>, <|"label" -> "FormatType", "type" -> "keyword", 
  "info" -> "FormatType is an option for output streams, graphics, and \
functions such as Text that specifies the "|>, 
 <|"label" -> "FormatValues", "type" -> "keyword", 
  "info" -> "FormatValues[f] gives a list of transformation rules \
corresponding to all printing formats (values f"|>, 
 <|"label" -> "FormFunction", "type" -> "keyword", 
  "info" -> "FormFunction[formspec, func] represents an active form that, \
when submitted, applies func to the val"|>, 
 <|"label" -> "FormLayoutFunction", "type" -> "keyword", 
  "info" -> "FormLayoutFunction is an option for FormObject and FormFunction \
that can be used to specify how to l"|>, <|"label" -> "FormObject", 
  "type" -> "keyword", "info" -> "FormObject[{name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] type , name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] type , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
form with fields having names name  that "|>, 
 <|"label" -> "FormPage", "type" -> "keyword", "info" -> "FormPage[formspec, \
func] represents an active page that takes input from a form and generates \
result"|>, <|"label" -> "FormProtectionMethod", "type" -> "keyword", 
  "info" -> "FormProtectionMethod is an option for form generation functions \
that specifies what method to use fo"|>, <|"label" -> "FormTheme", 
  "type" -> "keyword", "info" -> "FormTheme is an option for FormObject and \
related functions that specifies an overall theme for a fo"|>, 
 <|"label" -> "FormulaData", "type" -> "keyword", 
  "info" -> "FormulaData[name] gives the equations for the formula \
name.FormulaData[name, {var  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] quantity , var "|>\
, <|"label" -> "FormulaLookup", "type" -> "keyword", 
  "info" -> "FormulaLookup[\"query\"] gives a list of the full names of \
formulas whose names are consistent with \"q"|>, 
 <|"label" -> "FortranForm", "type" -> "keyword", 
  "info" -> "FortranForm[expr] prints as a Fortran language version of expr. \
"|>, <|"label" -> "Forward", "type" -> "keyword", 
  "info" -> "Forward is a symbol that represents the forward direction for \
purposes of motion and animation."|>, <|"label" -> "ForwardBackward", 
  "type" -> "keyword", "info" -> "ForwardBackward is a symbol that represents \
alternate forward and backward motion or animation."|>, 
 <|"label" -> "ForwardCloudCredentials", "type" -> "keyword", 
  "info" -> "ForwardCloudCredentials is an option for remote evaluation and \
submission functions that specifies w"|>, <|"label" -> "Fourier", 
  "type" -> "keyword", "info" -> "Fourier[list] finds the discrete Fourier \
transform of a list of complex numbers.Fourier[list, {p , p"|>, 
 <|"label" -> "FourierCoefficient", "type" -> "keyword", 
  "info" -> "                                           \
th\nFourierCoefficient[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    coeffici"|>, 
 <|"label" -> "FourierCosCoefficient", "type" -> "keyword", 
  "info" -> "                                              \
th\nFourierCosCoefficient[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    co"|>, 
 <|"label" -> "FourierCosSeries", "type" -> "keyword", 
  "info" -> "                                         \
th\nFourierCosSeries[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   -order Fourie"|>, 
 <|"label" -> "FourierCosTransform", "type" -> "keyword", 
  "info" -> "FourierCosTransform[expr, t, \
\[CapitalATilde]\217\[CapitalAHat]\211] gives the symbolic Fourier cosine \
transform of expr. FourierCosTrans"|>, <|"label" -> "FourierDCT", 
  "type" -> "keyword", "info" -> "FourierDCT[list] finds the Fourier discrete \
cosine transform of a list of real numbers.FourierDCT[li"|>, 
 <|"label" -> "FourierDCTFilter", "type" -> "keyword", 
  "info" -> "FourierDCTFilter[image, t] reduces noise in image by locally \
thresholding the discrete cosine transf"|>, <|"label" -> "FourierDCTMatrix", 
  "type" -> "keyword", "info" -> "FourierDCTMatrix[n] returns an \
n\[CapitalATilde]\203\[CapitalAHat]\227n discrete cosine transform matrix of \
type 2.FourierDCTMatrix[n, m]"|>, <|"label" -> "FourierDST", 
  "type" -> "keyword", "info" -> "FourierDST[list] finds the Fourier discrete \
sine transform of a list of real numbers.FourierDST[list"|>, 
 <|"label" -> "FourierDSTMatrix", "type" -> "keyword", 
  "info" -> "FourierDSTMatrix[n] returns an \
n\[CapitalATilde]\203\[CapitalAHat]\227n discrete sine transform matrix of \
type 2.FourierDSTMatrix[n, m] r"|>, <|"label" -> "FourierMatrix", 
  "type" -> "keyword", "info" -> "FourierMatrix[n] returns an \
n\[CapitalATilde]\203\[CapitalAHat]\227n Fourier matrix."|>, 
 <|"label" -> "FourierParameters", "type" -> "keyword", 
  "info" -> "FourierParameters is an option to Fourier and related functions \
that specifies the conventions to us"|>, 
 <|"label" -> "FourierSequenceTransform", "type" -> "keyword", 
  "info" -> "FourierSequenceTransform[expr, n, \
\[CapitalATilde]\217\[CapitalAHat]\211] gives the Fourier sequence transform \
of expr.FourierSequenceTra"|>, <|"label" -> "FourierSeries", 
  "type" -> "keyword", "info" -> "                                      \
th\nFourierSeries[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   -order Fourier seri"|>\
, <|"label" -> "FourierSinCoefficient", "type" -> "keyword", 
  "info" -> "                                              \
th\nFourierSinCoefficient[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    co"|>, 
 <|"label" -> "FourierSinSeries", "type" -> "keyword", 
  "info" -> "                                         \
th\nFourierSinSeries[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   -order Fourie"|>, 
 <|"label" -> "FourierSinTransform", "type" -> "keyword", 
  "info" -> "FourierSinTransform[expr, t, \
\[CapitalATilde]\217\[CapitalAHat]\211] gives the symbolic Fourier sine \
transform of expr. FourierSinTransfo"|>, <|"label" -> "FourierTransform", 
  "type" -> "keyword", "info" -> "FourierTransform[expr, t, \
\[CapitalATilde]\217\[CapitalAHat]\211] gives the symbolic Fourier transform \
of expr. FourierTransform[expr, {t"|>, <|"label" -> "FourierTrigSeries", 
  "type" -> "keyword", "info" -> "                                          \
th\nFourierTrigSeries[expr, t, n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   -order Four"|>, 
 <|"label" -> "FoxHReduce", "type" -> "keyword", 
  "info" -> "FoxHReduce[expr, x] attempts to reduce expr to a single FoxH \
object as a function of x."|>, 
 <|"label" -> "FractionalBrownianMotionProcess", "type" -> "keyword", 
  "info" -> "FractionalBrownianMotionProcess[\[CapitalATilde]\216\
\[CapitalAHat]\274, \[CapitalATilde]\217\[CapitalAHat]\203, h] represents \
fractional Brownian motion process with drift \
\[CapitalATilde]\216\[CapitalAHat]\274,"|>, 
 <|"label" -> "FractionalGaussianNoiseProcess", "type" -> "keyword", 
  "info" -> "FractionalGaussianNoiseProcess[\[CapitalATilde]\216\
\[CapitalAHat]\274, \[CapitalATilde]\217\[CapitalAHat]\203, h] represents a \
fractional Gaussian noise process with drift \
\[CapitalATilde]\216\[CapitalAHat]\274,"|>, <|"label" -> "FractionalPart", 
  "type" -> "keyword", "info" -> 
   "FractionalPart[x] gives the fractional part of x. "|>, 
 <|"label" -> "FractionLine", "type" -> "keyword", 
  "info" -> "FractionLine is an option for fractions that specifies the \
thickness of the line separating the nume"|>, 
 <|"label" -> "Frame", "type" -> "keyword", "info" -> "Frame is an option for \
Graphics, Grid, and other constructs that specifies whether to include a \
fram"|>, <|"label" -> "Framed", "type" -> "keyword", 
  "info" -> "Framed[expr] displays a framed version of expr. "|>, 
 <|"label" -> "FrameLabel", "type" -> "keyword", 
  "info" -> "FrameLabel is an option for Graphics, Manipulate, and related \
functions that specifies labels to be "|>, <|"label" -> "FrameListVideo", 
  "type" -> "keyword", "info" -> "FrameListVideo[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
video containing frames image , image , etc.\n       "|>, 
 <|"label" -> "FrameMargins", "type" -> "keyword", 
  "info" -> "FrameMargins is an option for objects that can be displayed with \
frames which specifies the absolute"|>, <|"label" -> "FrameRate", 
  "type" -> "keyword", "info" -> 
   "FrameRate is an option to specify the number of frames per second. "|>, 
 <|"label" -> "FrameStyle", "type" -> "keyword", 
  "info" -> "FrameStyle is an option for Graphics, Grid, and other constructs \
that specifies the style in which t"|>, <|"label" -> "FrameTicks", 
  "type" -> "keyword", "info" -> "FrameTicks is an option for 2D graphics \
functions that specifies tick marks for the edges of a frame"|>, 
 <|"label" -> "FrameTicksStyle", "type" -> "keyword", 
  "info" -> "FrameTicksStyle is an option for 2D graphics functions that \
specifies how frame ticks should be rend"|>, 
 <|"label" -> "FRatioDistribution", "type" -> "keyword", 
  "info" -> "FRatioDistribution[n, m] represents an F-ratio distribution with \
n numerator and m denominator degre"|>, <|"label" -> "FrechetDistribution", 
  "type" -> "keyword", "info" -> "FrechetDistribution[\[CapitalATilde]\216\\[\
PlusMinus], \[CapitalATilde]\216b2] represents the \
Fr\[CapitalATilde]\203\[CapitalAHat]\[Copyright]chet distribution with shape \
parameter \[CapitalATilde]\216\\[PlusMinus] and scale param"|>, 
 <|"label" -> "FreeQ", "type" -> "keyword", "info" -> "FreeQ[expr, form] \
yields True if no subexpression in expr matches form, and yields False \
otherwise. "|>, <|"label" -> "FrequencySamplingFilterKernel", 
  "type" -> "keyword", "info" -> "FrequencySamplingFilterKernel[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }] creates a \
finite impulse response (FIR) filter kernel usi"|>, 
 <|"label" -> "FresnelC", "type" -> "keyword", 
  "info" -> "FresnelC[z] gives the Fresnel integral C(z). "|>, 
 <|"label" -> "FresnelF", "type" -> "keyword", 
  "info" -> "FresnelF[z] gives the Fresnel auxiliary function F(z)."|>, 
 <|"label" -> "FresnelG", "type" -> "keyword", 
  "info" -> "FresnelG[z] gives the Fresnel auxiliary function G(z)."|>, 
 <|"label" -> "FresnelS", "type" -> "keyword", 
  "info" -> "FresnelS[z] gives the Fresnel integral S(z). "|>, 
 <|"label" -> "Friday", "type" -> "keyword", 
  "info" -> "Friday is a day of the week."|>, <|"label" -> "FrobeniusNumber", 
  "type" -> "keyword", "info" -> "FrobeniusNumber[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }] gives the \
Frobenius number of a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a .\n            \
      1      n    "|>, <|"label" -> "FrobeniusSolve", "type" -> "keyword", 
  "info" -> "FrobeniusSolve[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }, b] gives a \
list of all solutions of the Frobenius equation a  x  + \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 + a"|>, 
 <|"label" -> "FromAbsoluteTime", "type" -> "keyword", 
  "info" -> "FromAbsoluteTime[time] gives a date object corresponding to an \
absolute time specification as given "|>, <|"label" -> "FromCharacterCode", 
  "type" -> "keyword", "info" -> "FromCharacterCode[n] gives a string \
consisting of the character with integer code n. FromCharacterCo"|>, 
 <|"label" -> "FromCoefficientRules", "type" -> "keyword", 
  "info" -> "FromCoefficientRules[list, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] constructs a \
polynomial from a list of rules for exponent ve"|>, 
 <|"label" -> "FromContinuedFraction", "type" -> "keyword", 
  "info" -> "FromContinuedFraction[list] reconstructs a number from the list \
of its continued fraction terms. "|>, <|"label" -> "FromDate", 
  "type" -> "keyword", "info" -> "FromDate[date] converts a date of the form \
{y, m, d, h, m, s} to an absolute number of seconds since"|>, 
 <|"label" -> "FromDateString", "type" -> "keyword", 
  "info" -> "FromDateString[\"string\"] gives a date object corresponding to \
the date represented by \"string\".FromD"|>, <|"label" -> "FromDigits", 
  "type" -> "keyword", "info" -> "FromDigits[list] constructs an integer from \
the list of its decimal digits. FromDigits[list, b] take"|>, 
 <|"label" -> "FromDMS", "type" -> "keyword", "info" -> "FromDMS[{d, m, s}] \
converts from degrees, minutes, and seconds to decimal degrees. \
FromDMS[\"dms\"] co"|>, <|"label" -> "FromEntity", "type" -> "keyword", 
  "info" -> "FromEntity[entity] returns a Wolfram Language object \
corresponding to an entity."|>, <|"label" -> "FromJulianDate", 
  "type" -> "keyword", "info" -> "FromJulianDate[jd] gives a date object \
corresponding to the Julian date jd.FromJulianDate[\"type\", jd"|>, 
 <|"label" -> "FromLetterNumber", "type" -> "keyword", 
  "info" -> "FromLetterNumber[n] gives the lowercase letter at position n in \
the English alphabet.FromLetterNumbe"|>, <|"label" -> "FromPolarCoordinates", 
  "type" -> "keyword", "info" -> "FromPolarCoordinates[{r, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]}] gives the {x, y} Cartesian \
coordinates corresponding to the polar coord"|>, 
 <|"label" -> "FromRomanNumeral", "type" -> "keyword", 
  "info" -> "FromRomanNumeral[\"string\"] gives the integer corresponding to \
the Roman numeral \"string\". "|>, <|"label" -> "FromSphericalCoordinates", 
  "type" -> "keyword", "info" -> "FromSphericalCoordinates[{r, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
\[CapitalATilde]\217\[CapitalAHat]\225}] gives the {x, y, z} Cartesian \
coordinates corresponding to the s"|>, <|"label" -> "FromUnixTime", 
  "type" -> "keyword", "info" -> "FromUnixTime[time] gives a date object \
corresponding to a UnixTime specification."|>, 
 <|"label" -> "Full", "type" -> "keyword", "info" -> "Full is a setting used \
for certain options, typically indicating that a full range of values should \
"|>, <|"label" -> "FullAxes", "type" -> "keyword", 
  "info" -> 
   "FullAxes[graphics] returns the axes options of a graphics object."|>, 
 <|"label" -> "FullDefinition", "type" -> "keyword", 
  "info" -> "FullDefinition[symbol] prints as the definitions given for \
symbol, and all symbols on which these de"|>, 
 <|"label" -> "FullForm", "type" -> "keyword", 
  "info" -> 
   "FullForm[expr] prints as the full form of expr, with no special syntax. "\
|>, <|"label" -> "FullGraphics", "type" -> "keyword", 
  "info" -> "FullGraphics[g] takes a graphics object, and generates a new one \
in which objects specified by graph"|>, 
 <|"label" -> "FullInformationOutputRegulator", "type" -> "keyword", 
  "info" -> "FullInformationOutputRegulator[sys, rspec] gives the full state \
information output regulator for sys"|>, <|"label" -> "FullRegion", 
  "type" -> "keyword", "info" -> "                                          \
n\nFullRegion[n] represents the full region \
\[CapitalATilde]\257\[CapitalAHat]\236\\[Micro] ."|>, 
 <|"label" -> "FullSimplify", "type" -> "keyword", 
  "info" -> "FullSimplify[expr] tries a wide range of transformations on expr \
involving elementary and special fu"|>, <|"label" -> "Function", 
  "type" -> "keyword", "info" -> "body & or Function[body] is a pure (or \
\"anonymous\") function. The formal parameters are # (or #1), #"|>, 
 <|"label" -> "FunctionAnalytic", "type" -> "keyword", 
  "info" -> "FunctionAnalytic[f, x] tests whether f(x) is an analytic \
function for x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
Reals.FunctionAnalytic[f, "|>, <|"label" -> "FunctionBijective", 
  "type" -> "keyword", "info" -> "FunctionBijective[f, x] tests whether f(x) \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 y has exactly one \
solution x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals \
for each y \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals"\
|>, <|"label" -> "FunctionCompile", "type" -> "keyword", 
  "info" -> "FunctionCompile[f] generates a compiled code function from a \
pure function.FunctionCompile[{f , f , "|>, 
 <|"label" -> "FunctionCompileExport", "type" -> "keyword", 
  "info" -> "FunctionCompileExport[\"file.ext\", fspec] exports a compiled \
version of functions fspec in the format"|>, 
 <|"label" -> "FunctionCompileExportByteArray", "type" -> "keyword", 
  "info" -> "FunctionCompileExportByteArray[fspec] gives a byte array of \
binary LLVM code obtained by compiling t"|>, 
 <|"label" -> "FunctionCompileExportLibrary", "type" -> "keyword", 
  "info" -> "FunctionCompileExportLibrary[file, fspec] exports a compiled \
version of function specification fspec"|>, 
 <|"label" -> "FunctionCompileExportString", "type" -> "keyword", 
  "info" -> "FunctionCompileExportString[fspec] gives a string of textual \
LLVM code obtained by compiling the fun"|>, 
 <|"label" -> "FunctionContinuous", "type" -> "keyword", 
  "info" -> "FunctionContinuous[f, x] tests whether f(x) is a real-valued \
continuous function for x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals.Funct"|>, 
 <|"label" -> "FunctionConvexity", "type" -> "keyword", 
  "info" -> "FunctionConvexity[f, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds the \
convexity of the function f with variables x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 ove"|>, 
 <|"label" -> "FunctionDeclaration", "type" -> "keyword", 
  "info" -> "FunctionDeclaration[name, typedfun] declares name to be a typed \
function suitable for use in a compi"|>, 
 <|"label" -> "FunctionDiscontinuities", "type" -> "keyword", 
  "info" -> "FunctionDiscontinuities[f, x] finds the discontinuities of f(x) \
for x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals. \
FunctionDiscontinuiti"|>, <|"label" -> "FunctionDomain", "type" -> "keyword", 
  "info" -> "FunctionDomain[f, x] finds the largest domain of definition of \
the real function f of the variable x"|>, <|"label" -> "FunctionExpand", 
  "type" -> "keyword", "info" -> "FunctionExpand[expr] tries to expand out \
special and certain other functions in expr, when possible "|>, 
 <|"label" -> "FunctionInjective", "type" -> "keyword", 
  "info" -> "FunctionInjective[f, x] tests whether f(x) \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 y has at most one \
solution x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals \
for each y.Functio"|>, <|"label" -> "FunctionInterpolation", 
  "type" -> "keyword", "info" -> "FunctionInterpolation[expr, {x, x   , x   \
}] evaluates expr with x running from x    to x    and con"|>, 
 <|"label" -> "FunctionLayer", "type" -> "keyword", 
  "info" -> "FunctionLayer[f] represents a net layer that applies function f \
to its input."|>, <|"label" -> "FunctionMeromorphic", "type" -> "keyword", 
  "info" -> "FunctionMeromorphic[f, x] test whether f(x) is a meromorphic \
function of x.FunctionMeromorphic[f, {x"|>, 
 <|"label" -> "FunctionMonotonicity", "type" -> "keyword", 
  "info" -> "FunctionMonotonicity[f, x] finds the monotonicity of the \
function f with the variable x over the rea"|>, 
 <|"label" -> "FunctionPeriod", "type" -> "keyword", 
  "info" -> "FunctionPeriod[f, x] gives a period p of the function f over the \
reals such that f(x + p) \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 f(x).Fun"|>, 
 <|"label" -> "FunctionPoles", "type" -> "keyword", 
  "info" -> "FunctionPoles[f, x] finds the poles of the meromorphic function \
f with the variable x.FunctionPoles["|>, <|"label" -> "FunctionRange", 
  "type" -> "keyword", "info" -> "FunctionRange[f, x, y] finds the range of \
the real function f of the variable x returning the result"|>, 
 <|"label" -> "FunctionSign", "type" -> "keyword", 
  "info" -> "FunctionSign[f, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds the real \
sign of the function f with variables x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 over the"|>, 
 <|"label" -> "FunctionSingularities", "type" -> "keyword", 
  "info" -> "FunctionSingularities[f, x] finds the singularities of f(x) for \
x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals. \
FunctionSingularities[f, "|>, <|"label" -> "FunctionSpace", 
  "type" -> "keyword", "info" -> "FunctionSpace is an option for \
FindSequenceFunction and related functions that specifies the space o"|>, 
 <|"label" -> "FunctionSurjective", "type" -> "keyword", 
  "info" -> "FunctionSurjective[f, x] tests whether f(x) \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 y has at least one \
solution x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\257\[CapitalAHat]\236\\[Micro] for each y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals.F"|>, 
 <|"label" -> "FussellVeselyImportance", "type" -> "keyword", 
  "info" -> "FussellVeselyImportance[rdist, t] gives the \
Fussell\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Vesely \
importances for all components in the Rel"|>, <|"label" -> "GaborFilter", 
  "type" -> "keyword", "info" -> "GaborFilter[data, r, k] filters data by \
convolving with a Gabor kernel of pixel radius r and wave ve"|>, 
 <|"label" -> "GaborWavelet", "type" -> "keyword", 
  "info" -> "GaborWavelet[] represents a Gabor wavelet of frequency \
6.GaborWavelet[w] represents a Gabor wavelet "|>, 
 <|"label" -> "GainMargins", "type" -> "keyword", 
  "info" -> "GainMargins[lsys] gives the gain margins of the linear \
time-invariant system lsys."|>, <|"label" -> "GainPhaseMargins", 
  "type" -> "keyword", "info" -> "GainPhaseMargins[lsys] gives the gain and \
phase margins of the linear time-invariant system lsys."|>, 
 <|"label" -> "GalaxyData", "type" -> "keyword", 
  "info" -> "GalaxyData[entity, property] gives the value of the specified \
property for the galaxy entity.GalaxyD"|>, <|"label" -> "GalleryView", 
  "type" -> "keyword", "info" -> "GalleryView[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
object in which the expr  are displayed in a browsable "|>, 
 <|"label" -> "Gamma", "type" -> "keyword", "info" -> "Gamma[z] is the Euler \
gamma function \[CapitalATilde]\216\[CapitalAHat]\223(z). Gamma[a, z] is the \
incomplete gamma function \[CapitalATilde]\216\[CapitalAHat]\223(a, z). Gam"|>\
, <|"label" -> "GammaDistribution", "type" -> "keyword", 
  "info" -> "GammaDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents a gamma distribution with shape parameter \
\[CapitalATilde]\216\\[PlusMinus] and scale parameter \[CapitalATilde]\216b2"\
|>, <|"label" -> "GammaRegularized", "type" -> "keyword", 
  "info" -> "GammaRegularized[a, z] is the regularized incomplete gamma \
function Q(a, z). "|>, <|"label" -> "GapPenalty", "type" -> "keyword", 
  "info" -> "GapPenalty is an option for SequenceAlignment and related \
functions that gives the additional cost a"|>, 
 <|"label" -> "GARCHProcess", "type" -> "keyword", 
  "info" -> "GARCHProcess[\[CapitalATilde]\216\[CapitalAHat]\272, \
{\[CapitalATilde]\216\\[PlusMinus] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus] }, {\[CapitalATilde]\216b2 , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216b2 }] represents a generalized autoregressive \
conditionally hete"|>, <|"label" -> "GatedRecurrentLayer", 
  "type" -> "keyword", "info" -> "GatedRecurrentLayer[n] represents a \
trainable recurrent layer that takes a sequence of vectors and p"|>, 
 <|"label" -> "Gather", "type" -> "keyword", "info" -> "Gather[list] gathers \
the elements of list into sublists of identical elements.Gather[list, test] \
app"|>, <|"label" -> "GatherBy", "type" -> "keyword", 
  "info" -> "GatherBy[list, f] gathers into sublists each set of elements in \
list that gives the same value when "|>, 
 <|"label" -> "GaugeFaceElementFunction", "type" -> "keyword", 
  "info" -> "GaugeFaceElementFunction is an option for gauge functions that \
gives a function to use to generate t"|>, <|"label" -> "GaugeFaceStyle", 
  "type" -> "keyword", "info" -> "GaugeFaceStyle is an option for gauge \
functions that specifies the style in which the face is to be "|>, 
 <|"label" -> "GaugeFrameElementFunction", "type" -> "keyword", 
  "info" -> "GaugeFrameElementFunction is an option for gauge functions that \
gives a function to generate the pri"|>, <|"label" -> "GaugeFrameSize", 
  "type" -> "keyword", "info" -> "GaugeFrameSize is an option for gauge \
functions that controls the size of the frame around the gauge"|>, 
 <|"label" -> "GaugeFrameStyle", "type" -> "keyword", 
  "info" -> "GaugeFrameStyle is an option for gauge functions that specifies \
the style in which the frame is to b"|>, <|"label" -> "GaugeLabels", 
  "type" -> "keyword", "info" -> "GaugeLabels is an option for gauge \
functions that specifies labels to be placed on the gauge."|>, 
 <|"label" -> "GaugeMarkers", "type" -> "keyword", 
  "info" -> "GaugeMarkers is an option for gauge functions that specifies \
what markers to draw to mark the values"|>, <|"label" -> "GaugeStyle", 
  "type" -> "keyword", "info" -> "GaugeStyle is an option for gauge functions \
that specifies styles in which the markers are to be dra"|>, 
 <|"label" -> "GaussianIntegers", "type" -> "keyword", 
  "info" -> "GaussianIntegers is an option for FactorInteger, PrimeQ, Factor, \
and related functions that specifie"|>, 
 <|"label" -> "GaussianOrthogonalMatrixDistribution", "type" -> "keyword", 
  "info" -> "GaussianOrthogonalMatrixDistribution[\[CapitalATilde]\217\
\[CapitalAHat]\203, n] represents a Gaussian orthogonal matrix distribution \
with"|>, <|"label" -> "GaussianSymplecticMatrixDistribution", 
  "type" -> "keyword", "info" -> "GaussianSymplecticMatrixDistribution[\
\[CapitalATilde]\217\[CapitalAHat]\203, n] represents a Gaussian symplectic \
matrix distribution with"|>, 
 <|"label" -> "GaussianUnitaryMatrixDistribution", "type" -> "keyword", 
  "info" -> "GaussianUnitaryMatrixDistribution[\[CapitalATilde]\217\
\[CapitalAHat]\203, n] represents a Gaussian unitary matrix distribution with \
matri"|>, <|"label" -> "GaussianWindow", "type" -> "keyword", 
  "info" -> "GaussianWindow[x] represents a Gaussian window function of \
x.GaussianWindow[x, \[CapitalATilde]\217\[CapitalAHat]\203] uses standard \
devi"|>, <|"label" -> "GCD", "type" -> "keyword", 
  "info" -> "GCD[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
greatest common divisor of the n . \n     1   2                             "\
|>, <|"label" -> "GegenbauerC", "type" -> "keyword", 
  "info" -> "                                                      (m)        \
                                   "|>, <|"label" -> "General", 
  "type" -> "keyword", "info" -> 
   "General is a symbol to which general system messages are attached. "|>, 
 <|"label" -> "GenerateAsymmetricKeyPair", "type" -> "keyword", 
  "info" -> "GenerateAsymmetricKeyPair[] randomly generates a PrivateKey and \
corresponding PublicKey object for u"|>, <|"label" -> "GenerateConditions", 
  "type" -> "keyword", "info" -> "GenerateConditions is an option for \
Integrate, Sum, and similar functions that specifies whether exp"|>, 
 <|"label" -> "GeneratedAssetFormat", "type" -> "keyword", 
  "info" -> "GeneratedAssetFormat is an option for functions like \
VideoGenerator that specifies the format of the"|>, 
 <|"label" -> "GeneratedAssetLocation", "type" -> "keyword", 
  "info" -> "GeneratedAssetLocation is an option for functions like \
VideoGenerator that specifies the location of"|>, 
 <|"label" -> "GeneratedDocumentBinding", "type" -> "keyword", 
  "info" -> "GeneratedDocumentBinding is an option for supplying parameters \
to a DocumentGenerator during manual "|>, <|"label" -> "GenerateDerivedKey", 
  "type" -> "keyword", "info" -> "GenerateDerivedKey[password] generates a \
DerivedKey object from the password given.GenerateDerivedKe"|>, 
 <|"label" -> "GenerateDigitalSignature", "type" -> "keyword", 
  "info" -> "GenerateDigitalSignature[expr, key] generates a digital \
signature for expr using the specified priva"|>, 
 <|"label" -> "GeneratedParameters", "type" -> "keyword", 
  "info" -> "GeneratedParameters is an option that specifies how parameters \
generated to represent the results of"|>, 
 <|"label" -> "GeneratedQuantityMagnitudes", "type" -> "keyword", 
  "info" -> "GeneratedQuantityMagnitudes is an option that specifies how \
quantities generated to represent the qu"|>, 
 <|"label" -> "GenerateFileSignature", "type" -> "keyword", 
  "info" -> "GenerateFileSignature[\"file\", key] generates a digital \
signature of file using the specified private"|>, 
 <|"label" -> "GenerateSecuredAuthenticationKey", "type" -> "keyword", 
  "info" -> "GenerateSecuredAuthenticationKey[] generates a new anonymous \
SecuredAuthenticationKey owned by the c"|>, 
 <|"label" -> "GenerateSymmetricKey", "type" -> "keyword", 
  "info" -> "GenerateSymmetricKey[] randomly generates a SymmetricKey object \
suitable for use with cryptographic "|>, <|"label" -> "GeneratingFunction", 
  "type" -> "keyword", "info" -> "                                            \
                                               th\nGenera"|>, 
 <|"label" -> "GeneratorDescription", "type" -> "keyword", 
  "info" -> "GeneratorDescription is an option for providing a textual \
description for a DocumentGenerator."|>, 
 <|"label" -> "GeneratorHistoryLength", "type" -> "keyword", 
  "info" -> "GeneratorHistoryLength is an option for document generators \
controlling the number of runs archived "|>, 
 <|"label" -> "GeneratorOutputType", "type" -> "keyword", 
  "info" -> "GeneratorOutputType is an option controlling the file format of \
documents produced by a DocumentGene"|>, <|"label" -> "Generic", 
  "type" -> "keyword", "info" -> 
   "Generic is a setting for the Mode option of Solve and related functions."\
|>, <|"label" -> "GenericCylindricalDecomposition", "type" -> "keyword", 
  "info" -> "GenericCylindricalDecomposition[ineqs, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds the \
full-dimensional part of the decomposi"|>, <|"label" -> "GenomeData", 
  "type" -> "keyword", "info" -> "GenomeData[\"gene\"] gives the DNA sequence \
for the specified gene on the reference human genome.Genom"|>, 
 <|"label" -> "GenomeLookup", "type" -> "keyword", 
  "info" -> "GenomeLookup[\"seq\"] returns the positions of exact matches for \
the DNA sequence seq on the reference"|>, <|"label" -> "GeoAntipode", 
  "type" -> "keyword", "info" -> "GeoAntipode[loc] gives the antipodal \
position of location loc.GeoAntipode[g] gives the antipodal pri"|>, 
 <|"label" -> "GeoArea", "type" -> "keyword", 
  "info" -> "GeoArea[g] gives the area of the geo region g."|>, 
 <|"label" -> "GeoArraySize", "type" -> "keyword", 
  "info" -> "GeoArraySize is an option for geographic data functions that \
determines the dimensions of the array "|>, <|"label" -> "GeoBackground", 
  "type" -> "keyword", "info" -> "GeoBackground is an option that specifies \
the background style of a GeoGraphics object."|>, 
 <|"label" -> "GeoBoundary", "type" -> "keyword", 
  "info" -> 
   "GeoBoundary[g] returns the boundary line of the geo region g."|>, 
 <|"label" -> "GeoBounds", "type" -> "keyword", 
  "info" -> "GeoBounds[g] gives the ranges of latitudes and longitudes in the \
geo region g.GeoBounds[g, \[CapitalATilde]\216b4] pads r"|>, 
 <|"label" -> "GeoBoundsRegion", "type" -> "keyword", 
  "info" -> "GeoBoundsRegion[{{lat   , lat   }, {lon   , lon   }}] is a \
two-dimensional GeoGraphics primitive tha"|>, 
 <|"label" -> "GeoBoundsRegionBoundary", "type" -> "keyword", 
  "info" -> "GeoBoundsRegionBoundary[{{lat   , lat   }, {lon   , lon   }}] is \
a one-dimensional GeoGraphics primi"|>, <|"label" -> "GeoBubbleChart", 
  "type" -> "keyword", "info" -> "GeoBubbleChart[{reg  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , reg  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a geo \
bubble chart with bubbles centered at the "|>, 
 <|"label" -> "GeoCenter", "type" -> "keyword", 
  "info" -> "GeoCenter is an option for GeoGraphics that specifies the \
coordinates of the point that should appea"|>, 
 <|"label" -> "GeoCircle", "type" -> "keyword", 
  "info" -> "GeoCircle[loc, r] is a two-dimensional GeoGraphics primitive \
that represents a circle of radius r ce"|>, <|"label" -> "GeoContourPlot", 
  "type" -> "keyword", "info" -> "GeoContourPlot[{loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a geo \
contour plot from values val  defined at s"|>, 
 <|"label" -> "GeoDensityPlot", "type" -> "keyword", 
  "info" -> "GeoDensityPlot[{loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a geo \
density plot with colors at the location l"|>, 
 <|"label" -> "GeodesicClosing", "type" -> "keyword", 
  "info" -> "GeodesicClosing[image, ker] gives the geodesic closing of image \
with respect to the structuring elem"|>, <|"label" -> "GeodesicDilation", 
  "type" -> "keyword", "info" -> "GeodesicDilation[marker, mask] gives the \
fixed point of the geodesic dilation of the marker constrai"|>, 
 <|"label" -> "GeodesicErosion", "type" -> "keyword", 
  "info" -> "GeodesicErosion[marker, mask] gives the fixed point of the \
geodesic erosion of the marker constraine"|>, <|"label" -> "GeodesicOpening", 
  "type" -> "keyword", "info" -> "GeodesicOpening[image, ker] gives the \
geodesic opening of image with respect to the structuring elem"|>, 
 <|"label" -> "GeoDestination", "type" -> "keyword", 
  "info" -> "GeoDestination[loc, {d, \[CapitalATilde]\216\\[PlusMinus]}] \
gives the end position of the geodesic of length d starting from loc wit"|>, 
 <|"label" -> "GeodesyData", "type" -> "keyword", 
  "info" -> "GeodesyData[\"name\", \"property\"] gives the value of the \
specified property for a named geodetic datum"|>, 
 <|"label" -> "GeoDirection", "type" -> "keyword", 
  "info" -> "GeoDirection[{lat , lon }, {lat , lon }] gives the azimuthal \
direction from one latitude-longitude p"|>, <|"label" -> "GeoDisk", 
  "type" -> "keyword", "info" -> "GeoDisk[loc, r]  is a two-dimensional \
GeoGraphics primitive that represents a filled disk of radius "|>, 
 <|"label" -> "GeoDisplacement", "type" -> "keyword", 
  "info" -> "GeoDisplacement[{dist, \[CapitalATilde]\216\\[PlusMinus]}] \
represents a geodesic displacement of length dist and initial bearing \
\[CapitalATilde]\216\\[PlusMinus] f"|>, <|"label" -> "GeoDistance", 
  "type" -> "keyword", "info" -> "GeoDistance[{lat , lon }, {lat , lon }] \
gives the geodesic distance between latitude-longitude posit"|>, 
 <|"label" -> "GeoDistanceList", "type" -> "keyword", 
  "info" -> "GeoDistanceList[{loc , loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, loc }] returns \
the list of geodesic distances between consecutive pa"|>, 
 <|"label" -> "GeoElevationData", "type" -> "keyword", 
  "info" -> "GeoElevationData[] gives the elevation above sea level at \
ECGeoLocation.GeoElevationData[loc] gives t"|>, 
 <|"label" -> "GeoEntities", "type" -> "keyword", 
  "info" -> "GeoEntities[reg, enttype] gives a list of the geographic \
entities of type enttype contained in the e"|>, 
 <|"label" -> "GeoGraphics", "type" -> "keyword", 
  "info" -> "GeoGraphics[primitives, options] represents a two-dimensional \
geographical image."|>, <|"label" -> "GeoGraphPlot", "type" -> "keyword", 
  "info" -> "GeoGraphPlot[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
plot of the geographic graph with edges e .GeoGraphPlot[{v , v"|>, 
 <|"label" -> "GeoGraphValuePlot", "type" -> "keyword", 
  "info" -> "GeoGraphValuePlot[{{src , dest , flow }, {src , dest , flow }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {src , dest , \
flow }}] plots the f"|>, <|"label" -> "GeogravityModelData", 
  "type" -> "keyword", "info" -> "GeogravityModelData[] returns the \
gravitational field data for the current location.GeogravityModelD"|>, 
 <|"label" -> "GeoGridDirectionDifference", "type" -> "keyword", 
  "info" -> "GeoGridDirectionDifference[proj, loc, \[CapitalATilde]\216b2] \
gives the difference between the angle from north to direct"|>, 
 <|"label" -> "GeoGridLines", "type" -> "keyword", 
  "info" -> "GeoGridLines is an option for GeoGraphics that specifies what \
parallels and meridians to show."|>, <|"label" -> "GeoGridLinesStyle", 
  "type" -> "keyword", "info" -> "GeoGridLinesStyle is an option for \
GeoGraphics that specifies how parallels and meridians should be "|>, 
 <|"label" -> "GeoGridPosition", "type" -> "keyword", 
  "info" -> "GeoGridPosition[{x, y}, proj] represents a point {x, y} in a \
planimetric cartographic grid using the"|>, <|"label" -> "GeoGridRange", 
  "type" -> "keyword", "info" -> "GeoGridRange is an option for geographic \
functions that specifies the range of projected coordinates"|>, 
 <|"label" -> "GeoGridRangePadding", "type" -> "keyword", 
  "info" -> "GeoGridRangePadding is an option for geographic functions that \
specifies how much to extend the proj"|>, <|"label" -> "GeoGridUnitArea", 
  "type" -> "keyword", "info" -> "GeoGridUnitArea[proj, loc] gives the actual \
geo area corresponding to a unit area on the geo grid ob"|>, 
 <|"label" -> "GeoGridUnitDistance", "type" -> "keyword", 
  "info" -> "GeoGridUnitDistance[proj, loc, \
\[CapitalATilde]\216\\[PlusMinus]] gives the actual geo distance \
corresponding to a unit distance on "|>, <|"label" -> "GeoGridVector", 
  "type" -> "keyword", "info" -> "GeoGridVector[loc \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {v , v }, proj] \
represents a horizontal two-dimensional vector of components v ,"|>, 
 <|"label" -> "GeoGroup", "type" -> "keyword", "info" -> "GeoGroup[geoobjects\
] represents a list of geographic objects to be treated as a single object \
for ce"|>, <|"label" -> "GeoHemisphere", "type" -> "keyword", 
  "info" -> "GeoHemisphere[] is a two-dimensional GeoGraphics primitive that \
represents the half of the Earth cen"|>, 
 <|"label" -> "GeoHemisphereBoundary", "type" -> "keyword", 
  "info" -> "GeoHemisphereBoundary[] is a one-dimensional GeoGraphics \
primitive that represents the boundary line"|>, 
 <|"label" -> "GeoHistogram", "type" -> "keyword", 
  "info" -> "GeoHistogram[locs] plots a density histogram of the geographic \
locations locs.GeoHistogram[locs, bsp"|>, <|"label" -> "GeoIdentify", 
  "type" -> "keyword", "info" -> "GeoIdentify[enttype] identifies the \
geographic entities of the type enttype in which the current geo"|>, 
 <|"label" -> "GeoImage", "type" -> "keyword", "info" -> "GeoImage[reg] gives \
a satellite image of the geo region reg.GeoImage[reg, mapstyle] gives an \
image o"|>, <|"label" -> "GeoLabels", "type" -> "keyword", 
  "info" -> "GeoLabels is an option for GeoListPlot and GeoRegionValuePlot \
that specifies whether and how to add "|>, <|"label" -> "GeoLength", 
  "type" -> "keyword", "info" -> 
   "GeoLength[g] gives the length of the geo path g."|>, 
 <|"label" -> "GeoListPlot", "type" -> "keyword", 
  "info" -> "GeoListPlot[{loc , loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a map \
on which the locations loc  are indicated.GeoListPlot[{"|>, 
 <|"label" -> "GeoLocation", "type" -> "keyword", 
  "info" -> "GeoLocation is an option for Interpreter and related functions \
that specifies the location to assume"|>, 
 <|"label" -> "GeologicalPeriodData", "type" -> "keyword", 
  "info" -> "GeologicalPeriodData[entity, property] gives the value of the \
specified property for the geological "|>, 
 <|"label" -> "GeomagneticModelData", "type" -> "keyword", 
  "info" -> "GeomagneticModelData[] returns the current magnetic field data \
for the current location.GeomagneticM"|>, <|"label" -> "GeoMarker", 
  "type" -> "keyword", "info" -> "GeoMarker[] is a GeoGraphics primitive that \
represents a marker at the current ECGeoLocation.GeoMarke"|>, 
 <|"label" -> "GeometricAssertion", "type" -> "keyword", 
  "info" -> "GeometricAssertion[obj, prop] represents the assertion that the \
geometric object obj satisfies prop."|>, 
 <|"label" -> "GeometricBrownianMotionProcess", "type" -> "keyword", 
  "info" -> "GeometricBrownianMotionProcess[\[CapitalATilde]\216\
\[CapitalAHat]\274, \[CapitalATilde]\217\[CapitalAHat]\203, x ] represents a \
geometric Brownian motion process with drift \
\[CapitalATilde]\216\[CapitalAHat]\274"|>, 
 <|"label" -> "GeometricDistribution", "type" -> "keyword", 
  "info" -> "GeometricDistribution[p] represents a geometric distribution \
with probability parameter p. "|>, <|"label" -> "GeometricMean", 
  "type" -> "keyword", "info" -> 
   "GeometricMean[list] gives the geometric mean of the values in list."|>, 
 <|"label" -> "GeometricScene", "type" -> "keyword", 
  "info" -> "GeometricScene[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {hyp , hyp , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
abstract 2D geometric scene defined by th"|>, <|"label" -> "GeometricStep", 
  "type" -> "keyword", "info" -> "GeometricStep[{hyp , hyp , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
symbolic representation of a step in the definition of a geom"|>, 
 <|"label" -> "GeometricTest", "type" -> "keyword", 
  "info" -> "GeometricTest[obj, prop] tests whether the geometric object obj \
satisfies prop.GeometricTest[{obj , "|>, 
 <|"label" -> "GeometricTransformation", "type" -> "keyword", 
  "info" -> "GeometricTransformation[g, tfun] represents the result of \
applying the transformation function tfun "|>, 
 <|"label" -> "GeoModel", "type" -> "keyword", "info" -> "GeoModel is an \
option for GeoGraphics that specifies the reference body or model for it for \
the purp"|>, <|"label" -> "GeoNearest", "type" -> "keyword", 
  "info" -> "GeoNearest[enttype, loc] returns the geographic entity of type \
enttype closest to the geo location l"|>, <|"label" -> "GeoOrientationData", 
  "type" -> "keyword", "info" -> "GeoOrientationData[date, prop] gives the \
value of the property prop about the orientation of the Ear"|>, 
 <|"label" -> "GeoPath", "type" -> "keyword", "info" -> "GeoPath[{loc , loc \
}, pathtype] is a GeoGraphics primitive that represents a path of type \
pathtype b"|>, <|"label" -> "GeoPolygon", "type" -> "keyword", 
  "info" -> "GeoPolygon[{loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, loc }] is a \
GeoGraphics primitive that represents a filled polygon whose bounda"|>, 
 <|"label" -> "GeoPosition", "type" -> "keyword", 
  "info" -> "GeoPosition[{lat, lon}] represents a geodetic position with \
latitude lat and longitude lon.GeoPositi"|>, <|"label" -> "GeoPositionENU", 
  "type" -> "keyword", "info" -> "GeoPositionENU[{east, north, up}, p]  \
represents a position with local Cartesian coordinates {east, "|>, 
 <|"label" -> "GeoPositionXYZ", "type" -> "keyword", 
  "info" -> "GeoPositionXYZ[{x, y, z}] represents a position in a Cartesian \
geocentric coordinate system.GeoPosit"|>, <|"label" -> "GeoProjection", 
  "type" -> "keyword", "info" -> "GeoProjection is an option for GeoGraphics \
that specifies the cartographic projection to use for the"|>, 
 <|"label" -> "GeoProjectionData", "type" -> "keyword", 
  "info" -> "GeoProjectionData[\"projection\", \"property\"] gives the value \
of the specified property for the specif"|>, <|"label" -> "GeoRange", 
  "type" -> "keyword", "info" -> "GeoRange is an option for geographic \
functions that specifies the range of latitude and longitude to"|>, 
 <|"label" -> "GeoRangePadding", "type" -> "keyword", 
  "info" -> "GeoRangePadding is an option for GeoGraphics that specifies what \
padding to use when extending beyon"|>, <|"label" -> "GeoRegionValuePlot", 
  "type" -> "keyword", "info" -> "GeoRegionValuePlot[{reg  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , reg  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
plot in which the geographic regions r"|>, <|"label" -> "GeoResolution", 
  "type" -> "keyword", "info" -> "GeoResolution is an option for geographic \
functions that specifies an average distance between neigh"|>, 
 <|"label" -> "GeoScaleBar", "type" -> "keyword", 
  "info" -> "GeoScaleBar is an option for GeoGraphics that determines what \
scale to show on the map."|>, <|"label" -> "GeoServer", "type" -> "keyword", 
  "info" -> "GeoServer is an option for GeoGraphics, GeoStyling and GeoImage \
that specifies the URL address of a "|>, <|"label" -> "GeoSmoothHistogram", 
  "type" -> "keyword", "info" -> "GeoSmoothHistogram[locs] plots a smooth \
kernel histogram of the geo locations locs.GeoSmoothHistogra"|>, 
 <|"label" -> "GeoStreamPlot", "type" -> "keyword", 
  "info" -> "GeoStreamPlot[vecs] generates a stream plot from the field of \
geo vectors vecs.GeoStreamPlot[{vecs ,"|>, <|"label" -> "GeoStyling", 
  "type" -> "keyword", "info" -> "GeoStyling[mapstyle] displays faces of \
polygons and other filled geo objects using mapstyle.GeoStyli"|>, 
 <|"label" -> "GeoStylingImageFunction", "type" -> "keyword", 
  "info" -> "GeoStylingImageFunction is an option for specifying an image \
effect to apply to a geo style."|>, <|"label" -> "GeoVariant", 
  "type" -> "keyword", "info" -> "GeoVariant[obj, qual] represents a \
geographic object obj with qualifier qual."|>, 
 <|"label" -> "GeoVector", "type" -> "keyword", 
  "info" -> "GeoVector[loc \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {m, \
\[CapitalATilde]\216\\[PlusMinus]}] represents a horizontal two-dimensional \
vector of magnitude m and bearing \[CapitalATilde]\216\\[PlusMinus] "|>, 
 <|"label" -> "GeoVectorENU", "type" -> "keyword", 
  "info" -> "GeoVectorENU[loc \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {v , v }] \
represents a horizontal two-dimensional vector of components v  and v  "|>, 
 <|"label" -> "GeoVectorPlot", "type" -> "keyword", 
  "info" -> "GeoVectorPlot[vecs] generates a vector plot from the field of \
geo vectors vecs.GeoVectorPlot[{vecs ,"|>, <|"label" -> "GeoVectorXYZ", 
  "type" -> "keyword", "info" -> "GeoVectorXYZ[loc \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {v , v , v }] \
represents a three-dimensional vector of Cartesian components v , v"|>, 
 <|"label" -> "GeoVisibleRegion", "type" -> "keyword", 
  "info" -> "GeoVisibleRegion[{lat, lon, h}] is a two-dimensional GeoGraphics \
primitive that represents the regio"|>, 
 <|"label" -> "GeoVisibleRegionBoundary", "type" -> "keyword", 
  "info" -> "GeoVisibleRegionBoundary[{lat, lon, h}] is a one-dimensional \
GeoGraphics primitive that represents t"|>, <|"label" -> "GeoWithinQ", 
  "type" -> "keyword", "info" -> "GeoWithinQ[reg, loc] returns True if the \
location loc is contained within the region reg, and False "|>, 
 <|"label" -> "GeoZoomLevel", "type" -> "keyword", 
  "info" -> "GeoZoomLevel is an option for specifying the resolution at which \
to render a map."|>, <|"label" -> "GestureHandler", "type" -> "keyword", 
  "info" -> "GestureHandler[expr, {gesture  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\237 fun , gesture  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\237 fun , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] displays as \
expr, evaluating fun [value,"|>, <|"label" -> "Get", "type" -> "keyword", 
  "info" -> "<< name reads in a file, evaluating each expression in it and \
returning the last one. Get[stream] re"|>, <|"label" -> "GetContext", 
  "type" -> "keyword", "info" -> "GetContext[\"context`\"] loads the file \
named by ContextToFileName[\"context`\"], which gives the conven"|>, 
 <|"label" -> "GetEnvironment", "type" -> "keyword", 
  "info" -> "GetEnvironment[\"var\"] gives the setting corresponding to the \
variable \"var\" in the operating system "|>, 
 <|"label" -> "Glaisher", "type" -> "keyword", 
  "info" -> "Glaisher is Glaisher's constant with numerical value \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 1.28243. "|>, 
 <|"label" -> "GlobalClusteringCoefficient", "type" -> "keyword", 
  "info" -> "GlobalClusteringCoefficient[g] gives the global clustering \
coefficient of the graph g.GlobalClusteri"|>, 
 <|"label" -> "Glow", "type" -> "keyword", "info" -> "Glow[col] is a graphics \
directive which specifies that surfaces of 3D graphics objects that follow a"\
|>, <|"label" -> "GoldenAngle", "type" -> "keyword", 
  "info" -> "GoldenAngle is the golden angle (3 - Sqrt[5]) \
\[CapitalATilde]\217\[CapitalAHat]\200, with numerical value \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 \
137.5\[CapitalATilde]\202\\[Degree]."|>, <|"label" -> "GoldenRatio", 
  "type" -> "keyword", "info" -> "                                    \
1\nGoldenRatio is the golden ratio \[CapitalATilde]\217\[CapitalAHat]\225 \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 - (Sqrt[5] + 1), \
with nume"|>, <|"label" -> "GompertzMakehamDistribution", 
  "type" -> "keyword", "info" -> "GompertzMakehamDistribution[\
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet], \
\[CapitalATilde]\216\[CapitalAHat]\276] represents a Gompertz distribution \
with scale parameter \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] and \
frai"|>, <|"label" -> "GoochShading", "type" -> "keyword", 
  "info" -> "GoochShading[] is a three-dimensional graphics directive \
specifying that surfaces that follow are to"|>, 
 <|"label" -> "GoodmanKruskalGammaTest", "type" -> "keyword", 
  "info" -> "GoodmanKruskalGammaTest[v , v ] tests whether the vectors v  and \
v  are independent.GoodmanKruskalGa"|>, <|"label" -> "Goto", 
  "type" -> "keyword", "info" -> 
   "Goto[tag] scans for Label[tag], and transfers control to that point. "|>, 
 <|"label" -> "Grad", "type" -> "keyword", "info" -> "Grad[f, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] gives the \
gradient (\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 \
f/\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 \
f/\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\202 x ).Grad[f, {x \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, chart] \
gives th"|>, <|"label" -> "Gradient", "type" -> "keyword", 
  "info" -> "Gradient is an option for FindMinimum and related functions that \
specifies the gradient vector to as"|>, <|"label" -> "GradientFilter", 
  "type" -> "keyword", "info" -> "GradientFilter[data, r] gives the magnitude \
of the gradient of data, computed using discrete derivat"|>, 
 <|"label" -> "GradientFittedMesh", "type" -> "keyword", 
  "info" -> "GradientFittedMesh[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
MeshRegion whose gradient best fits the normals at points p "|>, 
 <|"label" -> "GradientOrientationFilter", "type" -> "keyword", 
  "info" -> "GradientOrientationFilter[data, r] gives the local orientation \
parallel to the gradient of data, com"|>, <|"label" -> "GrammarApply", 
  "type" -> "keyword", "info" -> "GrammarApply[grammar, input] attempts to \
parse input according to the grammar defined by grammar."|>, 
 <|"label" -> "GrammarToken", "type" -> "keyword", 
  "info" -> "GrammarToken[form] is a grammar rules pattern object that \
represents any input of the specified form"|>, 
 <|"label" -> "Graph", "type" -> "keyword", "info" -> "Graph[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a graph \
with edges e .Graph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields the \
graph wit"|>, <|"label" -> "Graph3D", "type" -> "keyword", 
  "info" -> "Graph3D[g] creates a graph with vertices and edges from the \
graph g and represented as a 3D plot.Gra"|>, 
 <|"label" -> "GraphAssortativity", "type" -> "keyword", 
  "info" -> "GraphAssortativity[g] gives the assortativity coefficient of a \
graph g using vertex degrees.GraphAss"|>, 
 <|"label" -> "GraphAutomorphismGroup", "type" -> "keyword", 
  "info" -> "GraphAutomorphismGroup[g] gives the automorphism group of a \
graph g.GraphAutomorphismGroup[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "GraphCenter", "type" -> "keyword", 
  "info" -> "GraphCenter[g] gives the set of vertices with minimum \
eccentricity in the graph g.GraphCenter[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w"|>, 
 <|"label" -> "GraphComplement", "type" -> "keyword", 
  "info" -> "GraphComplement[g] gives the graph complement of the graph \
g.GraphComplement[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules "|>, 
 <|"label" -> "GraphData", "type" -> "keyword", 
  "info" -> "GraphData[name] gives a graph with the specified \
name.GraphData[entity] gives the graph correspondin"|>, 
 <|"label" -> "GraphDensity", "type" -> "keyword", 
  "info" -> "GraphDensity[g] gives the graph density of the graph \
g.GraphDensity[{v \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
w, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w to "|>, 
 <|"label" -> "GraphDiameter", "type" -> "keyword", 
  "info" -> "GraphDiameter[g] gives the greatest distance between any pair of \
vertices in the graph g.GraphDiamet"|>, <|"label" -> "GraphDifference", 
  "type" -> "keyword", "info" -> "GraphDifference[g , g ] gives the graph \
difference of the graphs g  and g .GraphDifference[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "GraphDisjointUnion", "type" -> "keyword", 
  "info" -> "GraphDisjointUnion[g , g ] gives the graph disjoint union of the \
graphs g  and g .GraphDisjointUnion"|>, <|"label" -> "GraphDistance", 
  "type" -> "keyword", "info" -> "GraphDistance[g, s, t] gives the distance \
from source vertex s to target vertex t in the graph g.Gra"|>, 
 <|"label" -> "GraphDistanceMatrix", "type" -> "keyword", 
  "info" -> "GraphDistanceMatrix[g] gives the matrix of distances between \
vertices for the graph g.GraphDistanceM"|>, <|"label" -> "GraphEmbedding", 
  "type" -> "keyword", "info" -> "GraphEmbedding[g] gives coordinates of the \
vertices of the graph g.GraphEmbedding[g, \"emb\"] gives co"|>, 
 <|"label" -> "GraphHighlight", "type" -> "keyword", 
  "info" -> "GraphHighlight is an option to Graph and related objects that \
specifies graph elements to highlight."|>, 
 <|"label" -> "GraphHighlightStyle", "type" -> "keyword", 
  "info" -> "GraphHighlightStyle is an option to Graph and related objects \
that specifies styles to use for highl"|>, <|"label" -> "GraphHub", 
  "type" -> "keyword", "info" -> "GraphHub[g] gives the set of vertices with \
maximum vertex degree in the underlying simple graph of g"|>, 
 <|"label" -> "Graphics", "type" -> "keyword", "info" -> "Graphics[primitives\
, options] represents a two-dimensional graphical image. "|>, 
 <|"label" -> "Graphics3D", "type" -> "keyword", 
  "info" -> "Graphics3D[primitives, options] represents a three-dimensional \
graphical image. "|>, <|"label" -> "GraphicsArray", "type" -> "keyword", 
  "info" -> "GraphicsArray[{g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
row of graphics objects.GraphicsArray[{{g  , g  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] re"|>, 
 <|"label" -> "GraphicsColumn", "type" -> "keyword", 
  "info" -> "GraphicsColumn[{g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
graphic in which the g  are laid out in a column, with g  ab"|>, 
 <|"label" -> "GraphicsComplex", "type" -> "keyword", 
  "info" -> "GraphicsComplex[{pt , pt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, data] \
represents a graphics complex in which coordinates given as int"|>, 
 <|"label" -> "GraphicsGrid", "type" -> "keyword", 
  "info" -> "GraphicsGrid[{{g  , g  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
graphic in which the g   are laid out in a two-dimensio"|>, 
 <|"label" -> "GraphicsGroup", "type" -> "keyword", 
  "info" -> "GraphicsGroup[{g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
collection of graphics objects grouped together for purposes"|>, 
 <|"label" -> "GraphicsRow", "type" -> "keyword", 
  "info" -> "GraphicsRow[{g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
graphic in which the g  are laid out in a row.GraphicsRow[list,"|>, 
 <|"label" -> "GraphicsSpacing", "type" -> "keyword", 
  "info" -> "GraphicsSpacing is an option for GraphicsArray that specifies \
the spacing between elements in the ar"|>, <|"label" -> "GraphIntersection", 
  "type" -> "keyword", "info" -> "GraphIntersection[g , g ] gives the graph \
intersection of the graphs g  and g .GraphIntersection[g ,"|>, 
 <|"label" -> "GraphLayers", "type" -> "keyword", 
  "info" -> "GraphLayers is an option for LayeredGraphPlot3D and related \
functions that specifies layers to draw "|>, <|"label" -> "GraphLayerStyle", 
  "type" -> "keyword", "info" -> "GraphLayerStyle is an option for \
LayeredGraphPlot3D and related functions that specifies the style i"|>, 
 <|"label" -> "GraphLayout", "type" -> "keyword", 
  "info" -> "GraphLayout is an option to Graph and related functions that \
specifies what layout to use."|>, <|"label" -> "GraphLinkEfficiency", 
  "type" -> "keyword", "info" -> "GraphLinkEfficiency[g] gives the link \
efficiency of the graph g.GraphLinkEfficiency[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses"|>, 
 <|"label" -> "GraphPeriphery", "type" -> "keyword", 
  "info" -> "GraphPeriphery[g] gives vertices that are maximally distant to \
at least one vertex in the graph g.Gr"|>, <|"label" -> "GraphPlot", 
  "type" -> "keyword", "info" -> "GraphPlot[g] generates a plot of the graph \
g.GraphPlot[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
plot of the graph wi"|>, <|"label" -> "GraphPlot3D", "type" -> "keyword", 
  "info" -> "GraphPlot3D[g] generates a 3D plot of the graph g.GraphPlot3D[{e \
, e , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates \
a 3D plot of th"|>, <|"label" -> "GraphPower", "type" -> "keyword", 
  "info" -> "                                   th\nGraphPower[g, n] gives \
the graph-n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    power of \
the graph g.Gra"|>, <|"label" -> "GraphPropertyDistribution", 
  "type" -> "keyword", "info" -> "GraphPropertyDistribution[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 gdist] represents \
the distribution of the property expr where th"|>, 
 <|"label" -> "GraphQ", "type" -> "keyword", 
  "info" -> 
   "GraphQ[g] yields True if g is a valid Graph object and False otherwise."|>\
, <|"label" -> "GraphRadius", "type" -> "keyword", 
  "info" -> "GraphRadius[g] gives the minimum eccentricity of the vertices in \
the graph g.GraphRadius[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}]"|>, 
 <|"label" -> "GraphReciprocity", "type" -> "keyword", 
  "info" -> "GraphReciprocity[g] gives the reciprocity of a graph \
g.GraphReciprocity[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w"|>, 
 <|"label" -> "GraphStyle", "type" -> "keyword", 
  "info" -> "GraphStyle is an option to Graph and related objects that \
specifies styles to use for the different "|>, 
 <|"label" -> "GraphTree", "type" -> "keyword", 
  "info" -> "GraphTree[g] constructs a tree from the tree graph \
g.GraphTree[g, root] specifies what vertex to use"|>, 
 <|"label" -> "GraphUnion", "type" -> "keyword", 
  "info" -> "GraphUnion[g , g ] gives the graph union of the graphs g  and g \
.GraphUnion[g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the gra"|>\
, <|"label" -> "Gray", "type" -> "keyword", 
  "info" -> 
   "Gray represents the color gray in graphics or style specifications. "|>, 
 <|"label" -> "GrayLevel", "type" -> "keyword", 
  "info" -> "GrayLevel[g] represents a color in the grayscale color space \
with gray level g.GrayLevel[g, a] speci"|>, <|"label" -> "Greater", 
  "type" -> "keyword", "info" -> "x > y yields True if x is determined to be \
greater than y. x  > x  > x  yields True if the x  form a"|>, 
 <|"label" -> "GreaterEqual", "type" -> "keyword", 
  "info" -> "x >= y or x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] y yields True \
if x is determined to be greater than or equal to y. x  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] x  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] x  yields"|>, 
 <|"label" -> "GreaterEqualLess", "type" -> "keyword", 
  "info" -> "GreaterEqualLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\233 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\233 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "GreaterEqualThan", "type" -> "keyword", 
  "info" -> "GreaterEqualThan[y] is an operator form that yields x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] y when applied \
to an expression x."|>, <|"label" -> "GreaterFullEqual", "type" -> "keyword", 
  "info" -> "GreaterFullEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Section] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Section] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "GreaterGreater", "type" -> "keyword", 
  "info" -> "GreaterGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[LeftGuillemet] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[LeftGuillemet] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "GreaterLess", "type" -> "keyword", 
  "info" -> "GreaterLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[CenterDot] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[CenterDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "GreaterSlantEqual", "type" -> "keyword", 
  "info" -> "GreaterSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Copyright]\[CapitalAHat]\276 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Copyright]\[CapitalAHat]\276 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "GreaterThan", "type" -> "keyword", 
  "info" -> "GreaterThan[y] is an operator form that yields x > y when \
applied to an expression x."|>, <|"label" -> "GreaterTilde", 
  "type" -> "keyword", "info" -> "GreaterTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211b3 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211b3 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Green", "type" -> "keyword", 
  "info" -> 
   "Green represents the color green in graphics or style specifications. "|>\
, <|"label" -> "GreenFunction", "type" -> "keyword", 
  "info" -> "GreenFunction[{\[CapitalATilde]\[Cent]\[CapitalAHat]\204\
\[CapitalAHat]\222[u[x]], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\204\\[Not][u[x]]}, u, {x, x   , x   }, \
y] gives a Green's function for the linear dif"|>, 
 <|"label" -> "Grid", "type" -> "keyword", "info" -> "Grid[{{expr  , expr  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {expr  , expr  \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is an object \
that formats with the expr   arrang"|>, <|"label" -> "GridFrame", 
  "type" -> "keyword", "info" -> "GridFrame is an option for grids that \
specifies whether a surrounding frame is drawn."|>, 
 <|"label" -> "GridFrameMargins", "type" -> "keyword", 
  "info" -> "GridFrameMargins is an option for grids that specifies the \
spacing between the content of the grid a"|>, 
 <|"label" -> "GridGraph", "type" -> "keyword", 
  "info" -> "GridGraph[{m, n}] gives the grid graph with m \
\[CapitalATilde]\203\[CapitalAHat]\227 n vertices G    .GridGraph[{n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, n }] gives th"|>\
, <|"label" -> "GridLines", "type" -> "keyword", 
  "info" -> "GridLines is an option for two-dimensional graphics functions \
that specifies grid lines. "|>, <|"label" -> "GridLinesStyle", 
  "type" -> "keyword", "info" -> "GridLinesStyle is an option for 2D graphics \
functions that specifies how grid lines should be render"|>, 
 <|"label" -> "GridVideo", "type" -> "keyword", 
  "info" -> "GridVideo[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a video \
in which each frame is a grid of frames of all v  at the corr"|>, 
 <|"label" -> "GroebnerBasis", "type" -> "keyword", 
  "info" -> "GroebnerBasis[{poly , poly , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a list of \
polynomials that form a Gr\[CapitalATilde]\203\\[Paragraph]bner basis "|>, 
 <|"label" -> "GroupActionBase", "type" -> "keyword", 
  "info" -> "GroupActionBase is an option to specify a base for a group."|>, 
 <|"label" -> "GroupBy", "type" -> "keyword", "info" -> "GroupBy[{elem , elem \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] gives an \
association that groups the elem  into lists associated with "|>, 
 <|"label" -> "GroupCentralizer", "type" -> "keyword", 
  "info" -> "GroupCentralizer[group, g] returns the centralizer of the \
element g in group."|>, <|"label" -> "GroupElementFromWord", 
  "type" -> "keyword", "info" -> "GroupElementFromWord[group, w] returns the \
element of group determined by the word w in the generato"|>, 
 <|"label" -> "GroupElementPosition", "type" -> "keyword", 
  "info" -> "GroupElementPosition[group, g] returns the position of the \
element g in the list of elements of grou"|>, <|"label" -> "GroupElementQ", 
  "type" -> "keyword", "info" -> "GroupElementQ[group, g] returns True if the \
object g is an element of group and False otherwise."|>, 
 <|"label" -> "GroupElements", "type" -> "keyword", 
  "info" -> "GroupElements[group] returns the list of all elements of \
group.GroupElements[group, {r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, r }] ret"|>, 
 <|"label" -> "GroupElementToWord", "type" -> "keyword", 
  "info" -> "GroupElementToWord[group, g] decomposes the group element g as a \
product of generators of group."|>, <|"label" -> "GroupGenerators", 
  "type" -> "keyword", "info" -> 
   "GroupGenerators[group] returns a list of generators of group. "|>, 
 <|"label" -> "Groupings", "type" -> "keyword", 
  "info" -> "Groupings[n, k] gives a list of all possible groupings of 1, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, n taken k at a \
time. Groupings[{a , "|>, <|"label" -> "GroupMultiplicationTable", 
  "type" -> "keyword", "info" -> "GroupMultiplicationTable[group] gives the \
multiplication table of group as an array."|>, 
 <|"label" -> "GroupOrbits", "type" -> "keyword", 
  "info" -> "GroupOrbits[group, {p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] returns the \
orbits of the points p  under the action of the elements of "|>, 
 <|"label" -> "GroupOrder", "type" -> "keyword", 
  "info" -> "GroupOrder[group] returns the number of elements of group."|>, 
 <|"label" -> "GroupPageBreakWithin", "type" -> "keyword", 
  "info" -> "GroupPageBreakWithin is an option for Cell that specifies \
whether a page break should be allowed wit"|>, 
 <|"label" -> "GroupSetwiseStabilizer", "type" -> "keyword", 
  "info" -> "GroupSetwiseStabilizer[group, {p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] returns the \
subgroup of group for which the images of the"|>, 
 <|"label" -> "GroupStabilizer", "type" -> "keyword", 
  "info" -> "GroupStabilizer[group, {p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] returns the \
subgroup of elements of group that move none of the "|>, 
 <|"label" -> "GroupStabilizerChain", "type" -> "keyword", 
  "info" -> "GroupStabilizerChain[group] returns a list of successive \
stabilizers in group of the points in a bas"|>, 
 <|"label" -> "GrowCutComponents", "type" -> "keyword", 
  "info" -> "GrowCutComponents[image, {marker , marker , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
segmentation from image by growing each ma"|>, 
 <|"label" -> "Gudermannian", "type" -> "keyword", 
  "info" -> "Gudermannian[z] gives the Gudermannian function gd(z)."|>, 
 <|"label" -> "GuidedFilter", "type" -> "keyword", 
  "info" -> "GuidedFilter[image, guide, r, \[CapitalATilde]\217\\[Micro]] \
filters image using the guide image guide over range-r neighborhood"|>, 
 <|"label" -> "GumbelDistribution", "type" -> "keyword", 
  "info" -> "GumbelDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents a Gumbel distribution with location \
parameter \[CapitalATilde]\216\\[PlusMinus] and scale parame"|>, 
 <|"label" -> "HaarWavelet", "type" -> "keyword", 
  "info" -> "HaarWavelet[] represents a Haar wavelet. "|>, 
 <|"label" -> "HadamardMatrix", "type" -> "keyword", 
  "info" -> "HadamardMatrix[n] returns an \
n\[CapitalATilde]\203\[CapitalAHat]\227n Hadamard matrix."|>, 
 <|"label" -> "HalfLine", "type" -> "keyword", "info" -> "HalfLine[{p , p }] \
represents the half-line from the point p  through p . HalfLine[p, v] \
represents "|>, <|"label" -> "HalfNormalDistribution", "type" -> "keyword", 
  "info" -> "HalfNormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[Cedilla]] represents a half-normal distribution with scale inversely \
proportional to"|>, <|"label" -> "HalfPlane", "type" -> "keyword", 
  "info" -> "HalfPlane[{p , p }, w] represents the half-plane bounded by the \
line through p  and p  and extended "|>, <|"label" -> "HalfSpace", 
  "type" -> "keyword", "info" -> "HalfSpace[n, p] represents the half-space \
of points x such that n . (x - p) \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] \
0.HalfSpace[n, c] repr"|>, <|"label" -> "HalftoneShading", 
  "type" -> "keyword", "info" -> "HalftoneShading[] is a three-dimensional \
graphics directive specifying that surfaces that follow are"|>, 
 <|"label" -> "HamiltonianGraphQ", "type" -> "keyword", 
  "info" -> "HamiltonianGraphQ[g] yields True if the graph g is Hamiltonian, \
and False otherwise."|>, <|"label" -> "HammingDistance", "type" -> "keyword", 
  "info" -> "HammingDistance[u, v] gives the Hamming distance between strings \
or vectors u and v.HammingDistance["|>, <|"label" -> "HammingWindow", 
  "type" -> "keyword", "info" -> 
   "HammingWindow[x] represents a Hamming window function of x."|>, 
 <|"label" -> "HandlerFunctions", "type" -> "keyword", 
  "info" -> "HandlerFunctions is an option for asynchronous operations that \
specifies functions to apply when eve"|>, 
 <|"label" -> "HandlerFunctionsKeys", "type" -> "keyword", 
  "info" -> "HandlerFunctionsKeys is an option for asynchronous operations \
that specifies the content of associat"|>, <|"label" -> "HankelH1", 
  "type" -> "keyword", "info" -> "                                            \
                (1)\nHankelH1[n, z] gives the Hankel func"|>, 
 <|"label" -> "HankelH2", "type" -> "keyword", "info" -> "                    \
                                         (2)\nHankelH2[n, z] gives the Hankel \
fun"|>, <|"label" -> "HankelMatrix", "type" -> "keyword", 
  "info" -> "HankelMatrix[n] gives the \
n\[CapitalATilde]\203\[CapitalAHat]\227n Hankel matrix with first row and \
first column being successive integer"|>, <|"label" -> "HankelTransform", 
  "type" -> "keyword", "info" -> "HankelTransform[expr, r, s] gives the \
Hankel transform of order 0 for expr.HankelTransform[expr, r, "|>, 
 <|"label" -> "HannPoissonWindow", "type" -> "keyword", 
  "info" -> "HannPoissonWindow[x] represents a \
Hann\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Poisson window \
function of x.HannPoissonWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses \
the"|>, <|"label" -> "HannWindow", "type" -> "keyword", 
  "info" -> "HannWindow[x] represents a Hann window function of \
x.HannWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the parameter \
\[CapitalATilde]\216\\[PlusMinus].\n"|>, <|"label" -> "HaradaNortonGroupHN", 
  "type" -> "keyword", "info" -> "HaradaNortonGroupHN[] represents the \
sporadic simple \
Harada\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Norton group \
HN."|>, <|"label" -> "HararyGraph", "type" -> "keyword", 
  "info" -> "HararyGraph[k, n] generates the minimal k-connected graph on n \
vertices H    .\n                     "|>, <|"label" -> "HarmonicMean", 
  "type" -> "keyword", "info" -> 
   "HarmonicMean[list] gives the harmonic mean of the values in list."|>, 
 <|"label" -> "HarmonicNumber", "type" -> "keyword", 
  "info" -> "                              th                                 \
                                   "|>, <|"label" -> "Hash", 
  "type" -> "keyword", "info" -> "Hash[expr] gives an integer hash code for \
the expression expr.Hash[expr, \"type\"] gives an integer ha"|>, 
 <|"label" -> "HatchFilling", "type" -> "keyword", 
  "info" -> "HatchFilling[] is a two-dimensional graphics directive that \
specifies that faces of polygons and oth"|>, <|"label" -> "HatchShading", 
  "type" -> "keyword", "info" -> "HatchShading[] is a three-dimensional \
graphics directive specifying that objects that follow are to "|>, 
 <|"label" -> "Haversine", "type" -> "keyword", 
  "info" -> "Haversine[z] gives the haversine function hav(z)."|>, 
 <|"label" -> "HazardFunction", "type" -> "keyword", 
  "info" -> "HazardFunction[dist, x] gives the hazard function for the \
distribution dist evaluated at x.HazardFun"|>, 
 <|"label" -> "Head", "type" -> "keyword", "info" -> "Head[expr] gives the \
head of expr. Head[expr, h] wraps the result with h.\n"|>, 
 <|"label" -> "HeadCompose", "type" -> "keyword", 
  "info" -> "HeadCompose[a, b, c, d] gives a[b][c][d]."|>, 
 <|"label" -> "HeaderAlignment", "type" -> "keyword", 
  "info" -> "HeaderAlignment is an option for Dataset that specifies how the \
contents of a header should be align"|>, <|"label" -> "HeaderBackground", 
  "type" -> "keyword", "info" -> "HeaderBackground is an option for Dataset \
that specifies what background color to use for row and co"|>, 
 <|"label" -> "HeaderDisplayFunction", "type" -> "keyword", 
  "info" -> "HeaderDisplayFunction is an option for Dataset that specifies a \
function to apply to headers before "|>, <|"label" -> "HeaderLines", 
  "type" -> "keyword", "info" -> "HeaderLines is an option for SemanticImport \
and related functions that specifies how many of the ini"|>, 
 <|"label" -> "HeaderSize", "type" -> "keyword", 
  "info" -> "HeaderSize is an option for Dataset that specifies the widths \
and heights of headers."|>, <|"label" -> "HeaderStyle", "type" -> "keyword", 
  "info" -> "HeaderStyle is an option for Dataset that specifies the style to \
use for headers."|>, <|"label" -> "Heads", "type" -> "keyword", 
  "info" -> "Heads is an option for functions which use level specifications \
that specifies whether heads of expr"|>, <|"label" -> "HeatFluxValue", 
  "type" -> "keyword", "info" -> "HeatFluxValue[pred, vars, pars] represents \
a thermal heat flux boundary condition for PDEs with pred"|>, 
 <|"label" -> "HeatInsulationValue", "type" -> "keyword", 
  "info" -> "HeatInsulationValue[pred, vars, pars] represents a thermal \
insulation boundary condition for PDEs wi"|>, 
 <|"label" -> "HeatOutflowValue", "type" -> "keyword", 
  "info" -> "HeatOutflowValue[pred, vars, pars] represents a thermal outflow \
boundary condition for PDEs with pre"|>, <|"label" -> "HeatRadiationValue", 
  "type" -> "keyword", "info" -> "HeatRadiationValue[pred, vars, pars] \
represents a thermal radiation boundary condition for PDEs with"|>, 
 <|"label" -> "HeatSymmetryValue", "type" -> "keyword", 
  "info" -> "HeatSymmetryValue[pred, vars, pars] represents a thermal \
symmetry boundary condition for PDEs with p"|>, 
 <|"label" -> "HeatTemperatureCondition", "type" -> "keyword", 
  "info" -> "HeatTemperatureCondition[pred, vars, pars] represents a thermal \
surface boundary condition for PDEs "|>, 
 <|"label" -> "HeatTransferPDEComponent", "type" -> "keyword", 
  "info" -> "HeatTransferPDEComponent[vars, pars] yields a heat transfer PDE \
term with variables vars and paramet"|>, <|"label" -> "HeatTransferValue", 
  "type" -> "keyword", "info" -> "HeatTransferValue[pred, vars, pars] \
represents a thermal transfer boundary condition for PDEs with p"|>, 
 <|"label" -> "HeavisideLambda", "type" -> "keyword", 
  "info" -> "HeavisideLambda[x] represents the triangle distribution \
\[CapitalATilde]\216\[CapitalAHat]\233(x) which is nonzero for \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\203 x \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\204 < 1.Heavisid"|>, 
 <|"label" -> "HeavisidePi", "type" -> "keyword", 
  "info" -> "                                                                 \
           1                   1   "|>, <|"label" -> "HeavisideTheta", 
  "type" -> "keyword", "info" -> "HeavisideTheta[x] represents the Heaviside \
theta function \[CapitalATilde]\216\[CapitalAHat]\[Cedilla](x), equal to 0 \
for x < 0 and 1 for x > 0"|>, <|"label" -> "HeldGroupHe", 
  "type" -> "keyword", "info" -> 
   "HeldGroupHe[] represents the sporadic simple Held group He."|>, 
 <|"label" -> "HelmholtzPDEComponent", "type" -> "keyword", 
  "info" -> "                                                               2 \
                2\nHelmholtzPDECompo"|>, <|"label" -> "HelpBrowserSettings", 
  "type" -> "keyword", "info" -> "HelpBrowserSettings is a global option that \
specifies settings for the legacy Help Browser."|>, 
 <|"label" -> "Here", "type" -> "keyword", 
  "info" -> "Here represents the current deduced geo location."|>, 
 <|"label" -> "HermiteDecomposition", "type" -> "keyword", 
  "info" -> "HermiteDecomposition[m] gives the Hermite normal form \
decomposition of an integer matrix m."|>, <|"label" -> "HermiteH", 
  "type" -> "keyword", "info" -> "HermiteH[n, x] gives the Hermite polynomial \
H (x). \n                                             n"|>, 
 <|"label" -> "Hermitian", "type" -> "keyword", 
  "info" -> "Hermitian[{1, 2}] represents the symmetry of a Hermitian \
matrix."|>, <|"label" -> "HermitianMatrixQ", "type" -> "keyword", 
  "info" -> "HermitianMatrixQ[m] gives True if m is explicitly Hermitian, and \
False otherwise. "|>, <|"label" -> "HessenbergDecomposition", 
  "type" -> "keyword", "info" -> "HessenbergDecomposition[m] gives the \
Hessenberg decomposition of a numerical matrix m. "|>, 
 <|"label" -> "HeunB", "type" -> "keyword", "info" -> "HeunB[q, \
\[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b3, \
\[CapitalATilde]\216b4, \[CapitalATilde]\217\\[Micro], z] gives the \
bi-confluent Heun function. "|>, <|"label" -> "HeunBPrime", 
  "type" -> "keyword", "info" -> "HeunBPrime[q, \
\[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b3, \
\[CapitalATilde]\216b4, \[CapitalATilde]\217\\[Micro], z] gives the \
z-derivative of the HeunB function. "|>, <|"label" -> "HeunC", 
  "type" -> "keyword", "info" -> "HeunC[q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\217\\[Micro], z] gives the confluent Heun function."|>, 
 <|"label" -> "HeunCPrime", "type" -> "keyword", 
  "info" -> "HeunCPrime[q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\217\\[Micro], z] gives the z-derivative of the HeunC \
function. "|>, <|"label" -> "HeunD", "type" -> "keyword", 
  "info" -> "HeunD[q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\217\\[Micro], z] gives the double-confluent Heun function. "\
|>, <|"label" -> "HeunDPrime", "type" -> "keyword", 
  "info" -> "HeunDPrime[q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\217\\[Micro], z] gives the z-derivative of the HeunD \
function. "|>, <|"label" -> "HeunG", "type" -> "keyword", 
  "info" -> "HeunG[a, q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216b3, \[CapitalATilde]\216b4, z] \
gives the general Heun function. "|>, <|"label" -> "HeunGPrime", 
  "type" -> "keyword", "info" -> "HeunGPrime[a, q, \
\[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b2, \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, z] gives the z-derivative of \
the HeunG function. "|>, <|"label" -> "HeunT", "type" -> "keyword", 
  "info" -> "HeunT[q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\217\\[Micro], z] gives the tri-confluent Heun function. "|>, 
 <|"label" -> "HeunTPrime", "type" -> "keyword", 
  "info" -> "HeunTPrime[q, \[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\217\\[Micro], z] gives the z-derivative of the HeunT \
function. "|>, <|"label" -> "HexadecimalCharacter", "type" -> "keyword", 
  "info" -> "HexadecimalCharacter represents a hexadecimal digit character \
0\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\2239, \
a\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223f, \
A\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223F in \
StringExpression."|>, <|"label" -> "Hexahedron", "type" -> "keyword", 
  "info" -> "Hexahedron[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] represents \
a filled hexahedron with corners p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p \
.Hexahedron[{{p"|>, <|"label" -> "HiddenItems", "type" -> "keyword", 
  "info" -> 
   "HiddenItems is an option for Dataset that specifies which items to hide."\
|>, <|"label" -> "HiddenMarkovProcess", "type" -> "keyword", 
  "info" -> "HiddenMarkovProcess[i , m, em] represents a discrete-time, \
finite-state hidden Markov process with t"|>, <|"label" -> "HiddenSurface", 
  "type" -> "keyword", "info" -> "HiddenSurface is an option for \
SurfaceGraphics which specifies whether hidden surfaces are to be eli"|>, 
 <|"label" -> "Highlighted", "type" -> "keyword", 
  "info" -> "Highlighted[expr] displays a highlighted version of expr."|>, 
 <|"label" -> "HighlightGraph", "type" -> "keyword", 
  "info" -> "HighlightGraph[g, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] highlights the \
a  that can be vertices, edges, or subgraphs of g.High"|>, 
 <|"label" -> "HighlightImage", "type" -> "keyword", 
  "info" -> "HighlightImage[image, roi] highlights the specified region of \
interest roi in image.HighlightImage[i"|>, <|"label" -> "HighpassFilter", 
  "type" -> "keyword", "info" -> "HighpassFilter[data, \
\[CapitalATilde]\217\[CapitalAHat]\211 ] applies a highpass filter with a \
cutoff frequency \[CapitalATilde]\217\[CapitalAHat]\211  to an array of \
data.Hi"|>, <|"label" -> "HigmanSimsGroupHS", "type" -> "keyword", 
  "info" -> "HigmanSimsGroupHS[] represents the sporadic simple \
Higman\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Sims group \
HS."|>, <|"label" -> "HilbertCurve", "type" -> "keyword", 
  "info" -> "                                                           th    \
                                   "|>, <|"label" -> "HilbertFilter", 
  "type" -> "keyword", "info" -> "HilbertFilter[data, \
\[CapitalATilde]\217\[CapitalAHat]\211 ] applies a Hilbert filter with a \
cutoff frequency \[CapitalATilde]\217\[CapitalAHat]\211  to an array of \
data.Hilb"|>, <|"label" -> "HilbertMatrix", "type" -> "keyword", 
  "info" -> "HilbertMatrix[n] gives the \
n\[CapitalATilde]\203\[CapitalAHat]\227n Hilbert matrix with elements of the \
form 1/(i + j - 1).HilbertMatrix["|>, <|"label" -> "Histogram", 
  "type" -> "keyword", "info" -> "Histogram[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a \
histogram of the values x .Histogram[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, bspec] plots a \
hist"|>, <|"label" -> "Histogram3D", "type" -> "keyword", 
  "info" -> "Histogram3D[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a 3D \
histogram of the values {x , y }.Histogram3D[{{x , y"|>, 
 <|"label" -> "HistogramDistribution", "type" -> "keyword", 
  "info" -> "HistogramDistribution[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents the \
probability distribution corresponding to a histog"|>, 
 <|"label" -> "HistogramList", "type" -> "keyword", 
  "info" -> "HistogramList[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a list of \
bins and histogram heights of the values x .HistogramList"|>, 
 <|"label" -> "HistogramPointDensity", "type" -> "keyword", 
  "info" -> "HistogramPointDensity[pdata] estimates the histogram point \
density function \[CapitalATilde]\216\[CapitalAHat]\274(x) for point data \
pdat"|>, <|"label" -> "HistogramTransform", "type" -> "keyword", 
  "info" -> "HistogramTransform[image] transforms pixel values of image so \
that its histogram is nearly flat.Hist"|>, 
 <|"label" -> "HistogramTransformInterpolation", "type" -> "keyword", 
  "info" -> "HistogramTransformInterpolation[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] finds a \
function f so that the transformed values f(x )"|>, 
 <|"label" -> "HistoricalPeriodData", "type" -> "keyword", 
  "info" -> "HistoricalPeriodData[entity, property] gives the value of the \
specified property for the historical "|>, <|"label" -> "HitMissTransform", 
  "type" -> "keyword", "info" -> "HitMissTransform[image, ker] gives the \
hit-or-miss transform of image with respect to the composite "|>, 
 <|"label" -> "HITSCentrality", "type" -> "keyword", 
  "info" -> "HITSCentrality[g] gives a list of authority and hub centralities \
for the vertices in the graph g.HIT"|>, <|"label" -> "HjorthDistribution", 
  "type" -> "keyword", "info" -> "HjorthDistribution[m, s, f] represents the \
Hjorth distribution with location parameter m, scale para"|>, 
 <|"label" -> "HodgeDual", "type" -> "keyword", 
  "info" -> "HodgeDual[tensor] gives the Hodge dual of the \
tensorHodgeDual[tensor, dim] dualizes tensor in the sl"|>, 
 <|"label" -> "HoeffdingDTest", "type" -> "keyword", 
  "info" -> "HoeffdingDTest[v , v ] tests whether the vectors v  and v  are \
independent.HoeffdingDTest[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246, \"proper"|>, <|"label" -> "Hold", "type" -> "keyword", 
  "info" -> "Hold[expr] maintains expr in an unevaluated form. "|>, 
 <|"label" -> "HoldAll", "type" -> "keyword", "info" -> "HoldAll is an \
attribute that specifies that all arguments to a function are to be \
maintained in an u"|>, <|"label" -> "HoldAllComplete", "type" -> "keyword", 
  "info" -> "HoldAllComplete is an attribute which specifies that all \
arguments to a function are not to be modif"|>, 
 <|"label" -> "HoldComplete", "type" -> "keyword", 
  "info" -> "HoldComplete[expr] shields expr completely from the standard \
Wolfram Language evaluation process, pr"|>, <|"label" -> "HoldFirst", 
  "type" -> "keyword", "info" -> "HoldFirst is an attribute that specifies \
that the first argument to a function is to be maintained i"|>, 
 <|"label" -> "HoldForm", "type" -> "keyword", "info" -> "HoldForm[expr] \
prints as the expression expr, with expr maintained in an unevaluated form. "\
|>, <|"label" -> "HoldPattern", "type" -> "keyword", 
  "info" -> "HoldPattern[expr] is equivalent to expr for pattern matching, \
but maintains expr in an unevaluated f"|>, <|"label" -> "HoldRest", 
  "type" -> "keyword", "info" -> "HoldRest is an attribute which specifies \
that all but the first argument to a function are to be mai"|>, 
 <|"label" -> "HolidayCalendar", "type" -> "keyword", 
  "info" -> "HolidayCalendar is an option that specifies the holiday calendar \
schedule in business day functions."|>, <|"label" -> "HorizontalGauge", 
  "type" -> "keyword", "info" -> "HorizontalGauge[value] draws a linear gauge \
showing value in a range of 0 to 1.HorizontalGauge[value"|>, 
 <|"label" -> "HornerForm", "type" -> "keyword", 
  "info" -> "HornerForm[poly] puts the polynomial poly in Horner \
form.HornerForm[poly, vars] puts poly in Horner "|>, 
 <|"label" -> "HostLookup", "type" -> "keyword", 
  "info" -> "HostLookup[name] gives the IP address for the host with the \
specified name.HostLookup[address] gives"|>, 
 <|"label" -> "HotellingTSquareDistribution", "type" -> "keyword", 
  "info" -> "                                                           \
2\nHotellingTSquareDistribution[p, m] repr"|>, 
 <|"label" -> "HoytDistribution", "type" -> "keyword", 
  "info" -> "HoytDistribution[q, \[CapitalATilde]\217\[CapitalAHat]\211] \
represents a Hoyt distribution with shape parameter q and spread parameter \
\[CapitalATilde]\217\[CapitalAHat]\211."|>, <|"label" -> "HTTPErrorResponse", 
  "type" -> "keyword", "info" -> "HTTPErrorResponse[code] is an object that \
represents an error response to an HTTP request, with spec"|>, 
 <|"label" -> "HTTPRedirect", "type" -> "keyword", 
  "info" -> "HTTPRedirect[uri] represents an HTTP redirect to the specified \
uri.HTTPRedirect[uri, metadata] repre"|>, <|"label" -> "HTTPRequest", 
  "type" -> "keyword", "info" -> "HTTPRequest[url] represents an HTTP request \
for the specified URL.HTTPRequest[assoc] represents an H"|>, 
 <|"label" -> "HTTPRequestData", "type" -> "keyword", 
  "info" -> "HTTPRequestData[\"prop\"] gives the value of the specified \
property of the current HTTP request.HTTPRe"|>, 
 <|"label" -> "HTTPResponse", "type" -> "keyword", 
  "info" -> "HTTPResponse[body] is an object that represents a successful \
response to an HTTP request, with the s"|>, 
 <|"label" -> "Hue", "type" -> "keyword", "info" -> "Hue[h] represents a \
color in the HSB color space with hue h. Hue[h, s, b] specifies colors in \
terms "|>, <|"label" -> "HumanGrowthData", "type" -> "keyword", 
  "info" -> "HumanGrowthData[spec] returns the range of values within one \
standard deviation of the mean for all "|>, <|"label" -> "HumpDownHump", 
  "type" -> "keyword", "info" -> "HumpDownHump[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\216 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\216 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "HumpEqual", "type" -> "keyword", 
  "info" -> "HumpEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\217 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\217 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "HurwitzLerchPhi", "type" -> "keyword", 
  "info" -> "HurwitzLerchPhi[z, s, a] gives the \
Hurwitz\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Lerch \
transcendent \[CapitalATilde]\216\[CapitalAHat]\246(z, s, a)."|>, 
 <|"label" -> "HurwitzZeta", "type" -> "keyword", 
  "info" -> "HurwitzZeta[s, a] gives the Hurwitz zeta function \
\[CapitalATilde]\216\\[Paragraph](s, a)."|>, 
 <|"label" -> "HyperbolicDistribution", "type" -> "keyword", 
  "info" -> "HyperbolicDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216b4, \
\[CapitalATilde]\216\[CapitalAHat]\274] represents a hyperbolic distribution \
with location parameter \[CapitalATilde]\216\[CapitalAHat]\274, s"|>, 
 <|"label" -> "HypercubeGraph", "type" -> "keyword", 
  "info" -> "HypercubeGraph[n] gives the n-dimensional hypercube graph Q .\n  \
                                    "|>, 
 <|"label" -> "HyperexponentialDistribution", "type" -> "keyword", 
  "info" -> "HyperexponentialDistribution[{\[CapitalATilde]\216\\[PlusMinus] \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus] }, \
{\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] }] represents an m-phase \
hyperexponential distri"|>, <|"label" -> "Hyperfactorial", 
  "type" -> "keyword", "info" -> 
   "Hyperfactorial[n] gives the hyperfactorial function H(n)."|>, 
 <|"label" -> "Hypergeometric0F1", "type" -> "keyword", 
  "info" -> "Hypergeometric0F1[a, z] is the confluent hypergeometric function \
\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   \
\[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  F  (; a ; z). \n        \
       "|>, <|"label" -> "Hypergeometric0F1Regularized", "type" -> "keyword", 
  "info" -> "Hypergeometric0F1Regularized[a, z] is the regularized confluent \
hypergeometric function \[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]  \
 \[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  F  (a ;"|>, 
 <|"label" -> "Hypergeometric1F1", "type" -> "keyword", 
  "info" -> "Hypergeometric1F1[a, b, z] is the Kummer confluent \
hypergeometric function \[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]  \
 \[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  F  (a ; b ; z). \n   "\
|>, <|"label" -> "Hypergeometric1F1Regularized", "type" -> "keyword", 
  "info" -> "Hypergeometric1F1Regularized[a, b, z] is the regularized \
confluent hypergeometric function \
\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   \
\[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  F  ("|>, 
 <|"label" -> "Hypergeometric2F1", "type" -> "keyword", 
  "info" -> "Hypergeometric2F1[a, b, c, z] is the hypergeometric function \
\[CapitalATilde]\257\[CapitalAHat]\216b3  F (a, b ; c ; z). \n                \
 "|>, <|"label" -> "Hypergeometric2F1Regularized", "type" -> "keyword", 
  "info" -> "Hypergeometric2F1Regularized[a, b, c, z] is the regularized \
hypergeometric function \[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]  \
 \[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  F  (a, b ; "|>, 
 <|"label" -> "HypergeometricDistribution", "type" -> "keyword", 
  "info" -> "HypergeometricDistribution[n, n    , n   ] represents a \
hypergeometric distribution.\n               "|>, 
 <|"label" -> "HypergeometricPFQ", "type" -> "keyword", 
  "info" -> "HypergeometricPFQ[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }, {b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }, z] is the \
generalized hypergeometric function \
\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   \
\[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  F  (a"|>, 
 <|"label" -> "HypergeometricPFQRegularized", "type" -> "keyword", 
  "info" -> "HypergeometricPFQRegularized[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }, {b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }, z] is the \
regularized generalized hypergeomet"|>, <|"label" -> "HypergeometricU", 
  "type" -> "keyword", "info" -> "HypergeometricU[a, b, z] is the confluent \
hypergeometric function U(a, b, z). "|>, <|"label" -> "Hyperlink", 
  "type" -> "keyword", "info" -> "Hyperlink[uri] represents a hyperlink that \
jumps to the specified URI when clicked. Hyperlink[label,"|>, 
 <|"label" -> "Hyperplane", "type" -> "keyword", 
  "info" -> "Hyperplane[n, p] represents the hyperplane with normal n passing \
through the point p.Hyperplane[n, c"|>, <|"label" -> "Hyphenation", 
  "type" -> "keyword", "info" -> "Hyphenation is an option for Cell that \
specifies whether to allow hyphenation for words of text. "|>, 
 <|"label" -> "HypoexponentialDistribution", "type" -> "keyword", 
  "info" -> "HypoexponentialDistribution[{\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] }] represents an m-phase \
hypoexponential distribution with rat"|>, <|"label" -> "HypothesisTestData", 
  "type" -> "keyword", "info" -> "HypothesisTestData[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents hypothesis test data such as \
generated by DistributionFitTest, Ande"|>, 
 <|"label" -> "I", "type" -> "keyword", 
  "info" -> "I represents the imaginary unit Sqrt[-1]. "|>, 
 <|"label" -> "IconData", "type" -> "keyword", "info" -> "IconData[type, \
value] generates an icon of the specified type assuming the value given. "|>, 
 <|"label" -> "Iconize", "type" -> "keyword", "info" -> "Iconize[expr] gives \
an iconized form that can be used to stand in for expr in notebook \
input.Iconize"|>, <|"label" -> "IconRules", "type" -> "keyword", 
  "info" -> "IconRules is an option for CloudObject and related objects that \
specifies icons to use in different "|>, <|"label" -> "Icosahedron", 
  "type" -> "keyword", "info" -> "Icosahedron[] represents a regular \
icosahedron centered at the origin with unit edge length.Icosahed"|>, 
 <|"label" -> "Identity", "type" -> "keyword", 
  "info" -> "Identity[expr] gives expr (the identity operation). "|>, 
 <|"label" -> "IdentityMatrix", "type" -> "keyword", 
  "info" -> "IdentityMatrix[n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\222\[CapitalAHat] n identity matrix. "|>, 
 <|"label" -> "If", "type" -> "keyword", "info" -> "If[condition, t, f] gives \
t if condition evaluates to True, and f if it evaluates to False. If[condi"|>\
, <|"label" -> "IgnoreCase", "type" -> "keyword", 
  "info" -> "IgnoreCase is an option for string manipulation and searching \
functions that specifies whether lower"|>, <|"label" -> "IgnoreDiacritics", 
  "type" -> "keyword", "info" -> "IgnoreDiacritics is an option for string, \
grammar, and related functions that specifies whether diac"|>, 
 <|"label" -> "IgnoreIsotopes", "type" -> "keyword", 
  "info" -> "IgnoreIsotopes is an option for MoleculeMatchQ that determines \
whether isotopes should be ignored fo"|>, <|"label" -> "IgnorePunctuation", 
  "type" -> "keyword", "info" -> "IgnorePunctuation is an option for \
AlphabeticSort and related functions that specifies whether to co"|>, 
 <|"label" -> "IgnoreStereochemistry", "type" -> "keyword", 
  "info" -> "IgnoreStereochemistry is an option for MoleculeMatchQ that \
determines whether stereochemistry should"|>, 
 <|"label" -> "IgnoringInactive", "type" -> "keyword", 
  "info" -> "IgnoringInactive[patt] is a pattern object that, for purposes of \
pattern matching, ignores occurrenc"|>, <|"label" -> "Im", 
  "type" -> "keyword", "info" -> 
   "Im[z] gives the imaginary part of the complex number z. "|>, 
 <|"label" -> "Image", "type" -> "keyword", "info" -> "Image[data] represents \
a raster image with pixel values given by the array data.Image[graphics] \
crea"|>, <|"label" -> "Image3D", "type" -> "keyword", 
  "info" -> "Image3D[data] represents a 3D image with pixel values given by \
the array data.Image3D[{image , image"|>, <|"label" -> "Image3DProjection", 
  "type" -> "keyword", "info" -> "Image3DProjection[image] takes a 3D image \
and returns a 2D image of maximum projection onto the x-y "|>, 
 <|"label" -> "ImageAccumulate", "type" -> "keyword", 
  "info" -> "ImageAccumulate[image] gives an image in which each pixel \
represents a sum of all pixels below and t"|>, 
 <|"label" -> "ImageAdd", "type" -> "keyword", "info" -> "ImageAdd[image, x] \
adds an amount x to each channel value in image.ImageAdd[image , image ] \
gives an"|>, <|"label" -> "ImageAdjust", "type" -> "keyword", 
  "info" -> "ImageAdjust[image] adjusts the levels in image, rescaling them \
to cover the range 0 to 1.ImageAdjust"|>, <|"label" -> "ImageAlign", 
  "type" -> "keyword", "info" -> "ImageAlign[ref, image] returns a version of \
image that is aligned with the reference image ref.Image"|>, 
 <|"label" -> "ImageApply", "type" -> "keyword", 
  "info" -> "ImageApply[f, image] applies the function f to the list of \
channel values for each pixel in image.Im"|>, 
 <|"label" -> "ImageApplyIndexed", "type" -> "keyword", 
  "info" -> "ImageApplyIndexed[f, image] applies the function f to the list \
of channel values for each pixel in i"|>, <|"label" -> "ImageAspectRatio", 
  "type" -> "keyword", "info" -> "ImageAspectRatio[image] gives the ratio of \
height to width for image.ImageAspectRatio[video] gives t"|>, 
 <|"label" -> "ImageAssemble", "type" -> "keyword", 
  "info" -> "ImageAssemble[{{im  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, im  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {im  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, im  }}] \
assembles a single image from an array of image"|>, 
 <|"label" -> "ImageAugmentationLayer", "type" -> "keyword", 
  "info" -> "ImageAugmentationLayer[{h, w}] represents a net layer that \
applies random image transformations to p"|>, <|"label" -> "ImageCapture", 
  "type" -> "keyword", "info" -> "ImageCapture[] opens a graphical user \
interface for capturing images from connected cameras."|>, 
 <|"label" -> "ImageCaptureFunction", "type" -> "keyword", 
  "info" -> "ImageCaptureFunction is an option for ImageCapture that \
specifies the function to apply to images ac"|>, 
 <|"label" -> "ImageCases", "type" -> "keyword", 
  "info" -> "ImageCases[image] gives an association of lists of subimages for \
each identified category of objects"|>, <|"label" -> "ImageChannels", 
  "type" -> "keyword", "info" -> "ImageChannels[image] gives the number of \
channels present in the data for the Image or Image3D objec"|>, 
 <|"label" -> "ImageClip", "type" -> "keyword", 
  "info" -> "ImageClip[image] clips all channel values in image to lie in the \
default range.ImageClip[image, {min"|>, <|"label" -> "ImageCollage", 
  "type" -> "keyword", "info" -> "ImageCollage[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
collage of images image .ImageCollage[{w  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] image , w  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent]"|>, 
 <|"label" -> "ImageColorSpace", "type" -> "keyword", 
  "info" -> 
   "ImageColorSpace[image] gives the name of the color space of image."|>, 
 <|"label" -> "ImageCompose", "type" -> "keyword", 
  "info" -> "ImageCompose[image, overlay] gives the result of overlaying \
overlay onto image. ImageCompose[image, "|>, <|"label" -> "ImageContainsQ", 
  "type" -> "keyword", "info" -> "ImageContainsQ[image, category] returns \
True if an instance of the specified category is detected in"|>, 
 <|"label" -> "ImageContents", "type" -> "keyword", 
  "info" -> "ImageContents[image] gives a dataset of identified entities in \
image.ImageContents[image, category] "|>, <|"label" -> "ImageConvolve", 
  "type" -> "keyword", "info" -> 
   "ImageConvolve[image, ker] gives the convolution of image with kernel \
ker."|>, <|"label" -> "ImageCooccurrence", "type" -> "keyword", 
  "info" -> "ImageCooccurrence[image, n] gives the \
n\[CapitalATilde]\203\[CapitalAHat]\227n co-occurrence matrix for \
image.ImageCooccurrence[image, n,"|>, <|"label" -> "ImageCorners", 
  "type" -> "keyword", "info" -> "ImageCorners[image] finds corners in image \
and returns their coordinates.ImageCorners[image, r] find"|>, 
 <|"label" -> "ImageCorrelate", "type" -> "keyword", 
  "info" -> "ImageCorrelate[image, ker] gives the correlation of image with \
kernel ker.ImageCorrelate[image, ker,"|>, 
 <|"label" -> "ImageCorrespondingPoints", "type" -> "keyword", 
  "info" -> "ImageCorrespondingPoints[image , image ] finds a set of matching \
interest points in image  and image"|>, <|"label" -> "ImageCrop", 
  "type" -> "keyword", "info" -> "ImageCrop[image] crops image by removing \
borders of uniform color. ImageCrop[image, size] crops imag"|>, 
 <|"label" -> "ImageData", "type" -> "keyword", 
  "info" -> "ImageData[image] gives the array of pixel values in an Image or \
Image3D object image.ImageData[image"|>, <|"label" -> "ImageDeconvolve", 
  "type" -> "keyword", "info" -> "ImageDeconvolve[image, ker] gives a \
deconvolution of image using kernel ker."|>, <|"label" -> "ImageDemosaic", 
  "type" -> "keyword", "info" -> "ImageDemosaic[image, cfa] reconstructs a \
color image using the specified color filter array cfa.Imag"|>, 
 <|"label" -> "ImageDifference", "type" -> "keyword", 
  "info" -> "ImageDifference[image , image ] gives an image in which each \
pixel is the absolute difference of the"|>, <|"label" -> "ImageDimensions", 
  "type" -> "keyword", "info" -> "ImageDimensions[image] gives the pixel \
dimensions of an Image or Image3D object image.ImageDimension"|>, 
 <|"label" -> "ImageDisplacements", "type" -> "keyword", 
  "info" -> "ImageDisplacements[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, image }] gives \
estimated horizontal and vertical displacement"|>, 
 <|"label" -> "ImageDistance", "type" -> "keyword", 
  "info" -> "ImageDistance[image , image ] returns a distance measure between \
image  and image . ImageDistance[im"|>, <|"label" -> "ImageEffect", 
  "type" -> "keyword", "info" -> "ImageEffect[image, \"effect\"] applies the \
specified image effect to image.ImageEffect[image, {\"effect"|>, 
 <|"label" -> "ImageExposureCombine", "type" -> "keyword", 
  "info" -> "ImageExposureCombine[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] combines \
differently exposed images image  of the same sce"|>, 
 <|"label" -> "ImageFeatureTrack", "type" -> "keyword", 
  "info" -> "ImageFeatureTrack[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, image }] tracks \
features from image  through image .ImageFeatu"|>, 
 <|"label" -> "ImageFileApply", "type" -> "keyword", 
  "info" -> "ImageFileApply[f, inputfile, outputfile] applies the function f \
to the list of channel values for ea"|>, <|"label" -> "ImageFileFilter", 
  "type" -> "keyword", "info" -> "ImageFileFilter[f, inputfile, r, \
outputfile] applies the function f to the range r neighborhood of e"|>, 
 <|"label" -> "ImageFileScan", "type" -> "keyword", 
  "info" -> "ImageFileScan[f, inputfile] applies the function f to the list \
of channel values for each pixel of t"|>, <|"label" -> "ImageFilter", 
  "type" -> "keyword", "info" -> "ImageFilter[f, image, r] applies the \
function f to the range-r neighborhood of each pixel in each ch"|>, 
 <|"label" -> "ImageFocusCombine", "type" -> "keyword", 
  "info" -> "ImageFocusCombine[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] combines \
differently focused images image  of the same scene "|>, 
 <|"label" -> "ImageForestingComponents", "type" -> "keyword", 
  "info" -> "ImageForestingComponents[image] finds a segmentation of image, \
returning an integer matrix in which "|>, 
 <|"label" -> "ImageForwardTransformation", "type" -> "keyword", 
  "info" -> "ImageForwardTransformation[image, f] gives an image in which \
each pixel at position f[{x, y}] corres"|>, <|"label" -> "ImageGraphics", 
  "type" -> "keyword", "info" -> "ImageGraphics[image] returns the content of \
image in the form of scalable vector graphics.ImageGraph"|>, 
 <|"label" -> "ImageHistogram", "type" -> "keyword", 
  "info" -> "ImageHistogram[image] plots a histogram of the pixel levels for \
each channel in image.ImageHistogram"|>, <|"label" -> "ImageIdentify", 
  "type" -> "keyword", "info" -> "ImageIdentify[image] yields the result of \
attempting to identify what image is a picture of. ImageId"|>, 
 <|"label" -> "ImageInstanceQ", "type" -> "keyword", 
  "info" -> "ImageInstanceQ[image, obj] gives True if image appears to be an \
instance of the object obj, and give"|>, <|"label" -> "ImageKeypoints", 
  "type" -> "keyword", "info" -> "ImageKeypoints[image] finds key features in \
image and returns their coordinates.ImageKeypoints[image"|>, 
 <|"label" -> "ImageLabels", "type" -> "keyword", 
  "info" -> "ImageLabels is an option for image highlighting that specifies \
what labels to use for each highlight"|>, <|"label" -> "ImageLegends", 
  "type" -> "keyword", "info" -> "ImageLegends is an option for image \
highlighting that specifies what legends to use."|>, 
 <|"label" -> "ImageLevels", "type" -> "keyword", 
  "info" -> "ImageLevels[image] gives a list of pixel values and counts for \
each channel in image. ImageLevels[im"|>, <|"label" -> "ImageLines", 
  "type" -> "keyword", "info" -> "ImageLines[image] finds line segments in \
image and returns the coordinates of their endpoints.ImageL"|>, 
 <|"label" -> "ImageMargins", "type" -> "keyword", 
  "info" -> "ImageMargins is an option that specifies the absolute margins to \
leave around the image displayed fo"|>, <|"label" -> "ImageMarker", 
  "type" -> "keyword", "info" -> "ImageMarker[pos] is a HighlightImage \
specification that represents a marker at position pos.ImageMar"|>, 
 <|"label" -> "ImageMeasurements", "type" -> "keyword", 
  "info" -> "ImageMeasurements[image, \"prop\"] returns the value of property \
\"prop\" for the entire image.ImageMeas"|>, <|"label" -> "ImageMesh", 
  "type" -> "keyword", "info" -> "ImageMesh[image] returns the foreground \
region in image as a BoundaryMeshRegion object."|>, 
 <|"label" -> "ImageMultiply", "type" -> "keyword", 
  "info" -> "ImageMultiply[image, x] multiplies each channel value in image \
by a factor x.ImageMultiply[image , i"|>, <|"label" -> "ImagePad", 
  "type" -> "keyword", "info" -> "ImagePad[image, m] pads image on all sides \
with m background pixels.ImagePad[image, m, padding] pads"|>, 
 <|"label" -> "ImagePadding", "type" -> "keyword", 
  "info" -> "ImagePadding is an option for graphics functions that specifies \
what absolute extra padding should b"|>, <|"label" -> "ImagePartition", 
  "type" -> "keyword", "info" -> "ImagePartition[image, s] partitions an \
image into an array of s\[CapitalATilde]\257\[CapitalAHat]\222\[CapitalAHat] \
s-pixel subimages.ImagePartition[ima"|>, <|"label" -> "ImagePeriodogram", 
  "type" -> "keyword", "info" -> "ImagePeriodogram[image] shows the squared \
magnitude of the discrete Fourier transform (power spectru"|>, 
 <|"label" -> "ImagePerspectiveTransformation", "type" -> "keyword", 
  "info" -> "ImagePerspectiveTransformation[image, m] applies a linear \
fractional transform specified by a matrix"|>, 
 <|"label" -> "ImagePosition", "type" -> "keyword", 
  "info" -> "ImagePosition[image] gives an association of image positions for \
each identified category of objects"|>, <|"label" -> "ImagePreviewFunction", 
  "type" -> "keyword", "info" -> "ImagePreviewFunction is an option for \
CurrentImage and similar functions that specifies the function"|>, 
 <|"label" -> "ImagePyramid", "type" -> "keyword", 
  "info" -> "ImagePyramid[image] creates a Gaussian image pyramid formed from \
image.ImagePyramid[image, pyrtype] "|>, <|"label" -> "ImagePyramidApply", 
  "type" -> "keyword", "info" -> "ImagePyramidApply[f, pyr] applies f to all \
images in the ImagePyramid object pyr.ImagePyramidApply[f"|>, 
 <|"label" -> "ImageQ", "type" -> "keyword", "info" -> "ImageQ[image] yields \
True if image has the form of a valid Image or Image3D object, and False \
otherw"|>, <|"label" -> "ImageRecolor", "type" -> "keyword", 
  "info" -> "ImageRecolor[image, region \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] color] recolors \
pixels in image specified by region using the specified"|>, 
 <|"label" -> "ImageReflect", "type" -> "keyword", 
  "info" -> "ImageReflect[image] reverses image by top-bottom mirror \
reflection. ImageReflect[image, side] revers"|>, 
 <|"label" -> "ImageResize", "type" -> "keyword", 
  "info" -> "ImageResize[image, width] gives a resized version of image that \
is width pixels wide.ImageResize[ima"|>, <|"label" -> "ImageResolution", 
  "type" -> "keyword", "info" -> "ImageResolution is an option for Export, \
Rasterize, and related functions that specifies at what res"|>, 
 <|"label" -> "ImageRestyle", "type" -> "keyword", 
  "info" -> "ImageRestyle[image, sample] attempts to restyle image so as to \
follow the graphical style of sample."|>, <|"label" -> "ImageRotate", 
  "type" -> "keyword", "info" -> "ImageRotate[image] rotates image by \
90\[CapitalATilde]\202\\[Degree] about its center in the x-y plane. \
ImageRotate[image, \[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] rot"|>, 
 <|"label" -> "ImageRotated", "type" -> "keyword", 
  "info" -> "ImageRotated is an option for Export that specifies whether \
images should be rotated into landscape "|>, 
 <|"label" -> "ImageSaliencyFilter", "type" -> "keyword", 
  "info" -> "ImageSaliencyFilter[image] returns a saliency map for image."|>, 
 <|"label" -> "ImageScaled", "type" -> "keyword", 
  "info" -> "ImageScaled[{x, y}] gives the position of a graphical object in \
terms of coordinates scaled to run f"|>, <|"label" -> "ImageScan", 
  "type" -> "keyword", "info" -> 
   "ImageScan[f, image] evaluates f applied to each pixel of image in turn."|>\
, <|"label" -> "ImageSize", "type" -> "keyword", 
  "info" -> "ImageSize is an option that specifies the overall size of an \
image to display for an object. "|>, <|"label" -> "ImageSizeAction", 
  "type" -> "keyword", "info" -> "ImageSizeAction is an option for Pane and \
related constructs that specifies what to do if the specif"|>, 
 <|"label" -> "ImageSizeMultipliers", "type" -> "keyword", 
  "info" -> "ImageSizeMultipliers is an option that specifies how much \
smaller to render graphics that appear wit"|>, 
 <|"label" -> "ImageStitch", "type" -> "keyword", 
  "info" -> "ImageStitch[{image , image , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
composed image from an unordered list of image .ImageStitch"|>, 
 <|"label" -> "ImageSubtract", "type" -> "keyword", 
  "info" -> "ImageSubtract[image, x] subtracts a constant amount x from each \
channel value in image.ImageSubtract"|>, <|"label" -> "ImageTake", 
  "type" -> "keyword", "info" -> "ImageTake[image, n] gives an image \
consisting of the first n rows of image.ImageTake[image, -n] give"|>, 
 <|"label" -> "ImageTransformation", "type" -> "keyword", 
  "info" -> "ImageTransformation[image, f] gives an image in which each pixel \
at position p corresponds to the po"|>, <|"label" -> "ImageTrim", 
  "type" -> "keyword", "info" -> "ImageTrim[image, roi] gives the smallest \
subimage of image that includes the specified region of int"|>, 
 <|"label" -> "ImageType", "type" -> "keyword", 
  "info" -> "ImageType[image] gives the underlying type of values used for \
each pixel element in the Image or Ima"|>, <|"label" -> "ImageValue", 
  "type" -> "keyword", "info" -> "ImageValue[image, pos] gives the \
interpolated value of image at position pos.ImageValue[image, pos, "|>, 
 <|"label" -> "ImageValuePositions", "type" -> "keyword", 
  "info" -> "ImageValuePositions[image, val] returns a list of pixel \
positions in image that exactly match the va"|>, 
 <|"label" -> "ImageVectorscopePlot", "type" -> "keyword", 
  "info" -> "ImageVectorscopePlot[image] plots the chrominance of image."|>, 
 <|"label" -> "ImageWaveformPlot", "type" -> "keyword", 
  "info" -> "ImageWaveformPlot[image] plots the waveform of \
image.ImageWaveformPlot[image, colorspace] plots the "|>, 
 <|"label" -> "ImagingDevice", "type" -> "keyword", 
  "info" -> "ImagingDevice is an option to specify what device to use for \
capturing images."|>, <|"label" -> "ImplicitRegion", "type" -> "keyword", 
  "info" -> "                                                          n      \
                                   "|>, <|"label" -> "Implies", 
  "type" -> "keyword", "info" -> "Implies[p, q] represents the logical \
implication p \[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\222 q. \
"|>, <|"label" -> "Import", "type" -> "keyword", 
  "info" -> "Import[source] imports data from source, returning a Wolfram \
Language representation of it.Import[so"|>, <|"label" -> "ImportByteArray", 
  "type" -> "keyword", "info" -> "ImportByteArray[ba, \"format\"] imports \
data in the specified format from a ByteArray object.ImportByt"|>, 
 <|"label" -> "ImportedObject", "type" -> "keyword", 
  "info" -> "ImportedObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a piece of imported data that has no special \
representation in the Wolf"|>, <|"label" -> "ImportOptions", 
  "type" -> "keyword", "info" -> "ImportOptions is an option for Interpreter \
and related functions that specifies what options should "|>, 
 <|"label" -> "ImportString", "type" -> "keyword", 
  "info" -> "ImportString[\"data\", \"format\"] imports data in the specified \
format from a string. ImportString[\"dat"|>, 
 <|"label" -> "ImprovementImportance", "type" -> "keyword", 
  "info" -> "ImprovementImportance[rdist, t] gives the improvement \
importances for all components in the Reliabil"|>, 
 <|"label" -> "In", "type" -> "keyword", "info" -> "                          \
                                                 th\nIn[n] is a global obje"|>\
, <|"label" -> "Inactivate", "type" -> "keyword", 
  "info" -> "Inactivate[expr] replaces all instances of f with Inactive[f] \
for symbols f used as heads in expr.In"|>, <|"label" -> "Inactive", 
  "type" -> "keyword", "info" -> "Inactive[f] is an inactive form of f."|>, 
 <|"label" -> "IncidenceGraph", "type" -> "keyword", 
  "info" -> "IncidenceGraph[m] gives the graph with incidence matrix \
m.IncidenceGraph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, m] gives the g"\
|>, <|"label" -> "IncidenceList", "type" -> "keyword", 
  "info" -> "IncidenceList[g, v] gives a list of edges incident to vertex \
v.IncidenceList[g, patt] gives a list o"|>, <|"label" -> "IncidenceMatrix", 
  "type" -> "keyword", "info" -> "IncidenceMatrix[g] gives the vertex-edge \
incidence matrix of the graph g.IncidenceMatrix[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}]"|>, 
 <|"label" -> "IncludeAromaticBonds", "type" -> "keyword", 
  "info" -> "IncludeAromaticBonds is an option for Molecule that specifies \
whether aromatic bonds should be detec"|>, 
 <|"label" -> "IncludeConstantBasis", "type" -> "keyword", 
  "info" -> "IncludeConstantBasis is an option for LinearModelFit and other \
fitting functions that specifies whet"|>, <|"label" -> "IncludedContexts", 
  "type" -> "keyword", "info" -> "IncludedContexts is an option for \
FullDefinition, Manipulate and related symbols that gives contexts"|>, 
 <|"label" -> "IncludeDirectories", "type" -> "keyword", 
  "info" -> "IncludeDirectories is an option that specifies whether \
directories are included in evaluations."|>, 
 <|"label" -> "IncludeGeneratorTasks", "type" -> "keyword", 
  "info" -> "IncludeGeneratorTasks is an option controlling the scope of \
scheduled task listings."|>, <|"label" -> "IncludeHydrogens", 
  "type" -> "keyword", "info" -> "IncludeHydrogens is an option that \
specifies whether hydrogen atoms should be explicitly included in"|>, 
 <|"label" -> "IncludeInflections", "type" -> "keyword", 
  "info" -> "IncludeInflections is an option for linguistic functions that \
specifies whether inflected forms of w"|>, 
 <|"label" -> "IncludeMetaInformation", "type" -> "keyword", 
  "info" -> "IncludeMetaInformation is an option for Import, Thumbnail, and \
other functions to specify what types"|>, <|"label" -> "IncludePods", 
  "type" -> "keyword", "info" -> "IncludePods is an option for WolframAlpha \
that determines specific pod IDs to include in the results"|>, 
 <|"label" -> "IncludeQuantities", "type" -> "keyword", 
  "info" -> "IncludeQuantities is an option for DimensionalCombinations for \
additional quantities to include in t"|>, 
 <|"label" -> "IncludeRelatedTables", "type" -> "keyword", 
  "info" -> "IncludeRelatedTables is an option for RelationalDatabase that \
specifies whether to include tables sp"|>, <|"label" -> "IncludeWindowTimes", 
  "type" -> "keyword", "info" -> "IncludeWindowTimes is an option to \
TimeSeriesWindow that specifies whether the endpoints in the time"|>, 
 <|"label" -> "Increment", "type" -> "keyword", 
  "info" -> 
   "x ++ increases the value of x by 1, returning the old value of x. "|>, 
 <|"label" -> "IndefiniteMatrixQ", "type" -> "keyword", 
  "info" -> "IndefiniteMatrixQ[m] gives True if m is explicitly indefinite, \
and False otherwise. "|>, <|"label" -> "IndependenceTest", 
  "type" -> "keyword", "info" -> "IndependenceTest[v , v ] tests whether the \
vectors v  and v  are independent.IndependenceTest[m , m "|>, 
 <|"label" -> "IndependentEdgeSetQ", "type" -> "keyword", 
  "info" -> "IndependentEdgeSetQ[g, elist] yields True if the edge list elist \
is an independent edge set of the g"|>, 
 <|"label" -> "IndependentPhysicalQuantity", "type" -> "keyword", 
  "info" -> "IndependentPhysicalQuantity[string] represents a physical \
quantity string with no relationship to ot"|>, 
 <|"label" -> "IndependentUnit", "type" -> "keyword", 
  "info" -> "IndependentUnit[string] represents a unit string with no \
relationship to other units within a Quanti"|>, 
 <|"label" -> "IndependentUnitDimension", "type" -> "keyword", 
  "info" -> "IndependentUnitDimension[dim] represents the base dimension dim \
associated with an independent physi"|>, 
 <|"label" -> "IndependentVertexSetQ", "type" -> "keyword", 
  "info" -> "IndependentVertexSetQ[g, vlist] yields True if the vertex list \
vlist is an independent vertex set in"|>, <|"label" -> "Indeterminate", 
  "type" -> "keyword", "info" -> "Indeterminate is a symbol that represents a \
numerical quantity whose magnitude cannot be determined."|>, 
 <|"label" -> "IndeterminateThreshold", "type" -> "keyword", 
  "info" -> "IndeterminateThreshold is an option for Classify, Predict, and \
related functions that specifies belo"|>, <|"label" -> "Indexed", 
  "type" -> "keyword", "info" -> "Indexed[expr, i] represents the component \
of expr with index i and formats as expr .Indexed[expr, {i"|>, 
 <|"label" -> "IndexEdgeTaggedGraph", "type" -> "keyword", 
  "info" -> "IndexEdgeTaggedGraph[g] sets tags of edges in the graph g to \
their edge indices.IndexEdgeTaggedGraph"|>, <|"label" -> "IndexGraph", 
  "type" -> "keyword", "info" -> "IndexGraph[g] replaces the vertices of the \
graph g by its vertex indices.IndexGraph[g, r] replaces t"|>, 
 <|"label" -> "Inequality", "type" -> "keyword", 
  "info" -> "Inequality represents a sequence of relational statements."|>, 
 <|"label" -> "InexactNumberQ", "type" -> "keyword", 
  "info" -> "InexactNumberQ[expr] returns True if expr is an inexact real or \
complex number, and returns False ot"|>, <|"label" -> "InfiniteFuture", 
  "type" -> "keyword", "info" -> "InfiniteFuture returns a DateObject \
expression representing infinite future in time."|>, 
 <|"label" -> "InfiniteLine", "type" -> "keyword", 
  "info" -> "InfiniteLine[{p , p }] represents the infinite straight line \
passing through the points p  and p . I"|>, <|"label" -> "InfinitePast", 
  "type" -> "keyword", "info" -> "InfinitePast returns a DateObject \
expression representing infinite past in time."|>, 
 <|"label" -> "InfinitePlane", "type" -> "keyword", 
  "info" -> "InfinitePlane[{p , p , p }] represents the plane passing through \
the points p , p , and p .InfiniteP"|>, <|"label" -> "Infinity", 
  "type" -> "keyword", "info" -> "Infinity or \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\236 is a symbol that \
represents a positive infinite quantity. "|>, 
 <|"label" -> "Infix", "type" -> "keyword", "info" -> "Infix[f[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]] prints with f[e \
, e , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] given in \
default infix form: e  ~ f ~ e  ~ f ~ e  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246. In"|>, 
 <|"label" -> "InflationAdjust", "type" -> "keyword", 
  "info" -> "InflationAdjust[quantity, targetdate] attempts to adjust the \
specified quantity purchasing power to "|>, <|"label" -> "InflationMethod", 
  "type" -> "keyword", "info" -> "InflationMethod is an option for \
InflationAdjust that specifies what time series data is to be used "|>, 
 <|"label" -> "Information", "type" -> "keyword", 
  "info" -> "Information[expr] gives information about the expression expr. \
Information[expr, prop] gives the val"|>, <|"label" -> "InformationData", 
  "type" -> "keyword", "info" -> "InformationData[assoc] is generated by \
Information[expr] and handle typesetting and element extracti"|>, 
 <|"label" -> "Inherited", "type" -> "keyword", 
  "info" -> "Inherited is an option to Methods and Fields (in J/Link) and \
NETTypeInfo (in .NET/Link). The default"|>, <|"label" -> "InheritScope", 
  "type" -> "keyword", "info" -> "InheritScope is an option for DynamicModule \
that specifies whether to attempt to bind variables refe"|>, 
 <|"label" -> "InhomogeneousPoissonProcess", "type" -> "keyword", 
  "info" -> "InhomogeneousPoissonProcess[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet][t], t] represents an inhomogeneous Poisson process with \
intensity \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet][t]"|>, 
 <|"label" -> "Initialize", "type" -> "keyword", 
  "info" -> "Initialize[sym] initializes the symbol sym from persistent \
values on the default persistence path.In"|>, <|"label" -> "InitialSeeding", 
  "type" -> "keyword", "info" -> "InitialSeeding is an option for NDSolve and \
other functions that specifies equations that specify in"|>, 
 <|"label" -> "Inner", "type" -> "keyword", "info" -> "Inner[f, list , list , \
g] is a generalization of Dot in which f plays the role of multiplication \
and"|>, <|"label" -> "InnerPolygon", "type" -> "keyword", 
  "info" -> 
   "InnerPolygon[poly] gives the inner polygon of the polygon poly."|>, 
 <|"label" -> "InnerPolyhedron", "type" -> "keyword", 
  "info" -> 
   "InnerPolyhedron[poly] gives the inner polyhedron of the polyhedron poly."\
|>, <|"label" -> "Inpaint", "type" -> "keyword", 
  "info" -> "Inpaint[image, region] retouches parts of image that correspond \
to nonzero elements in region."|>, <|"label" -> "Input", "type" -> "keyword", 
  "info" -> "Input[] interactively reads in one Wolfram Language expression. \
Input[prompt] requests input, displa"|>, <|"label" -> "InputAssumptions", 
  "type" -> "keyword", "info" -> "InputAssumptions is an option for \
WolframAlpha that specifies assumptions for current query input."|>, 
 <|"label" -> "InputForm", "type" -> "keyword", 
  "info" -> "InputForm[expr] prints as a version of expr suitable for input \
to the Wolfram Language. "|>, <|"label" -> "InputNamePacket", 
  "type" -> "keyword", "info" -> "InputNamePacket[string] is a WSTP packet \
that contains in string the name to be assigned to the next"|>, 
 <|"label" -> "InputPacket", "type" -> "keyword", 
  "info" -> "InputPacket[] is a WSTP packet that indicates a prompt for input \
as generated by Input."|>, <|"label" -> "InputPorts", "type" -> "keyword", 
  "info" -> "InputPorts is an option to specify the number, names or shapes \
of input ports for some neural net la"|>, <|"label" -> "InputStream", 
  "type" -> "keyword", "info" -> "InputStream[\"name\", n] is an object that \
represents an input stream for functions such as Read and F"|>, 
 <|"label" -> "InputString", "type" -> "keyword", 
  "info" -> "InputString[] interactively reads in a character string. \
InputString[prompt] requests input, display"|>, 
 <|"label" -> "InputStringPacket", "type" -> "keyword", 
  "info" -> 
   "InputStringPacket[] is a WSTP packet that requests input in string form."\
|>, <|"label" -> "Insert", "type" -> "keyword", 
  "info" -> "Insert[list, elem, n] inserts elem at position n in list. If n \
is negative, the position is counted "|>, <|"label" -> "InsertionFunction", 
  "type" -> "keyword", "info" -> "InsertionFunction is an option for template \
functions that specifies how expressions are to be proce"|>, 
 <|"label" -> "InsertLinebreaks", "type" -> "keyword", 
  "info" -> "InsertLinebreaks[\"string\"] inserts newline characters into \
string to make a string in which no line "|>, 
 <|"label" -> "Inset", "type" -> "keyword", "info" -> "Inset[obj] represents \
an object obj inset in a graphic. Inset[obj, pos] specifies that the inset \
sho"|>, <|"label" -> "Install", "type" -> "keyword", 
  "info" -> "Install[\"name\"] starts a WSTP-compatible external program and \
installs Wolfram Language definitions "|>, <|"label" -> "InstallService", 
  "type" -> "keyword", "info" -> "InstallService[\"url\"] installs the web \
service operations in the WSDL description at the URL given.I"|>, 
 <|"label" -> "InstanceNormalizationLayer", "type" -> "keyword", 
  "info" -> 
   "InstanceNormalizationLayer[] is equivalent to NormalizationLayer[]."|>, 
 <|"label" -> "InString", "type" -> "keyword", "info" -> "                    \
                                                    th\nInString[n] is a \
global o"|>, <|"label" -> "Integer", "type" -> "keyword", 
  "info" -> "Integer is the head used for integers. "|>, 
 <|"label" -> "IntegerDigits", "type" -> "keyword", 
  "info" -> "IntegerDigits[n] gives a list of the decimal digits in the \
integer n. IntegerDigits[n, b] gives a li"|>, <|"label" -> "IntegerExponent", 
  "type" -> "keyword", "info" -> 
   "IntegerExponent[n, b] gives the highest power of b that divides n. "|>, 
 <|"label" -> "IntegerLength", "type" -> "keyword", 
  "info" -> "IntegerLength[n] gives the number of digits in the base 10 \
representation of the integer n.IntegerLe"|>, <|"label" -> "IntegerName", 
  "type" -> "keyword", "info" -> "IntegerName[n] gives a string containing \
the full English name of the integer n.IntegerName[n, quali"|>, 
 <|"label" -> "IntegerPart", "type" -> "keyword", 
  "info" -> "IntegerPart[x] gives the integer part of x. "|>, 
 <|"label" -> "IntegerPartitions", "type" -> "keyword", 
  "info" -> "IntegerPartitions[n] gives a list of all possible ways to \
partition the integer n into smaller integ"|>, 
 <|"label" -> "IntegerQ", "type" -> "keyword", 
  "info" -> 
   "IntegerQ[expr] gives True if expr is an integer, and False otherwise. "|>\
, <|"label" -> "IntegerReverse", "type" -> "keyword", 
  "info" -> "IntegerReverse[n] gives the integer whose digits are reversed \
with respect to those of the integer n"|>, <|"label" -> "Integers", 
  "type" -> "keyword", "info" -> "Integers represents the domain of integers, \
as in x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Integers. \
"|>, <|"label" -> "IntegerString", "type" -> "keyword", 
  "info" -> "IntegerString[n] gives a string consisting of the decimal digits \
in the integer n. IntegerString[n, "|>, <|"label" -> "Interactive", 
  "type" -> "keyword", "info" -> "Interactive is an option that specifies \
whether a function should create a user prompt when mimickin"|>, 
 <|"label" -> "InteractiveTradingChart", "type" -> "keyword", 
  "info" -> "InteractiveTradingChart[{{date , {open , high , low , close , \
volume }}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
makes a chart showing p"|>, <|"label" -> "InterfaceSwitched", 
  "type" -> "keyword", "info" -> "InterfaceSwitched[\[CapitalATilde]\257\
\[CapitalAHat]\204\[CapitalAHat]\223 size  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] expr , size  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246|>] is a construct \
that behaves as if it were exp"|>, <|"label" -> "Interleaving", 
  "type" -> "keyword", "info" -> "Interleaving is an option for Image and \
related functions that specifies whether data corresponding "|>, 
 <|"label" -> "InternallyBalancedDecomposition", "type" -> "keyword", 
  "info" -> "InternallyBalancedDecomposition[ssm] yields the internally \
balanced decomposition of the state-space"|>, 
 <|"label" -> "InterpolatingFunction", "type" -> "keyword", 
  "info" -> "InterpolatingFunction[domain, table] represents an approximate \
function whose values are found by in"|>, 
 <|"label" -> "InterpolatingPolynomial", "type" -> "keyword", 
  "info" -> "InterpolatingPolynomial[{f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] constructs \
an interpolating polynomial in x which reproduces"|>, 
 <|"label" -> "Interpolation", "type" -> "keyword", 
  "info" -> "Interpolation[{f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] constructs an \
interpolation of the function values f , assumed to corresp"|>, 
 <|"label" -> "InterpolationOrder", "type" -> "keyword", 
  "info" -> "InterpolationOrder is an option for Interpolation, as well as \
ListLinePlot, ListPlot3D, ListContourP"|>, 
 <|"label" -> "InterpolationPoints", "type" -> "keyword", 
  "info" -> "InterpolationPoints is an option to SmoothKernelDistribution and \
FunctionInterpolation that specifie"|>, <|"label" -> "Interpretation", 
  "type" -> "keyword", "info" -> "Interpretation[e, expr] represents an \
object that displays as e, but is interpreted as the unevaluat"|>, 
 <|"label" -> "Interpreter", "type" -> "keyword", 
  "info" -> "Interpreter[form] represents an interpreter object that can be \
applied to an input to try to interpr"|>, <|"label" -> "InterpretTemplate", 
  "type" -> "keyword", "info" -> "InterpretTemplate is an experimental \
function used for interpreting Mathematica input."|>, 
 <|"label" -> "InterquartileRange", "type" -> "keyword", 
  "info" -> "InterquartileRange[list] gives the difference between the upper \
and lower quartiles for the elements"|>, <|"label" -> "Interrupt", 
  "type" -> "keyword", "info" -> "Interrupt[] generates an interrupt. "|>, 
 <|"label" -> "IntersectedEntityClass", "type" -> "keyword", 
  "info" -> "IntersectedEntityClass[class , class , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an \
entity class containing all the entities com"|>, 
 <|"label" -> "IntersectingQ", "type" -> "keyword", 
  "info" -> "IntersectingQ[list , list ] yields True if list  and list  have \
at least one element in common, and "|>, <|"label" -> "Intersection", 
  "type" -> "keyword", "info" -> "Intersection[list , list , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives a sorted \
list of the elements common to all the list . \n        "|>, 
 <|"label" -> "Interval", "type" -> "keyword", "info" -> "Interval[{min, \
max}] represents the range of values between min and max. Interval[{min , max \
}, {min"|>, <|"label" -> "IntervalIntersection", "type" -> "keyword", 
  "info" -> "IntervalIntersection[interval , interval , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
interval representing all points common to e"|>, 
 <|"label" -> "IntervalMarkers", "type" -> "keyword", 
  "info" -> "IntervalMarkers is an option for plotting functions such as \
ListPlot and BarChart that specifies how"|>, 
 <|"label" -> "IntervalMarkersStyle", "type" -> "keyword", 
  "info" -> "IntervalMarkersStyle  is an option for plotting functions that \
specifies styles in which uncertainty"|>, <|"label" -> "IntervalMemberQ", 
  "type" -> "keyword", "info" -> "IntervalMemberQ[interval, x] gives True if \
the number x lies within the specified interval, and Fals"|>, 
 <|"label" -> "IntervalSlider", "type" -> "keyword", 
  "info" -> "IntervalSlider[{xmin, xmax}] represents a slider with setting \
{xmin, xmax} in the range 0 to 1.Inter"|>, <|"label" -> "IntervalUnion", 
  "type" -> "keyword", "info" -> "IntervalUnion[interval , interval , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives an \
interval containing the set of all points in any of "|>, 
 <|"label" -> "Inverse", "type" -> "keyword", 
  "info" -> "Inverse[m] gives the inverse of a square matrix m. "|>, 
 <|"label" -> "InverseBetaRegularized", "type" -> "keyword", 
  "info" -> "InverseBetaRegularized[s, a, b] gives the inverse of the \
regularized incomplete beta function. "|>, 
 <|"label" -> "InverseBilateralLaplaceTransform", "type" -> "keyword", 
  "info" -> "InverseBilateralLaplaceTransform[expr, s, t] gives the inverse \
bilateral Laplace transform of expr. "|>, 
 <|"label" -> "InverseBilateralZTransform", "type" -> "keyword", 
  "info" -> "InverseBilateralZTransform[expr, z, n] gives the inverse \
bilateral Z transform of expr.InverseBilate"|>, 
 <|"label" -> "InverseCDF", "type" -> "keyword", 
  "info" -> "InverseCDF[dist, q] gives the inverse of the cumulative \
distribution function for the distribution d"|>, 
 <|"label" -> "InverseChiSquareDistribution", "type" -> "keyword", 
  "info" -> "                                                       2         \
                                   "|>, 
 <|"label" -> "InverseContinuousWaveletTransform", "type" -> "keyword", 
  "info" -> "InverseContinuousWaveletTransform[cwd] gives the inverse \
continuous wavelet transform of a Continuou"|>, 
 <|"label" -> "InverseDistanceTransform", "type" -> "keyword", 
  "info" -> "InverseDistanceTransform[image] gives the inverse distance \
transform of image, returning the result "|>, 
 <|"label" -> "InverseEllipticNomeQ", "type" -> "keyword", 
  "info" -> "InverseEllipticNomeQ[q] gives the parameter m corresponding to \
the nome q in an elliptic function. "|>, <|"label" -> "InverseErf", 
  "type" -> "keyword", "info" -> "InverseErf[s] gives the inverse error \
function obtained as the solution for z in s = erf(z). "|>, 
 <|"label" -> "InverseErfc", "type" -> "keyword", 
  "info" -> "InverseErfc[s] gives the inverse complementary error function \
obtained as the solution for z in s = "|>, <|"label" -> "InverseFourier", 
  "type" -> "keyword", "info" -> "InverseFourier[list] finds the discrete \
inverse Fourier transform of a list of complex numbers.Inver"|>, 
 <|"label" -> "InverseFourierCosTransform", "type" -> "keyword", 
  "info" -> "InverseFourierCosTransform[expr, \
\[CapitalATilde]\217\[CapitalAHat]\211, t] gives the symbolic inverse Fourier \
cosine transform of expr. "|>, 
 <|"label" -> "InverseFourierSequenceTransform", "type" -> "keyword", 
  "info" -> "InverseFourierSequenceTransform[expr, \
\[CapitalATilde]\217\[CapitalAHat]\211, n] gives the inverse discrete-time \
Fourier transform of exp"|>, <|"label" -> "InverseFourierSinTransform", 
  "type" -> "keyword", "info" -> "InverseFourierSinTransform[expr, \
\[CapitalATilde]\217\[CapitalAHat]\211, t] gives the symbolic inverse Fourier \
sine transform of expr. In"|>, <|"label" -> "InverseFourierTransform", 
  "type" -> "keyword", "info" -> "InverseFourierTransform[expr, \
\[CapitalATilde]\217\[CapitalAHat]\211, t] gives the symbolic inverse Fourier \
transform of expr. InverseFou"|>, <|"label" -> "InverseFunctions", 
  "type" -> "keyword", "info" -> "InverseFunctions is an option for Solve and \
related functions that specifies whether inverse functio"|>, 
 <|"label" -> "InverseGammaDistribution", "type" -> "keyword", 
  "info" -> "InverseGammaDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents an inverse gamma distribution with shape \
parameter \[CapitalATilde]\216\\[PlusMinus] and s"|>, 
 <|"label" -> "InverseGammaRegularized", "type" -> "keyword", 
  "info" -> "InverseGammaRegularized[a, s] gives the inverse of the \
regularized incomplete gamma function. "|>, 
 <|"label" -> "InverseGaussianDistribution", "type" -> "keyword", 
  "info" -> "InverseGaussianDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\274, \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]] represents an \
inverse Gaussian distribution with mean \
\[CapitalATilde]\216\[CapitalAHat]\274 and scale "|>, 
 <|"label" -> "InverseGudermannian", "type" -> "keyword", 
  "info" -> "                                                                 \
-1\nInverseGudermannian[z] gives the"|>, 
 <|"label" -> "InverseHankelTransform", "type" -> "keyword", 
  "info" -> "InverseHankelTransform[expr, s, r] gives the inverse Hankel \
transform of order 0 for expr.InverseHan"|>, <|"label" -> "InverseHaversine", 
  "type" -> "keyword", "info" -> "                                            \
                -1\nInverseHaversine[z] gives the inverse"|>, 
 <|"label" -> "InverseImagePyramid", "type" -> "keyword", 
  "info" -> "InverseImagePyramid[pyr] reconstructs an image from an \
ImagePyramid object pyr.InverseImagePyramid[p"|>, 
 <|"label" -> "InverseJacobiCD", "type" -> "keyword", 
  "info" -> "                                                                 \
  -1\nInverseJacobiCD[v, m] gives th"|>, <|"label" -> "InverseJacobiCN", 
  "type" -> "keyword", "info" -> "                                            \
                       -1\nInverseJacobiCN[v, m] gives th"|>, 
 <|"label" -> "InverseJacobiCS", "type" -> "keyword", 
  "info" -> "                                                                 \
  -1\nInverseJacobiCS[v, m] gives th"|>, <|"label" -> "InverseJacobiDC", 
  "type" -> "keyword", "info" -> "                                            \
                       -1\nInverseJacobiDC[v, m] gives th"|>, 
 <|"label" -> "InverseJacobiDN", "type" -> "keyword", 
  "info" -> "                                                                 \
  -1\nInverseJacobiDN[v, m] gives th"|>, <|"label" -> "InverseJacobiDS", 
  "type" -> "keyword", "info" -> "                                            \
                       -1\nInverseJacobiDS[v, m] gives th"|>, 
 <|"label" -> "InverseJacobiNC", "type" -> "keyword", 
  "info" -> "                                                                 \
  -1\nInverseJacobiNC[v, m] gives th"|>, <|"label" -> "InverseJacobiND", 
  "type" -> "keyword", "info" -> "                                            \
                       -1\nInverseJacobiND[v, m] gives th"|>, 
 <|"label" -> "InverseJacobiNS", "type" -> "keyword", 
  "info" -> "                                                                 \
  -1\nInverseJacobiNS[v, m] gives th"|>, <|"label" -> "InverseJacobiSC", 
  "type" -> "keyword", "info" -> "                                            \
                       -1\nInverseJacobiSC[v, m] gives th"|>, 
 <|"label" -> "InverseJacobiSD", "type" -> "keyword", 
  "info" -> "                                                                 \
  -1\nInverseJacobiSD[v, m] gives th"|>, <|"label" -> "InverseJacobiSN", 
  "type" -> "keyword", "info" -> "                                            \
                       -1\nInverseJacobiSN[v, m] gives th"|>, 
 <|"label" -> "InverseMellinTransform", "type" -> "keyword", 
  "info" -> "InverseMellinTransform[expr, s, x] gives the inverse Mellin \
transform of expr. "|>, <|"label" -> "InversePermutation", 
  "type" -> "keyword", "info" -> 
   "InversePermutation[perm] returns the inverse of permutation perm."|>, 
 <|"label" -> "InverseRadon", "type" -> "keyword", 
  "info" -> "InverseRadon[image] gives the inverse discrete Radon transform \
of image.InverseRadon[image, {w, h}] "|>, 
 <|"label" -> "InverseRadonTransform", "type" -> "keyword", 
  "info" -> "InverseRadonTransform[expr, {p, \
\[CapitalATilde]\217\[CapitalAHat]\225}, {x, y}] gives the inverse Radon \
transform of expr."|>, <|"label" -> "InverseSeries", "type" -> "keyword", 
  "info" -> "InverseSeries[s] takes the series s, and gives a series for the \
inverse of the function represented "|>, 
 <|"label" -> "InverseShortTimeFourier", "type" -> "keyword", 
  "info" -> "InverseShortTimeFourier[input] reconstructs the signal from \
short-time Fourier data.InverseShortTime"|>, 
 <|"label" -> "InverseSpectrogram", "type" -> "keyword", 
  "info" -> "InverseSpectrogram[data] reconstructs the signal from the \
magnitude spectrogram data.InverseSpectrog"|>, 
 <|"label" -> "InverseSurvivalFunction", "type" -> "keyword", 
  "info" -> "InverseSurvivalFunction[dist, q] gives the inverse of the \
survival function for the distribution dis"|>, 
 <|"label" -> "InverseTransformedRegion", "type" -> "keyword", 
  "info" -> "                                                                 \
                   n\nInverseTransfo"|>, 
 <|"label" -> "InverseWaveletTransform", "type" -> "keyword", 
  "info" -> "InverseWaveletTransform[dwd] gives the inverse wavelet transform \
of a DiscreteWaveletData object dwd"|>, <|"label" -> "InverseWeierstrassP", 
  "type" -> "keyword", "info" -> "InverseWeierstrassP[p, {g , g }] gives a \
value of u for which the Weierstrass function \
\[CapitalATilde]\[Cent]\[CapitalAHat]\204\[CapitalAHat]\230 (u ; g , g "|>, 
 <|"label" -> "InverseWishartMatrixDistribution", "type" -> "keyword", 
  "info" -> "InverseWishartMatrixDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\275, \[CapitalATilde]\216\[CapitalAHat]\[Sterling]] represents \
an inverse Wishart matrix distribution with \
\[CapitalATilde]\216\[CapitalAHat]\275 degr"|>, 
 <|"label" -> "InverseZTransform", "type" -> "keyword", 
  "info" -> "InverseZTransform[expr, z, n] gives the inverse Z transform of \
expr. InverseZTransform[expr, {z , z "|>, <|"label" -> "Invisible", 
  "type" -> "keyword", "info" -> "Invisible[expr] displays as space that is \
the same size as the formatted version of expr."|>, 
 <|"label" -> "IPAddress", "type" -> "keyword", 
  "info" -> "IPAddress[\"address\"] is a symbolic representation of an IPv4 \
or IPv6 IP address."|>, <|"label" -> "IrreduciblePolynomialQ", 
  "type" -> "keyword", "info" -> "IrreduciblePolynomialQ[poly] tests whether \
poly is an irreducible polynomial over the rationals.Irre"|>, 
 <|"label" -> "IslandData", "type" -> "keyword", 
  "info" -> "IslandData[entity, property] gives the value of the specified \
property for the island entity.IslandD"|>, <|"label" -> "IsolatingInterval", 
  "type" -> "keyword", "info" -> "IsolatingInterval[a] gives a rational \
isolating interval for the algebraic number a.IsolatingInterva"|>, 
 <|"label" -> "IsomorphicGraphQ", "type" -> "keyword", 
  "info" -> "IsomorphicGraphQ[g , g ] yields True if the graphs g  and g  are \
isomorphic, and False otherwise.\n  "|>, <|"label" -> "IsomorphicSubgraphQ", 
  "type" -> "keyword", "info" -> "IsomorphicSubgraphQ[g , g ] yields True if \
the graph g  is isomorphic to a subgraph of the graph g ."|>, 
 <|"label" -> "IsotopeData", "type" -> "keyword", 
  "info" -> "IsotopeData[{Z, A}, \"property\"] gives the value of the \
specified property for the isotope with atomi"|>, 
 <|"label" -> "Italic", "type" -> "keyword", 
  "info" -> "Italic represents an italic font slant."|>, 
 <|"label" -> "ItoProcess", "type" -> "keyword", 
  "info" -> "ItoProcess[{a, b}, x, t] represents an Ito process x(t), where \
\[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\214 x(t) \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 a(t, x(t)) \
\[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\214 t + b(t, x(t)) "|>, 
 <|"label" -> "JaccardDissimilarity", "type" -> "keyword", 
  "info" -> "JaccardDissimilarity[u, v] gives the Jaccard dissimilarity \
between Boolean vectors u and v."|>, <|"label" -> "JacobiAmplitude", 
  "type" -> "keyword", "info" -> "JacobiAmplitude[u, m] gives the amplitude \
am(u \[CapitalATilde]\257\[CapitalAHat]\220b2 m) for Jacobi elliptic \
functions. "|>, <|"label" -> "Jacobian", "type" -> "keyword", 
  "info" -> "Jacobian is an option for FindRoot. Jacobian -> Automatic \
attempts symbolic computation of the Jacob"|>, 
 <|"label" -> "JacobiCD", "type" -> "keyword", 
  "info" -> "JacobiCD[u, m] gives the Jacobi elliptic function cd(u | m)."|>, 
 <|"label" -> "JacobiCN", "type" -> "keyword", 
  "info" -> "JacobiCN[u, m] gives the Jacobi elliptic function cn(u | m)."|>, 
 <|"label" -> "JacobiCS", "type" -> "keyword", 
  "info" -> "JacobiCS[u, m] gives the Jacobi elliptic function cs(u | m)."|>, 
 <|"label" -> "JacobiDC", "type" -> "keyword", 
  "info" -> "JacobiDC[u, m] gives the Jacobi elliptic function dc(u | m)."|>, 
 <|"label" -> "JacobiDN", "type" -> "keyword", 
  "info" -> "JacobiDN[u, m] gives the Jacobi elliptic function dn(u | m)."|>, 
 <|"label" -> "JacobiDS", "type" -> "keyword", 
  "info" -> "JacobiDS[u, m] gives the Jacobi elliptic function ds(u | m)."|>, 
 <|"label" -> "JacobiEpsilon", "type" -> "keyword", 
  "info" -> "JacobiEpsilon[u, m] gives the Jacobi epsilon function \
\[CapitalATilde]\[Cent]\[CapitalAHat]\204\\[Degree](u | m)."|>, 
 <|"label" -> "JacobiNC", "type" -> "keyword", 
  "info" -> "JacobiNC[u, m] gives the Jacobi elliptic function nc(u | m)."|>, 
 <|"label" -> "JacobiND", "type" -> "keyword", 
  "info" -> "JacobiND[u, m] gives the Jacobi elliptic function nd(u | m)."|>, 
 <|"label" -> "JacobiNS", "type" -> "keyword", 
  "info" -> "JacobiNS[u, m] gives the Jacobi elliptic function ns(u | m)."|>, 
 <|"label" -> "JacobiP", "type" -> "keyword", "info" -> "                     \
                            (a, b)\nJacobiP[n, a, b, x] gives the Jacobi \
polynom"|>, <|"label" -> "JacobiSC", "type" -> "keyword", 
  "info" -> "JacobiSC[u, m] gives the Jacobi elliptic function sc(u | m)."|>, 
 <|"label" -> "JacobiSD", "type" -> "keyword", 
  "info" -> "JacobiSD[u, m] gives the Jacobi elliptic function sd(u | m)."|>, 
 <|"label" -> "JacobiSN", "type" -> "keyword", 
  "info" -> "JacobiSN[u, m] gives the Jacobi elliptic function sn(u | m)."|>, 
 <|"label" -> "JacobiSymbol", "type" -> "keyword", 
  "info" -> "                                            n\nJacobiSymbol[n, \
m] gives the Jacobi symbol (-). \n     "|>, <|"label" -> "JacobiZeta", 
  "type" -> "keyword", "info" -> "JacobiZeta[\[CapitalATilde]\217\
\[CapitalAHat]\225, m] gives the Jacobi zeta function \
Z(\[CapitalATilde]\217\[CapitalAHat]\225 \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). "|>, 
 <|"label" -> "JacobiZN", "type" -> "keyword", 
  "info" -> "JacobiZN[u, m] gives the Jacobi zeta function zn(u | m)."|>, 
 <|"label" -> "JankoGroupJ1", "type" -> "keyword", 
  "info" -> "JankoGroupJ1[] represents the sporadic simple Janko group J .\n  \
                                    "|>, <|"label" -> "JankoGroupJ2", 
  "type" -> "keyword", "info" -> "JankoGroupJ2[] represents the sporadic \
simple Janko group J .\n                                      "|>, 
 <|"label" -> "JankoGroupJ3", "type" -> "keyword", 
  "info" -> "JankoGroupJ3[] represents the sporadic simple Janko group J .\n  \
                                    "|>, <|"label" -> "JankoGroupJ4", 
  "type" -> "keyword", "info" -> "JankoGroupJ4[] represents the sporadic \
simple Janko group J .\n                                      "|>, 
 <|"label" -> "JarqueBeraALMTest", "type" -> "keyword", 
  "info" -> "JarqueBeraALMTest[data] tests whether data is normally \
distributed using the \
Jarque\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Bera ALM \
test.Ja"|>, <|"label" -> "JohnsonDistribution", "type" -> "keyword", 
  "info" -> "JohnsonDistribution[\"SB\", \[CapitalATilde]\216b3, \
\[CapitalATilde]\216b4, \[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents a bounded Johnson \
distribution with shape parameter"|>, <|"label" -> "Join", 
  "type" -> "keyword", "info" -> "Join[list , list , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] concatenates \
lists or other expressions that share the same head.Join[list , l"|>, 
 <|"label" -> "JoinAcross", "type" -> "keyword", 
  "info" -> "JoinAcross[{a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {b , b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, key] gives a \
list of associations obtained by joining those pai"|>, 
 <|"label" -> "Joined", "type" -> "keyword", "info" -> "Joined is an option \
for ListPlot and related functions that specifies whether points in each \
dataset"|>, <|"label" -> "JoinedCurve", "type" -> "keyword", 
  "info" -> "JoinedCurve[{segment , segment , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
curve consisting of segment  followed by segment  "|>, 
 <|"label" -> "JoinForm", "type" -> "keyword", "info" -> "JoinForm[type] is a \
graphics directive that specifies what type of joins should be used to \
connect s"|>, <|"label" -> "JordanDecomposition", "type" -> "keyword", 
  "info" -> "JordanDecomposition[m] yields the Jordan decomposition of a \
square matrix m. The result is a list {s"|>, 
 <|"label" -> "JordanModelDecomposition", "type" -> "keyword", 
  "info" -> "JordanModelDecomposition[ssm] yields the Jordan decomposition of \
the state-space model ssm. "|>, <|"label" -> "JulianDate", 
  "type" -> "keyword", "info" -> "JulianDate[] gives the current number of \
days since noon on November 24, 4714 BCE in the GMT time zo"|>, 
 <|"label" -> "JuliaSetBoettcher", "type" -> "keyword", 
  "info" -> "JuliaSetBoettcher[c, z] gives the \
B\[CapitalATilde]\203\\[Paragraph]ttcher coordinate of z with respect to the \
quadratic Julia set J"|>, <|"label" -> "K", "type" -> "keyword", 
  "info" -> 
   "K is a default generic name for a summation index in a symbolic sum."|>, 
 <|"label" -> "KagiChart", "type" -> "keyword", 
  "info" -> "KagiChart[{{date , p }, {date , p }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a Kagi \
chart with prices p  at date date .KagiChart[{"|>, 
 <|"label" -> "KaiserBesselWindow", "type" -> "keyword", 
  "info" -> "KaiserBesselWindow[x] represents a \
Kaiser\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Bessel \
window function of x."|>, <|"label" -> "KaiserWindow", "type" -> "keyword", 
  "info" -> "KaiserWindow[x] represents a Kaiser window function of \
x.KaiserWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the parameter \
\[CapitalATilde]\216\\[PlusMinus].\n"|>, <|"label" -> "KalmanEstimator", 
  "type" -> "keyword", "info" -> "KalmanEstimator[ssm, {w, v}] constructs the \
Kalman estimator for the StateSpaceModel ssm with proces"|>, 
 <|"label" -> "KalmanFilter", "type" -> "keyword", 
  "info" -> "KalmanFilter[tproc, data] filters data using the time series \
model given by tproc."|>, <|"label" -> "KarhunenLoeveDecomposition", 
  "type" -> "keyword", "info" -> "KarhunenLoeveDecomposition[{a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
Karhunen\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Loeve \
transform {{b , b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, m} of the n"|>, 
 <|"label" -> "KaryTree", "type" -> "keyword", "info" -> "KaryTree[n] gives a \
binary tree with n vertices.KaryTree[n, k] gives a k-ary tree with n \
vertices.\n"|>, <|"label" -> "KatzCentrality", "type" -> "keyword", 
  "info" -> "KatzCentrality[g, \[CapitalATilde]\216\\[PlusMinus]] gives a \
list of Katz centralities for the vertices in the graph g and weight \
\[CapitalATilde]\216\\[PlusMinus]."|>, <|"label" -> "KCoreComponents", 
  "type" -> "keyword", "info" -> "KCoreComponents[g, k] gives the k-core \
components of the underlying simple graph of g.KCoreComponent"|>, 
 <|"label" -> "KDistribution", "type" -> "keyword", 
  "info" -> "KDistribution[\[CapitalATilde]\216\[CapitalAHat]\275, w] \
represents a K distribution with shape parameters \
\[CapitalATilde]\216\[CapitalAHat]\275 and w."|>, 
 <|"label" -> "KEdgeConnectedComponents", "type" -> "keyword", 
  "info" -> "KEdgeConnectedComponents[g, k] gives the k-edge-connected \
components of the graph g.KEdgeConnectedCo"|>, 
 <|"label" -> "KEdgeConnectedGraphQ", "type" -> "keyword", 
  "info" -> "KEdgeConnectedGraphQ[g, k] yields True if the graph g is \
k-edge-connected and False otherwise."|>, <|"label" -> "KeepExistingVersion", 
  "type" -> "keyword", "info" -> "KeepExistingVersion is an option for \
PacletInstall and PacletInstallSubmit that specifies whether an"|>, 
 <|"label" -> "KelvinBei", "type" -> "keyword", 
  "info" -> "KelvinBei[z] gives the Kelvin function bei(z).KelvinBei[n, z] \
gives the Kelvin function bei (z). \n  "|>, <|"label" -> "KelvinBer", 
  "type" -> "keyword", "info" -> "KelvinBer[z] gives the Kelvin function \
ber(z).KelvinBer[n, z] gives the Kelvin function ber (z). \n  "|>, 
 <|"label" -> "KelvinKei", "type" -> "keyword", 
  "info" -> "KelvinKei[z] gives the Kelvin function kei(z).KelvinKei[n, z] \
gives the Kelvin function kei (z). \n  "|>, <|"label" -> "KelvinKer", 
  "type" -> "keyword", "info" -> "KelvinKer[z] gives the Kelvin function \
ker(z).KelvinKer[n, z] gives the Kelvin function ker (z). \n  "|>, 
 <|"label" -> "KendallTauTest", "type" -> "keyword", 
  "info" -> "KendallTauTest[v , v ] tests whether the vectors v  and v  are \
independent.KendallTauTest[m , m ] te"|>, <|"label" -> "KernelFunction", 
  "type" -> "keyword", "info" -> "KernelFunction[f] represents a function to \
be evaluated in the Wolfram Engine kernel, even when it i"|>, 
 <|"label" -> "KernelMixtureDistribution", "type" -> "keyword", 
  "info" -> "KernelMixtureDistribution[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
kernel mixture distribution based on the data va"|>, 
 <|"label" -> "KernelObject", "type" -> "keyword", 
  "info" -> "KernelObject[n, name, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
kernel available for parallel computing."|>, <|"label" -> "Kernels", 
  "type" -> "keyword", "info" -> "Kernels[] gives the list of running kernels \
available for parallel computing."|>, <|"label" -> "Key", 
  "type" -> "keyword", "info" -> "Key[key] represents a key used to access a \
value in an association.Key[key][assoc] extracts the valu"|>, 
 <|"label" -> "KeyCollisionFunction", "type" -> "keyword", 
  "info" -> "KeyCollisionFunction is an option for JoinAcross that specifies \
how to handle pairs of elements that"|>, <|"label" -> "KeyComplement", 
  "type" -> "keyword", "info" -> "KeyComplement[{assoc   , assoc , assoc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates an \
association in which only elements whose k"|>, 
 <|"label" -> "KeyDrop", "type" -> "keyword", "info" -> "KeyDrop[assoc, {key \
, key , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields \
an association from which elements with keys key  have been d"|>, 
 <|"label" -> "KeyDropFrom", "type" -> "keyword", 
  "info" -> "KeyDropFrom[a, key] changes the association a by dropping the \
element with the specified key.KeyDrop"|>, <|"label" -> "KeyExistsQ", 
  "type" -> "keyword", "info" -> "KeyExistsQ[assoc, key] returns True if the \
specified key exists in the association assoc, and False "|>, 
 <|"label" -> "KeyFreeQ", "type" -> "keyword", "info" -> "KeyFreeQ[assoc, \
form] yields True if no key in the association assoc matches form, and yields \
False "|>, <|"label" -> "KeyIntersection", "type" -> "keyword", 
  "info" -> "KeyIntersection[{assoc , assoc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
list of associations in which only elements whose k"|>, 
 <|"label" -> "KeyMap", "type" -> "keyword", "info" -> "KeyMap[f, \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224] maps f over the \
keys in an association, giving \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 f[key ] "|>, 
 <|"label" -> "KeyMemberQ", "type" -> "keyword", 
  "info" -> "KeyMemberQ[assoc, form] yields True if a key in the association \
assoc matches form, and False otherw"|>, <|"label" -> "KeypointStrength", 
  "type" -> "keyword", "info" -> "KeypointStrength is an option for \
ImageKeypoints and related functions to specify a minimum strength"|>, 
 <|"label" -> "Keys", "type" -> "keyword", "info" -> "Keys[\[CapitalATilde]\
\257\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224] gives a list of the \
keys key  in an association.Keys[{key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] v"|>, 
 <|"label" -> "KeySelect", "type" -> "keyword", 
  "info" -> "KeySelect[assoc, crit] selects elements in the association assoc \
for which crit applied to their key"|>, <|"label" -> "KeySort", 
  "type" -> "keyword", "info" -> "KeySort[assoc] orders the elements of an \
association by sorting its keys.KeySort[assoc, p] orders th"|>, 
 <|"label" -> "KeySortBy", "type" -> "keyword", 
  "info" -> "KeySortBy[assoc, f] sorts the elements of an association in the \
order defined by applying f to each "|>, <|"label" -> "KeyTake", 
  "type" -> "keyword", "info" -> "KeyTake[assoc, {key , key , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields an \
association containing only the elements with keys key .Ke"|>, 
 <|"label" -> "KeyUnion", "type" -> "keyword", "info" -> "KeyUnion[{assoc , \
assoc , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
generates a list of associations in which each association has the uni"|>, 
 <|"label" -> "KeyValueMap", "type" -> "keyword", 
  "info" -> "KeyValueMap[f, \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224] gives the list \
{f[key , val ], f[key , val ], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}.Key"|>, 
 <|"label" -> "KeyValuePattern", "type" -> "keyword", 
  "info" -> "KeyValuePattern[{patt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a pattern \
object that represents an association or list of rules that"|>, 
 <|"label" -> "Khinchin", "type" -> "keyword", 
  "info" -> "Khinchin is Khinchin's constant, with numerical value \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 2.68545. "|>, 
 <|"label" -> "KillProcess", "type" -> "keyword", 
  "info" -> "KillProcess[proc] kills the external process represented by the \
ProcessObject proc."|>, <|"label" -> "KirchhoffGraph", "type" -> "keyword", 
  "info" -> "KirchhoffGraph[kmat] gives the graph with Kirchhoff matrix \
kmat.KirchhoffGraph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, kmat] gi"|>, 
 <|"label" -> "KirchhoffMatrix", "type" -> "keyword", 
  "info" -> "KirchhoffMatrix[g] gives the Kirchhoff matrix of the graph \
g.KirchhoffMatrix[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules "|>, 
 <|"label" -> "KleinInvariantJ", "type" -> "keyword", 
  "info" -> "KleinInvariantJ[\[CapitalATilde]\217\[CapitalAHat]\204] gives \
the Klein invariant modular elliptic function \
J(\[CapitalATilde]\217\[CapitalAHat]\204). "|>, 
 <|"label" -> "KnapsackSolve", "type" -> "keyword", 
  "info" -> "KnapsackSolve[{cost , cost , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, maxtotalcost] \
solves the knapsack problem of finding the maximum nu"|>, 
 <|"label" -> "KnightTourGraph", "type" -> "keyword", 
  "info" -> "KnightTourGraph[m, n] gives a Knight's tour graph on an \
m\[CapitalATilde]\257\[CapitalAHat]\222\[CapitalAHat] n chessboard."|>, 
 <|"label" -> "KnotData", "type" -> "keyword", "info" -> "KnotData[knot, \
\"property\"] gives the specified property for a knot.KnotData[knot] gives an \
image of "|>, <|"label" -> "KnownUnitQ", "type" -> "keyword", 
  "info" -> "KnownUnitQ[expr] returns True if expr is a canonical unit, and \
False otherwise."|>, <|"label" -> "KochCurve", "type" -> "keyword", 
  "info" -> "                                                        \
th\nKochCurve[n] gives the line segments repr"|>, 
 <|"label" -> "KolmogorovSmirnovTest", "type" -> "keyword", 
  "info" -> "KolmogorovSmirnovTest[data] tests whether data is normally \
distributed using the \
Kolmogorov\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Smirnov \
"|>, <|"label" -> "KroneckerDelta", "type" -> "keyword", 
  "info" -> "KroneckerDelta[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
Kronecker delta \[CapitalATilde]\216b4       , equal to 1 if all the n  are \
equal, an"|>, <|"label" -> "KroneckerModelDecomposition", 
  "type" -> "keyword", "info" -> "KroneckerModelDecomposition[ssm] yields the \
Kronecker decomposition of a descriptor state-space mode"|>, 
 <|"label" -> "KroneckerProduct", "type" -> "keyword", 
  "info" -> "KroneckerProduct[m , m , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] constructs the \
Kronecker product of the arrays m .\n                  1  "|>, 
 <|"label" -> "KroneckerSymbol", "type" -> "keyword", 
  "info" -> "                                                  \
n\nKroneckerSymbol[n, m] gives the Kronecker symbol"|>, 
 <|"label" -> "KuiperTest", "type" -> "keyword", 
  "info" -> "KuiperTest[data] tests whether data is normally distributed \
using the Kuiper test.KuiperTest[data, d"|>, 
 <|"label" -> "KumaraswamyDistribution", "type" -> "keyword", 
  "info" -> "KumaraswamyDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents a Kumaraswamy distribution with shape \
parameters \[CapitalATilde]\216\\[PlusMinus] and \[CapitalATilde]\216b2."|>, 
 <|"label" -> "Kurtosis", "type" -> "keyword", "info" -> "Kurtosis[list] \
gives the coefficient of kurtosis for the elements in list.Kurtosis[dist] \
gives the c"|>, <|"label" -> "KuwaharaFilter", "type" -> "keyword", 
  "info" -> "KuwaharaFilter[data, r] computes for each element p in data the \
variance of the values in the four ("|>, 
 <|"label" -> "KVertexConnectedComponents", "type" -> "keyword", 
  "info" -> "KVertexConnectedComponents[g, k] gives the k-vertex-connected \
components of the graph g.KVertexConne"|>, 
 <|"label" -> "KVertexConnectedGraphQ", "type" -> "keyword", 
  "info" -> "KVertexConnectedGraphQ[g, k] yields True if the graph g is \
k-vertex-connected and False otherwise."|>, <|"label" -> "LABColor", 
  "type" -> "keyword", "info" -> "LABColor[l, a, b] represents a color in the \
Lab color space with lightness l and color components a "|>, 
 <|"label" -> "Label", "type" -> "keyword", "info" -> "Label[tag] represents \
a point in a compound expression to which control can be transferred using \
Got"|>, <|"label" -> "Labeled", "type" -> "keyword", 
  "info" -> "Labeled[expr, lbl] displays expr labeled with lbl. Labeled[expr, \
lbl, pos] places lbl at a position "|>, <|"label" -> "LabelingFunction", 
  "type" -> "keyword", "info" -> "LabelingFunction is an option for data \
visualization functions to automatically label elements of a "|>, 
 <|"label" -> "LabelingSize", "type" -> "keyword", 
  "info" -> "LabelingSize is an option to visualization functions that \
specifies the size to be used for labels a"|>, 
 <|"label" -> "LabelVisibility", "type" -> "keyword", 
  "info" -> "LabelVisibility is an option for Callout and Labeled in plotting \
functions that determines which lab"|>, <|"label" -> "LakeData", 
  "type" -> "keyword", "info" -> "LakeData[entity, property] gives the value \
of the specified property for the lake entity.LakeData[{e"|>, 
 <|"label" -> "LambdaComponents", "type" -> "keyword", 
  "info" -> "LambdaComponents[g] gives the lambda components of the graph \
g.LambdaComponents[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] give"|>, 
 <|"label" -> "LameC", "type" -> "keyword", "info" -> "                       \
       th                 j\nLameC[\[CapitalATilde]\216\[CapitalAHat]\275, j, \
z, m] gives the j\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    \
Lam\[CapitalATilde]\203\[CapitalAHat]\[Copyright] function Ec"|>, 
 <|"label" -> "LameCPrime", "type" -> "keyword", 
  "info" -> "                                                       th        \
         j\nLameCPrime[\[CapitalATilde]\216\[CapitalAHat]\275, j, z, m] g"|>, 
 <|"label" -> "LameEigenvalueA", "type" -> "keyword", 
  "info" -> "                                     th                  \
j\nLameEigenvalueA[\[CapitalATilde]\216\[CapitalAHat]\275, j, m] gives the \
j\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    L"|>, 
 <|"label" -> "LameEigenvalueB", "type" -> "keyword", 
  "info" -> "                                     th                  \
j\nLameEigenvalueB[\[CapitalATilde]\216\[CapitalAHat]\275, j, m] gives the \
j\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    L"|>, 
 <|"label" -> "LameS", "type" -> "keyword", "info" -> "                       \
       th                 j\nLameS[\[CapitalATilde]\216\[CapitalAHat]\275, j, \
z, m] gives the j\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    \
Lam\[CapitalATilde]\203\[CapitalAHat]\[Copyright] function Es"|>, 
 <|"label" -> "LameSPrime", "type" -> "keyword", 
  "info" -> "                                                       th        \
         j\nLameSPrime[\[CapitalATilde]\216\[CapitalAHat]\275, j, z, m] g"|>, 
 <|"label" -> "LaminaData", "type" -> "keyword", 
  "info" -> "LaminaData[entity, property] gives the value of the specified \
property for the lamina entity.LaminaD"|>, <|"label" -> "LanczosWindow", 
  "type" -> "keyword", "info" -> 
   "LanczosWindow[x] represents a Lanczos window function of x."|>, 
 <|"label" -> "LandauDistribution", "type" -> "keyword", 
  "info" -> "LandauDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents a Landau distribution with \
location parameter \[CapitalATilde]\216\[CapitalAHat]\274 and scale parame"|>\
, <|"label" -> "Language", "type" -> "keyword", 
  "info" -> "Language is an option that specifies the language to use."|>, 
 <|"label" -> "LanguageCategory", "type" -> "keyword", 
  "info" -> "LanguageCategory is an option for Cell that determines in what \
category of language the contents of "|>, <|"label" -> "LanguageData", 
  "type" -> "keyword", "info" -> "LanguageData[entity, property] gives the \
value of the specified property for the language entity.Lan"|>, 
 <|"label" -> "LanguageIdentify", "type" -> "keyword", 
  "info" -> "LanguageIdentify[\"string\"] attempts to determine what human \
language text in string is in, predomina"|>, 
 <|"label" -> "LaplaceDistribution", "type" -> "keyword", 
  "info" -> "LaplaceDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\216b2] represents a Laplace double-exponential distribution \
with mean \[CapitalATilde]\216\[CapitalAHat]\274 and scale"|>, 
 <|"label" -> "Laplacian", "type" -> "keyword", 
  "info" -> "                                               2       2        \
2       2\nLaplacian[f, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] "|>, 
 <|"label" -> "LaplacianFilter", "type" -> "keyword", 
  "info" -> "LaplacianFilter[data, r] convolves data with a radius-r \
Laplacian kernel.LaplacianFilter[data, {r , "|>, 
 <|"label" -> "LaplacianGaussianFilter", "type" -> "keyword", 
  "info" -> "LaplacianGaussianFilter[data, r] convolves data with a Laplacian \
of Gaussian kernel of pixel radius "|>, <|"label" -> "LaplacianPDETerm", 
  "type" -> "keyword", "info" -> "                                            \
        2\nLaplacianPDETerm[vars] represents a Laplacian "|>, 
 <|"label" -> "Large", "type" -> "keyword", "info" -> "Large is a style or \
option setting that specifies that objects should be large."|>, 
 <|"label" -> "Larger", "type" -> "keyword", "info" -> "Larger is a style or \
option setting that specifies that objects should be larger."|>, 
 <|"label" -> "Last", "type" -> "keyword", "info" -> "Last[expr] gives the \
last element in expr. Last[expr, def] gives the last element if there are any \
e"|>, <|"label" -> "Latitude", "type" -> "keyword", 
  "info" -> "Latitude[pos] gives the latitude in degrees of a geographic \
position specified by pos.Latitude[pos, "|>, 
 <|"label" -> "LatitudeLongitude", "type" -> "keyword", 
  "info" -> "LatitudeLongitude[pos] gives a list of the latitude and \
longitude in degrees of a geographic positio"|>, 
 <|"label" -> "LatticeData", "type" -> "keyword", 
  "info" -> "LatticeData[lattice, \"property\"] gives the specified property \
for a lattice.LatticeData[n] gives a l"|>, <|"label" -> "LatticeReduce", 
  "type" -> "keyword", "info" -> "LatticeReduce[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a reduced \
basis for the set of vectors v . \n                1   2  "|>, 
 <|"label" -> "Launch", "type" -> "keyword", "info" -> "Launch is a setting \
for the LinkMode option of LinkOpen.  LinkMode->Launch causes a link to be \
creat"|>, <|"label" -> "LaunchKernels", "type" -> "keyword", 
  "info" -> "LaunchKernels[] launches all currently configured parallel \
subkernels.LaunchKernels[n] launches n lo"|>, 
 <|"label" -> "LayeredGraphPlot", "type" -> "keyword", 
  "info" -> "LayeredGraphPlot[g] generates a layered plot of the graph \
g.LayeredGraphPlot[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates "|>, 
 <|"label" -> "LayeredGraphPlot3D", "type" -> "keyword", 
  "info" -> "LayeredGraphPlot3D[g] generates a 3D layered plot of the graph \
g.LayeredGraphPlot3D[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gen"|>, 
 <|"label" -> "LayerSizeFunction", "type" -> "keyword", 
  "info" -> "LayerSizeFunction is an option for TreePlot that gives a \
function to specify the relative height to "|>, 
 <|"label" -> "LCHColor", "type" -> "keyword", "info" -> "LCHColor[l, c, h] \
represents a color in the LCH color space with lightness l, chroma c and hue \
h.LCH"|>, <|"label" -> "LCM", "type" -> "keyword", 
  "info" -> "LCM[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the least \
common multiple of the n . \n     1   2                               "|>, 
 <|"label" -> "LeaderSize", "type" -> "keyword", 
  "info" -> "LeaderSize is an option for Callout that specifies what sizes to \
use for leader lines."|>, <|"label" -> "LeafCount", "type" -> "keyword", 
  "info" -> "LeafCount[expr] gives the total number of indivisible \
subexpressions in expr. "|>, <|"label" -> "LeapVariant", "type" -> "keyword", 
  "info" -> "LeapVariant[n] represents a repeated calendar element caused by \
a leap period."|>, <|"label" -> "LeapYearQ", "type" -> "keyword", 
  "info" -> "LeapYearQ[date] returns True if the year corresponding to date \
is a leap year."|>, <|"label" -> "LearnDistribution", "type" -> "keyword", 
  "info" -> "LearnDistribution[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
LearnedDistribution[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] that attempts to repre"|>, <|"label" -> "LearnedDistribution", 
  "type" -> "keyword", "info" -> "LearnedDistribution[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents a distribution generated by \
LearnDistribution."|>, <|"label" -> "LearningRate", "type" -> "keyword", 
  "info" -> "LearningRate is an option for NetTrain that specifies the rate \
at which to adjust neural net weights"|>, 
 <|"label" -> "LearningRateMultipliers", "type" -> "keyword", 
  "info" -> "LearningRateMultipliers is an option for net layers and for \
NetTrain, NetChain, NetGraph that specif"|>, <|"label" -> "LeastSquares", 
  "type" -> "keyword", "info" -> "LeastSquares[m, b] finds an x that solves \
the linear least-squares problem for the matrix equation m"|>, 
 <|"label" -> "LeastSquaresFilterKernel", "type" -> "keyword", 
  "info" -> "LeastSquaresFilterKernel[{{\[CapitalATilde]\217\[CapitalAHat]\
\211 , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\217\[CapitalAHat]\211     }, {a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }}, n] creates \
a k-band finite impulse response"|>, <|"label" -> "Left", 
  "type" -> "keyword", "info" -> "Left is a symbol that represents the \
left-hand side for purposes of alignment and positioning. "|>, 
 <|"label" -> "LeftArrow", "type" -> "keyword", 
  "info" -> "LeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftArrowBar", "type" -> "keyword", 
  "info" -> "LeftArrowBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\[Currency] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\[Currency] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftArrowRightArrow", "type" -> "keyword", 
  "info" -> "LeftArrowRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\206 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\206 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftDownTeeVector", "type" -> "keyword", 
  "info" -> "LeftDownTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\[DownExclamation] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\[DownExclamation] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftDownVector", "type" -> "keyword", 
  "info" -> "LeftDownVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\203 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\203 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftDownVectorBar", "type" -> "keyword", 
  "info" -> "LeftDownVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\231 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\231 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftRightArrow", "type" -> "keyword", 
  "info" -> "LeftRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\224 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\224 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftRightVector", "type" -> "keyword", 
  "info" -> "LeftRightVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\216 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\216 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftTee", "type" -> "keyword", "info" -> "LeftTee[x, y] \
displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\[Sterling] y."|>, 
 <|"label" -> "LeftTeeArrow", "type" -> "keyword", 
  "info" -> "LeftTeeArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[Currency] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[Currency] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftTeeVector", "type" -> "keyword", 
  "info" -> "LeftTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\232 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\232 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftTriangle", "type" -> "keyword", 
  "info" -> "LeftTriangle[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212b2 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212b2 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftTriangleBar", "type" -> "keyword", 
  "info" -> "LeftTriangleBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Section]\[CapitalAHat]\217 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Section]\[CapitalAHat]\217 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftTriangleEqual", "type" -> "keyword", 
  "info" -> "LeftTriangleEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212b4 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212b4 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftUpDownVector", "type" -> "keyword", 
  "info" -> "LeftUpDownVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\221 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\221 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftUpTeeVector", "type" -> "keyword", 
  "info" -> "LeftUpTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]  y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftUpVector", "type" -> "keyword", 
  "info" -> "LeftUpVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[DownQuestion] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[DownQuestion] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftUpVectorBar", "type" -> "keyword", 
  "info" -> "LeftUpVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\230 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\230 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftVector", "type" -> "keyword", 
  "info" -> "LeftVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\274 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\274 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LeftVectorBar", "type" -> "keyword", 
  "info" -> "LeftVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\222 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\222 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LegendAppearance", "type" -> "keyword", 
  "info" -> "LegendAppearance is an option for charting functions that \
specifies the appearance of any legends th"|>, 
 <|"label" -> "Legended", "type" -> "keyword", "info" -> "Legended[expr, leg] \
displays expr with legend leg. Legended[expr, lbl] indicates in plotting and \
cha"|>, <|"label" -> "LegendFunction", "type" -> "keyword", 
  "info" -> "LegendFunction is an option for legends that specifies an \
overall function to apply to the generated"|>, 
 <|"label" -> "LegendLabel", "type" -> "keyword", 
  "info" -> "LegendLabel is an option for legends that specifies an overall \
label for a legend."|>, <|"label" -> "LegendLayout", "type" -> "keyword", 
  "info" -> "LegendLayout is an option for legends that specifies how to \
format the legend content."|>, <|"label" -> "LegendMargins", 
  "type" -> "keyword", "info" -> "LegendMargins is an option for legends that \
specifies the margins to leave around the legend."|>, 
 <|"label" -> "LegendMarkers", "type" -> "keyword", 
  "info" -> "LegendMarkers is an option for legends such as PointLegend that \
specifies markers for each element."|>, <|"label" -> "LegendMarkerSize", 
  "type" -> "keyword", "info" -> "LegendMarkerSize is an option for legends \
such as PointLegend that specifies the size of marker regi"|>, 
 <|"label" -> "Length", "type" -> "keyword", 
  "info" -> "Length[expr] gives the number of elements in expr. "|>, 
 <|"label" -> "LengthWhile", "type" -> "keyword", 
  "info" -> "LengthWhile[list, crit] gives the number of contiguous elements \
e  starting at the beginning of list"|>, <|"label" -> "LerchPhi", 
  "type" -> "keyword", "info" -> "LerchPhi[z, s, a] gives the Lerch \
transcendent \[CapitalATilde]\216\[CapitalAHat]\246 (z, s, a). "|>, 
 <|"label" -> "Less", "type" -> "keyword", "info" -> "x < y yields True if x \
is determined to be less than y. x  < x  < x  yields True if the x  form a \
st"|>, <|"label" -> "LessEqual", "type" -> "keyword", 
  "info" -> "x <= y or x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] y yields \
True if x is determined to be less than or equal to y.x  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] x  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] x  yields \
Tru"|>, <|"label" -> "LessEqualGreater", "type" -> "keyword", 
  "info" -> "LessEqualGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\232 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\232 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LessEqualThan", "type" -> "keyword", 
  "info" -> "LessEqualThan[y] is an operator form that yields x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] y when \
applied to an expression x."|>, <|"label" -> "LessFullEqual", 
  "type" -> "keyword", "info" -> "LessFullEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\246 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\246 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LessGreater", "type" -> "keyword", 
  "info" -> "LessGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[Paragraph] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[Paragraph] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LessLess", "type" -> "keyword", "info" -> "LessLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\252 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\252 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LessSlantEqual", "type" -> "keyword", 
  "info" -> "LessSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Copyright]\[CapitalAHat]\275 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Copyright]\[CapitalAHat]\275 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LessThan", "type" -> "keyword", "info" -> "LessThan[y] is an \
operator form that yields x < y when applied to an expression x."|>, 
 <|"label" -> "LessTilde", "type" -> "keyword", 
  "info" -> "LessTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211b2 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211b2 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LetterCharacter", "type" -> "keyword", 
  "info" -> 
   "LetterCharacter represents a letter character in StringExpression."|>, 
 <|"label" -> "LetterCounts", "type" -> "keyword", 
  "info" -> "LetterCounts[\"string\"] gives an association whose keys are the \
distinct letters in string, and whose"|>, <|"label" -> "LetterNumber", 
  "type" -> "keyword", "info" -> "LetterNumber[\"c\"] gives the position of \
the character c in the English alphabet.LetterNumber[\"c\", al"|>, 
 <|"label" -> "LetterQ", "type" -> "keyword", "info" -> "LetterQ[string] \
yields True if all the characters in the string are letters, and yields False \
otherw"|>, <|"label" -> "Level", "type" -> "keyword", 
  "info" -> "Level[expr, levelspec] gives a list of all subexpressions of \
expr on levels specified by levelspec. "|>, <|"label" -> "LeviCivitaTensor", 
  "type" -> "keyword", "info" -> "LeviCivitaTensor[d] gives the d-dimensional \
Levi-Civita totally antisymmetric tensor."|>, 
 <|"label" -> "LevyDistribution", "type" -> "keyword", 
  "info" -> "LevyDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents a \
L\[CapitalATilde]\203\[CapitalAHat]\[Copyright]vy distribution with location \
parameter \[CapitalATilde]\216\[CapitalAHat]\274 and dispersion param"|>, 
 <|"label" -> "LexicographicOrder", "type" -> "keyword", 
  "info" -> "LexicographicOrder[{a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {b , b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives Order[a , \
b ] for the first non-coinciding pair a"|>, <|"label" -> "LexicographicSort", 
  "type" -> "keyword", "info" -> "LexicographicSort[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] sorts the list \
of expressions e  in lexicographic order.Lexicographic"|>, 
 <|"label" -> "LibraryDataType", "type" -> "keyword", 
  "info" -> "LibraryDataType[datatype] specifies the data type for a \
LibraryFunction argument or result to be dat"|>, 
 <|"label" -> "LibraryFunction", "type" -> "keyword", 
  "info" -> "LibraryFunction[ args] represents a function that has been \
loaded from a Wolfram Library."|>, <|"label" -> "LibraryFunctionError", 
  "type" -> "keyword", "info" -> "LibraryFunctionError[name, code] represents \
an error returned from a LibraryFunction."|>, 
 <|"label" -> "LibraryFunctionInformation", "type" -> "keyword", 
  "info" -> "LibraryFunctionInformation[fun] returns information about a \
LibraryFunction."|>, <|"label" -> "LibraryFunctionLoad", "type" -> "keyword", 
  "info" -> "LibraryFunctionLoad[lib, fun, argtype, rettype] loads Wolfram \
Library lib and makes the library func"|>, 
 <|"label" -> "LibraryFunctionUnload", "type" -> "keyword", 
  "info" -> "LibraryFunctionUnload[fun] unloads a LibraryFunction so that it \
cannot be used."|>, <|"label" -> "LibraryUnload", "type" -> "keyword", 
  "info" -> "LibraryUnload[lib] unloads all functions that have been loaded \
from a Wolfram Library, then it unloa"|>, 
 <|"label" -> "LicenseEntitlementObject", "type" -> "keyword", 
  "info" -> "LicenseEntitlementObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents an on-demand license \
entitlement.LicenseEntitlementObject[id]"|>, 
 <|"label" -> "LicenseEntitlements", "type" -> "keyword", 
  "info" -> "LicenseEntitlements[] gives a list of on-demand license \
entitlements owned by you."|>, <|"label" -> "LicenseID", "type" -> "keyword", 
  "info" -> "LicenseID is an option to Encode which specifies the required \
value of ECLicenseID on the computer th"|>, <|"label" -> "LicensingSettings", 
  "type" -> "keyword", "info" -> "LicensingSettings is an option for \
RemoteBatchSubmit and related functions to configure licensing fo"|>, 
 <|"label" -> "LiftingFilterData", "type" -> "keyword", 
  "info" -> "LiftingFilterData[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents lifting-filter data used to compute forward \
and inverse lifting wave"|>, <|"label" -> "LiftingWaveletTransform", 
  "type" -> "keyword", "info" -> "LiftingWaveletTransform[data] gives the \
lifting wavelet transform (LWT) of an array of data.LiftingW"|>, 
 <|"label" -> "LightBlue", "type" -> "keyword", 
  "info" -> "LightBlue represents a light blue color in graphics or style \
specifications."|>, <|"label" -> "LightBrown", "type" -> "keyword", 
  "info" -> "LightBrown represents a light brown color in graphics or style \
specifications."|>, <|"label" -> "LightCyan", "type" -> "keyword", 
  "info" -> "LightCyan represents a light cyan color in graphics or style \
specifications."|>, <|"label" -> "Lighter", "type" -> "keyword", 
  "info" -> "Lighter[color] represents a lighter version of the specified \
color. Lighter[color, f] represents a v"|>, <|"label" -> "LightGray", 
  "type" -> "keyword", "info" -> "LightGray represents a light gray color in \
graphics or style specifications."|>, <|"label" -> "LightGreen", 
  "type" -> "keyword", "info" -> "LightGreen represents a light green color \
in graphics or style specifications."|>, <|"label" -> "Lighting", 
  "type" -> "keyword", "info" -> "Lighting is an option for Graphics3D and \
related functions that specifies what simulated lighting to"|>, 
 <|"label" -> "LightingAngle", "type" -> "keyword", 
  "info" -> "LightingAngle is an option for ReliefPlot and related functions \
that specifies the angle from which "|>, <|"label" -> "LightMagenta", 
  "type" -> "keyword", "info" -> "LightMagenta represents a light magenta \
color in graphics or style specifications."|>, 
 <|"label" -> "LightOrange", "type" -> "keyword", 
  "info" -> "LightOrange represents a light orange color in graphics or style \
specifications."|>, <|"label" -> "LightPink", "type" -> "keyword", 
  "info" -> "LightPink represents a light pink color in graphics or style \
specifications."|>, <|"label" -> "LightPurple", "type" -> "keyword", 
  "info" -> "LightPurple represents a light purple color in graphics or style \
specifications."|>, <|"label" -> "LightRed", "type" -> "keyword", 
  "info" -> "LightRed represents a light red color in graphics or style \
specifications."|>, <|"label" -> "LightSources", "type" -> "keyword", 
  "info" -> "LightSources is an option for Graphics3D and related functions \
that specifies the properties of poin"|>, <|"label" -> "LightYellow", 
  "type" -> "keyword", "info" -> "LightYellow represents a light yellow color \
in graphics or style specifications."|>, <|"label" -> "Likelihood", 
  "type" -> "keyword", "info" -> "Likelihood[dist, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
likelihood function for observations x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 from the dist"|>, 
 <|"label" -> "Limit", "type" -> "keyword", "info" -> "              *        \
                                         *           *                       \
"|>, <|"label" -> "LimitsPositioningTokens", "type" -> "keyword", 
  "info" -> "LimitsPositioningTokens is an option for selections that \
specifies a set of characters for which the"|>, 
 <|"label" -> "LindleyDistribution", "type" -> "keyword", 
  "info" -> "LindleyDistribution[\[CapitalATilde]\216b4] represents a Lindley \
distribution with shape parameter \[CapitalATilde]\216b4."|>, 
 <|"label" -> "Line", "type" -> "keyword", "info" -> "Line[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents the \
line segments joining a sequence for points p .Line[{{p  , p  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246},"|>, 
 <|"label" -> "LinearFractionalOptimization", "type" -> "keyword", 
  "info" -> "LinearFractionalOptimization[f, cons, vars] finds values of \
variables vars that minimize the linear "|>, 
 <|"label" -> "LinearFractionalTransform", "type" -> "keyword", 
  "info" -> "LinearFractionalTransform[m] gives a TransformationFunction that \
represents a linear fractional tran"|>, <|"label" -> "LinearGradientFilling", 
  "type" -> "keyword", "info" -> "LinearGradientFilling[{col , col , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, col }] is a \
two-dimensional graphics directive specifying that"|>, 
 <|"label" -> "LinearGradientImage", "type" -> "keyword", 
  "info" -> "LinearGradientImage[gcol] returns an image with values linearly \
changing from left to right based on"|>, 
 <|"label" -> "LinearizingTransformationData", "type" -> "keyword", 
  "info" -> "LinearizingTransformationData[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents data of an \
AffineStateSpaceModel linearized by functions"|>, 
 <|"label" -> "LinearLayer", "type" -> "keyword", 
  "info" -> "LinearLayer[n] represents a trainable, fully connected net layer \
that computes w . x + b with output"|>, <|"label" -> "LinearModelFit", 
  "type" -> "keyword", "info" -> "LinearModelFit[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] constructs a \
linear model of the form \[CapitalATilde]\216b2  + \[CapitalATilde]\216b2  f  \
+ \[CapitalATilde]\216b2  f "|>, <|"label" -> "LinearOffsetFunction", 
  "type" -> "keyword", "info" -> "LinearOffsetFunction is an option for \
linear and generalized linear model fitting functions that spe"|>, 
 <|"label" -> "LinearOptimization", "type" -> "keyword", 
  "info" -> "LinearOptimization[f, cons, vars] finds values of variables vars \
that minimize the linear objective "|>, <|"label" -> "LinearProgramming", 
  "type" -> "keyword", "info" -> "LinearProgramming[c, m, b] finds a vector x \
that minimizes the quantity c . x subject to the constra"|>, 
 <|"label" -> "LinearSolve", "type" -> "keyword", 
  "info" -> "LinearSolve[m, b] finds an x that solves the matrix equation m . \
x == b. LinearSolve[m] generates a "|>, <|"label" -> "LinearSolveFunction", 
  "type" -> "keyword", "info" -> "LinearSolveFunction[dimensions, data] \
represents a function for providing solutions to a matrix equa"|>, 
 <|"label" -> "LinebreakAdjustments", "type" -> "keyword", 
  "info" -> "LinebreakAdjustments is an option for selections that sets \
parameters used for calculating where aut"|>, <|"label" -> "LineBreakChart", 
  "type" -> "keyword", "info" -> "LineBreakChart[{{date , p }, {date , p }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a line \
break chart with prices p  at date date ."|>, <|"label" -> "LineBreakWithin", 
  "type" -> "keyword", "info" -> "LineBreakWithin is an option for selections \
that specifies whether line breaks occur automatically w"|>, 
 <|"label" -> "LineGraph", "type" -> "keyword", 
  "info" -> "LineGraph[g] gives the line graph of the graph g.LineGraph[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w to specify t"|>\
, <|"label" -> "LineIndent", "type" -> "keyword", 
  "info" -> "LineIndent is an option for Style and Cell that specifies how \
many ems of indentation to add at the "|>, 
 <|"label" -> "LineIntegralConvolutionPlot", "type" -> "keyword", 
  "info" -> "LineIntegralConvolutionPlot[{{v , v }, image}, {x, x   , x   }, \
{y, y   , y   }] generates a line in"|>, 
 <|"label" -> "LineIntegralConvolutionScale", "type" -> "keyword", 
  "info" -> "LineIntegralConvolutionScale is an option to \
LineIntegralConvolutionPlot and related functions that "|>, 
 <|"label" -> "LineLegend", "type" -> "keyword", 
  "info" -> "LineLegend[{col , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {lbl , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
legend that associates color col  with label lbl .LineL"|>, 
 <|"label" -> "LineSpacing", "type" -> "keyword", 
  "info" -> "LineSpacing is an option for Style and Cell that specifies the \
spacing between successive lines of t"|>, <|"label" -> "LinkActivate", 
  "type" -> "keyword", "info" -> "LinkActivate[lnk] activates a WSTP \
connection, waiting for the program at the other end to respond."|>, 
 <|"label" -> "LinkClose", "type" -> "keyword", 
  "info" -> "LinkClose[link] closes an open WSTP connection. "|>, 
 <|"label" -> "LinkConnect", "type" -> "keyword", 
  "info" -> "LinkConnect[\"name\"] connects to a WSTP link created by another \
program. "|>, <|"label" -> "LinkCreate", "type" -> "keyword", 
  "info" -> "LinkCreate[\"name\"] creates a WSTP link with the specified name \
for another program to connect to. Li"|>, <|"label" -> "LinkError", 
  "type" -> "keyword", "info" -> "LinkError[link] returns error information \
for link in the form { errorNumber, errorExplanation }."|>, 
 <|"label" -> "LinkFlush", "type" -> "keyword", 
  "info" -> "LinkFlush[link] transmits immediately any locally buffered \
outgoing expressions."|>, <|"label" -> "LinkFunction", "type" -> "keyword", 
  "info" -> "LinkFunction is an option for GeneralizedLinearModelFit that \
specifies the link function for the gen"|>, <|"label" -> "LinkHost", 
  "type" -> "keyword", "info" -> "LinkHost is an option for LinkOpen that \
specifies on what computer a program should be launched or o"|>, 
 <|"label" -> "LinkInterrupt", "type" -> "keyword", 
  "info" -> "LinkInterrupt[link] sends an interrupt to the program at the \
other end of the specified WSTP connect"|>, <|"label" -> "LinkLaunch", 
  "type" -> "keyword", "info" -> "LinkLaunch[\"prog\"] starts the external \
program prog and opens a WSTP connection to it. "|>, 
 <|"label" -> "LinkMode", "type" -> "keyword", "info" -> "LinkMode is an \
option for LinkOpen that specifies how the link is to be established and \
connected.  "|>, <|"label" -> "LinkObject", "type" -> "keyword", 
  "info" -> "LinkObject[\"name\", n , n ] is an object that represents an \
active WSTP connection for functions such"|>, 
 <|"label" -> "LinkOpen", "type" -> "keyword", "info" -> "LinkOpen[\"prog\"] \
starts the external program prog and opens a MathLink connection to it."|>, 
 <|"label" -> "LinkPatterns", "type" -> "keyword", 
  "info" -> "LinkPatterns[link] gives a list of the patterns for which \
definitions were set up when the external "|>, 
 <|"label" -> "LinkProtocol", "type" -> "keyword", 
  "info" -> "LinkProtocol is an option to LinkLaunch, Install, and related \
functions that specifies the underlyin"|>, <|"label" -> "LinkRankCentrality", 
  "type" -> "keyword", "info" -> "LinkRankCentrality[g, \
\[CapitalATilde]\216\\[PlusMinus]] gives the link-rank centralities for edges \
in the graph g and weight \[CapitalATilde]\216\\[PlusMinus].Link"|>, 
 <|"label" -> "LinkRead", "type" -> "keyword", "info" -> "LinkRead[link] \
reads one expression from the specified WSTP connection. LinkRead[link, h] \
wraps h ar"|>, <|"label" -> "LinkReadHeld", "type" -> "keyword", 
  "info" -> "LinkReadHeld[link] reads an expression via WSTP from link and \
returns it wrapped in Hold."|>, <|"label" -> "LinkReadyQ", 
  "type" -> "keyword", "info" -> "LinkReadyQ[link] tests whether there is an \
expression ready to read from the specified WSTP connecti"|>, 
 <|"label" -> "Links", "type" -> "keyword", "info" -> "Links[] gives a list \
of all WSTP connections that are currently open. Links[patt] lists only links \
w"|>, <|"label" -> "LinkService", "type" -> "keyword", 
  "info" -> "LinkService[\"service\", l] is an object that represents an \
active connection to the WSTP service."|>, <|"label" -> "LinkWrite", 
  "type" -> "keyword", "info" -> 
   "LinkWrite[link, expr] writes expr to the specified WSTP connection. "|>, 
 <|"label" -> "LinkWriteHeld", "type" -> "keyword", 
  "info" -> "LinkWriteHeld[link, Hold[expr], (flush : True)] writes expr \
(without the Hold) via WSTP to link (syn"|>, <|"label" -> "LiouvilleLambda", 
  "type" -> "keyword", "info" -> "LiouvilleLambda[n] gives the Liouville \
function \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet](n)."|>, 
 <|"label" -> "List", "type" -> "keyword", "info" -> "{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} is a list of \
elements. \n  1   2"|>, <|"label" -> "Listable", "type" -> "keyword", 
  "info" -> "Listable is an attribute that can be assigned to a symbol f to \
indicate that the function f should a"|>, <|"label" -> "ListAnimate", 
  "type" -> "keyword", "info" -> "ListAnimate[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates an \
animation whose frames are the successive expr . ListAni"|>, 
 <|"label" -> "ListContourPlot", "type" -> "keyword", 
  "info" -> "ListContourPlot[{{f  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {f  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f  }}] generates \
a contour plot from an array of values "|>, <|"label" -> "ListContourPlot3D", 
  "type" -> "keyword", "info" -> "ListContourPlot3D[array] generates a \
contour plot from a three-dimensional array of values. ListCont"|>, 
 <|"label" -> "ListCurvePathPlot", "type" -> "keyword", 
  "info" -> "ListCurvePathPlot[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a curve \
that corresponds to a smooth path through t"|>, 
 <|"label" -> "ListDeconvolve", "type" -> "keyword", 
  "info" -> 
   "ListDeconvolve[ker, list] gives a deconvolution of list using kernel \
ker."|>, <|"label" -> "ListDensityPlot", "type" -> "keyword", 
  "info" -> "ListDensityPlot[{{f  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {f  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f  }}] generates \
a smooth density plot from an array of "|>, <|"label" -> "ListDensityPlot3D", 
  "type" -> "keyword", "info" -> "ListDensityPlot3D[array] generates a smooth \
density plot from an array of values. ListDensityPlot3D["|>, 
 <|"label" -> "Listen", "type" -> "keyword", "info" -> "Listen is a setting \
for the LinkMode option of LinkOpen.  LinkMode->Listen causes a link to be \
creat"|>, <|"label" -> "ListFormat", "type" -> "keyword", 
  "info" -> "ListFormat is an option to TextString and related functions that \
determines how lists are formatted."|>, 
 <|"label" -> "ListFourierSequenceTransform", "type" -> "keyword", 
  "info" -> "ListFourierSequenceTransform[list, \
\[CapitalATilde]\217\[CapitalAHat]\211] gives the discrete-time Fourier \
transform (DTFT) of a list as "|>, <|"label" -> "ListInterpolation", 
  "type" -> "keyword", "info" -> "ListInterpolation[array] constructs an \
InterpolatingFunction object that represents an approximate f"|>, 
 <|"label" -> "ListLineIntegralConvolutionPlot", "type" -> "keyword", 
  "info" -> "ListLineIntegralConvolutionPlot[{array, image}] generates a line \
integral convolution plot of image "|>, <|"label" -> "ListLinePlot", 
  "type" -> "keyword", "info" -> "ListLinePlot[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a line \
through the points {1, y }, {2, y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.ListLinePlot[{{x \
, y }"|>, <|"label" -> "ListLinePlot3D", "type" -> "keyword", 
  "info" -> "ListLinePlot3D[{{x , y , z }, {x , y , z }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {x , y , z }}] \
plots a curve through the 3D points {x"|>, <|"label" -> "ListLogLinearPlot", 
  "type" -> "keyword", "info" -> "ListLogLinearPlot[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a \
log-linear plot of the y , assumed to correspond to x coordin"|>, 
 <|"label" -> "ListLogLogPlot", "type" -> "keyword", 
  "info" -> "ListLogLogPlot[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a log-log \
plot of the y , assumed to correspond to x coordinates 1"|>, 
 <|"label" -> "ListLogPlot", "type" -> "keyword", 
  "info" -> "ListLogPlot[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a log \
plot of the y , assumed to correspond to x coordinates 1, 2, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ListPicker", "type" -> "keyword", 
  "info" -> "ListPicker[list, {val , val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
list pane with setting list that can contain possible"|>, 
 <|"label" -> "ListPlay", "type" -> "keyword", "info" -> "ListPlay[{a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates an \
object that plays as a sound whose amplitude is given by the sequen"|>, 
 <|"label" -> "ListPlot", "type" -> "keyword", "info" -> "ListPlot[{y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }] plots \
points {1, y }, {2, y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246. ListPlot[{{x , y \
}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {x , y }}] \
generates "|>, <|"label" -> "ListPlot3D", "type" -> "keyword", 
  "info" -> "ListPlot3D[{{f  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {f  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f  }}] generates \
a surface representing an array of height va"|>, 
 <|"label" -> "ListPointPlot3D", "type" -> "keyword", 
  "info" -> "ListPointPlot3D[{{x , y , z }, {x , y , z }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a 3D \
scatter plot of points with coordina"|>, <|"label" -> "ListPolarPlot", 
  "type" -> "keyword", "info" -> "ListPolarPlot[{r , r , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots points \
equally spaced in angle at radii r \
.ListPolarPlot[{{\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] , r },"|>, 
 <|"label" -> "ListQ", "type" -> "keyword", 
  "info" -> 
   "ListQ[expr] gives True if the head of expr is List, and False otherwise."\
|>, <|"label" -> "ListSliceContourPlot3D", "type" -> "keyword", 
  "info" -> "ListSliceContourPlot3D[array, surf] generates a contour plot of \
the three-dimensional array of value"|>, 
 <|"label" -> "ListSliceDensityPlot3D", "type" -> "keyword", 
  "info" -> "ListSliceDensityPlot3D[array, surf] generates a density plot of \
the three-dimensional array of value"|>, 
 <|"label" -> "ListSliceVectorPlot3D", "type" -> "keyword", 
  "info" -> "ListSliceVectorPlot3D[array, surf] generates a vector plot from \
a 3D array of vector field values ov"|>, <|"label" -> "ListStepPlot", 
  "type" -> "keyword", "info" -> "ListStepPlot[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots the \
values y , y , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 in \
steps at points 1, 2, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.ListStepPlot[{{x \
, y"|>, <|"label" -> "ListStreamDensityPlot", "type" -> "keyword", 
  "info" -> "ListStreamDensityPlot[array] generates a stream density plot \
from a 2D array of vector and scalar fi"|>, <|"label" -> "ListStreamPlot", 
  "type" -> "keyword", "info" -> "ListStreamPlot[array] generates a stream \
plot from an array of vector field values.ListStreamPlot[{{"|>, 
 <|"label" -> "ListStreamPlot3D", "type" -> "keyword", 
  "info" -> "ListStreamPlot3D[array] plots streamlines for the vector field \
given as an array of vectors."|>, <|"label" -> "ListSurfacePlot3D", 
  "type" -> "keyword", "info" -> "ListSurfacePlot3D[{{x , y , z }, {x , y , z \
}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a \
three-dimensional surface constructed to "|>, 
 <|"label" -> "ListVectorDensityPlot", "type" -> "keyword", 
  "info" -> "ListVectorDensityPlot[array] generates a vector plot from a 2D \
array of vector and scalar field valu"|>, 
 <|"label" -> "ListVectorDisplacementPlot", "type" -> "keyword", 
  "info" -> "ListVectorDisplacementPlot[{{{vx  , vy  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {vx  , vy  }}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {{vx  , vy  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {vx  , vy  }}}] \
ge"|>, <|"label" -> "ListVectorDisplacementPlot3D", "type" -> "keyword", 
  "info" -> "ListVectorDisplacementPlot3D[{{{vx  , vy  , vz  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {vx  , vy  , vz  \
}}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {{vx  , vy  \
, vz  }, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "ListVectorPlot", "type" -> "keyword", 
  "info" -> "ListVectorPlot[array] generates a vector plot from an array of \
vector field values.ListVectorPlot[{{"|>, <|"label" -> "ListVectorPlot3D", 
  "type" -> "keyword", "info" -> "ListVectorPlot3D[array] generates a 3D \
vector plot from a 3D array of vector field values.ListVector"|>, 
 <|"label" -> "ListZTransform", "type" -> "keyword", 
  "info" -> "ListZTransform[list, z] gives the Z transform of list as a \
function of z.ListZTransform[list, z, k] "|>, 
 <|"label" -> "LocalAdaptiveBinarize", "type" -> "keyword", 
  "info" -> "LocalAdaptiveBinarize[image, r] creates a binary image from \
image by replacing values above the mean"|>, 
 <|"label" -> "LocalClusteringCoefficient", "type" -> "keyword", 
  "info" -> "LocalClusteringCoefficient[g] gives the list of local clustering \
coefficients of all vertices in the"|>, <|"label" -> "LocalizeVariables", 
  "type" -> "keyword", "info" -> "LocalizeVariables is an option to \
Manipulate that determines whether the values of variables associa"|>, 
 <|"label" -> "LocalObject", "type" -> "keyword", 
  "info" -> "LocalObject[] represents a new anonymous local \
object.LocalObject[\"file \
:///\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246\"] represents \
a local o"|>, <|"label" -> "LocalObjects", "type" -> "keyword", 
  "info" -> "LocalObjects[] gives a list of local objects in your current \
local base directory.LocalObjects[dir] "|>, 
 <|"label" -> "LocalResponseNormalizationLayer", "type" -> "keyword", 
  "info" -> "LocalResponseNormalizationLayer[] represents a net layer that \
normalizes its input by averaging acro"|>, <|"label" -> "LocalSubmit", 
  "type" -> "keyword", "info" -> "LocalSubmit[expr] submits a task to \
evaluate expr in a separate kernel.LocalSubmit[ScheduledTask[exp"|>, 
 <|"label" -> "LocalSymbol", "type" -> "keyword", 
  "info" -> "LocalSymbol[\"name\"] represents a symbol whose value is \
persistently stored in the local file system."|>, 
 <|"label" -> "LocalTime", "type" -> "keyword", 
  "info" -> "LocalTime[] gives a DateObject corresponding to the current \
local time at the current geo location.L"|>, <|"label" -> "LocalTimeZone", 
  "type" -> "keyword", "info" -> "LocalTimeZone[] gives the current time zone \
for the current geo location.LocalTimeZone[loc] gives th"|>, 
 <|"label" -> "LocationEquivalenceTest", "type" -> "keyword", 
  "info" -> "LocationEquivalenceTest[{data , data , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] tests whether \
the means or medians of the data  are equal"|>, 
 <|"label" -> "LocationTest", "type" -> "keyword", 
  "info" -> "LocationTest[data] tests whether the mean or median of the data \
is zero. LocationTest[{data , data }"|>, <|"label" -> "LocatorAutoCreate", 
  "type" -> "keyword", "info" -> "LocatorAutoCreate is an option for \
LocatorPane, Manipulate, and related functions that specifies whe"|>, 
 <|"label" -> "LocatorRegion", "type" -> "keyword", 
  "info" -> "LocatorRegion is an option for Locator that specifies where the \
locator object should by default be "|>, <|"label" -> "Locked", 
  "type" -> "keyword", "info" -> "Locked is an attribute that, once assigned, \
prevents modification of any attributes of a symbol. "|>, 
 <|"label" -> "Log", "type" -> "keyword", "info" -> "Log[z] gives the natural \
logarithm of z (logarithm to base e). Log[b, z] gives the logarithm to base"|>\
, <|"label" -> "Log10", "type" -> "keyword", 
  "info" -> "Log10[x] gives the base-10 logarithm of x."|>, 
 <|"label" -> "Log2", "type" -> "keyword", 
  "info" -> "Log2[x] gives the base-2 logarithm of x."|>, 
 <|"label" -> "LogBarnesG", "type" -> "keyword", 
  "info" -> 
   "LogBarnesG[z] gives the logarithm of the Barnes G-function logG(z)."|>, 
 <|"label" -> "LogGamma", "type" -> "keyword", "info" -> "LogGamma[z] gives \
the logarithm of the gamma function log \
\[CapitalATilde]\216\[CapitalAHat]\223(z). "|>, 
 <|"label" -> "LogGammaDistribution", "type" -> "keyword", 
  "info" -> "LogGammaDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216\[CapitalAHat]\274] represents a \
log-gamma distribution with shape parameters \
\[CapitalATilde]\216\\[PlusMinus] and \[CapitalATilde]\216b2 and "|>, 
 <|"label" -> "LogicalExpand", "type" -> "keyword", 
  "info" -> "LogicalExpand[expr] expands out logical combinations of \
equations, inequalities, and other functions"|>, 
 <|"label" -> "LogIntegral", "type" -> "keyword", 
  "info" -> "LogIntegral[z] is the logarithmic integral function li(z). "|>, 
 <|"label" -> "LogisticDistribution", "type" -> "keyword", 
  "info" -> "LogisticDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\216b2] represents a logistic distribution with mean \
\[CapitalATilde]\216\[CapitalAHat]\274 and scale parameter \
\[CapitalATilde]\216b2.Logi"|>, <|"label" -> "LogisticSigmoid", 
  "type" -> "keyword", "info" -> 
   "LogisticSigmoid[z] gives the logistic sigmoid function."|>, 
 <|"label" -> "LogLikelihood", "type" -> "keyword", 
  "info" -> "LogLikelihood[dist, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
log\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220likelihood \
function for observations x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 from t"|>, 
 <|"label" -> "LogLinearPlot", "type" -> "keyword", 
  "info" -> "LogLinearPlot[f, {x, x   , x   }] generates a log-linear plot of \
f as a function of x from x    to x"|>, 
 <|"label" -> "LogLogisticDistribution", "type" -> "keyword", 
  "info" -> "LogLogisticDistribution[\[CapitalATilde]\216b3, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents a log-logistic \
distribution with shape parameter \[CapitalATilde]\216b3 and scal"|>, 
 <|"label" -> "LogLogPlot", "type" -> "keyword", 
  "info" -> "LogLogPlot[f, {x, x   , x   }] generates a log-log plot of f as \
a function of x from x    to x   . L"|>, 
 <|"label" -> "LogMultinormalDistribution", "type" -> "keyword", 
  "info" -> "LogMultinormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\274, \[CapitalATilde]\216\[CapitalAHat]\[Sterling]] represents a \
log-multinormal distribution with parameters \
\[CapitalATilde]\216\[CapitalAHat]\274 and \
\[CapitalATilde]\216\[CapitalAHat]\[Sterling]."|>, 
 <|"label" -> "LogNormalDistribution", "type" -> "keyword", 
  "info" -> "LogNormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents a lognormal distribution \
derived from a normal distribution w"|>, <|"label" -> "LogPlot", 
  "type" -> "keyword", "info" -> "LogPlot[f, {x, x   , x   }] generates a log \
plot of f as a function of x from x    to x   . LogPlot["|>, 
 <|"label" -> "LogRankTest", "type" -> "keyword", 
  "info" -> "LogRankTest[{data , data , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] tests for equal \
hazard rates among the data  using a log-rank type te"|>, 
 <|"label" -> "LogSeriesDistribution", "type" -> "keyword", 
  "info" -> "LogSeriesDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[Cedilla]] represents a logarithmic series distribution with parameter \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]."|>, 
 <|"label" -> "Longest", "type" -> "keyword", "info" -> "Longest[p] is a \
pattern object that matches the longest sequence consistent with the pattern \
p. "|>, <|"label" -> "LongestCommonSequence", "type" -> "keyword", 
  "info" -> "LongestCommonSequence[s , s ] finds the longest sequence of \
contiguous or disjoint elements common t"|>, 
 <|"label" -> "LongestCommonSequencePositions", "type" -> "keyword", 
  "info" -> "LongestCommonSequencePositions[s , s ] finds the longest \
sequence of contiguous or disjoint elements"|>, 
 <|"label" -> "LongestCommonSubsequence", "type" -> "keyword", 
  "info" -> "LongestCommonSubsequence[s , s ] finds the longest contiguous \
subsequence of elements common to the "|>, 
 <|"label" -> "LongestCommonSubsequencePositions", "type" -> "keyword", 
  "info" -> "LongestCommonSubsequencePositions[s , s ] finds the longest \
contiguous subsequence of elements commo"|>, <|"label" -> "LongestMatch", 
  "type" -> "keyword", "info" -> "LongestMatch[p] is a string pattern object \
matching the longest sequence of characters consistent wi"|>, 
 <|"label" -> "LongestOrderedSequence", "type" -> "keyword", 
  "info" -> "LongestOrderedSequence[list] finds the longest ordered sequence \
of contiguous or disjoint elements i"|>, <|"label" -> "LongForm", 
  "type" -> "keyword", "info" -> "LongForm is an option for Information. With \
LongForm -> True, the full information of a symbol is pr"|>, 
 <|"label" -> "Longitude", "type" -> "keyword", 
  "info" -> "Longitude[pos] gives the longitude in degrees of a geographic \
position specified by pos.Longitude[po"|>, <|"label" -> "LongLeftArrow", 
  "type" -> "keyword", "info" -> "LongLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\\[Micro] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\\[Micro] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LongLeftRightArrow", "type" -> "keyword", 
  "info" -> "LongLeftRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\\[CenterDot] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\\[CenterDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LongRightArrow", "type" -> "keyword", 
  "info" -> "LongRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\\[Paragraph] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\237\\[Paragraph] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LongShortTermMemoryLayer", "type" -> "keyword", 
  "info" -> "LongShortTermMemoryLayer[n] represents a trainable recurrent \
layer that takes a sequence of vectors "|>, <|"label" -> "Lookup", 
  "type" -> "keyword", "info" -> "Lookup[assoc, key] looks up the value \
associated with key in the association assoc; if the key is no"|>, 
 <|"label" -> "Loopback", "type" -> "keyword", "info" -> "Loopback is a \
setting for the LinkMode option of LinkOpen.  LinkMode->Loopback causes a \
link to be c"|>, <|"label" -> "LoopFreeGraphQ", "type" -> "keyword", 
  "info" -> "LoopFreeGraphQ[g] yields True if the graph g has no self-loops, \
and False otherwise."|>, <|"label" -> "Looping", "type" -> "keyword", 
  "info" -> "Looping is an option for VideoStream, AudioStream and related \
functions to specify the playback loop"|>, <|"label" -> "LossFunction", 
  "type" -> "keyword", "info" -> "LossFunction is an option for NetTrain that \
specifies how to compare actual and requested outputs fr"|>, 
 <|"label" -> "LowerCaseQ", "type" -> "keyword", 
  "info" -> "LowerCaseQ[string] yields True if all the characters in the \
string are lowercase letters, and yields"|>, <|"label" -> "LowerLeftArrow", 
  "type" -> "keyword", "info" -> "LowerLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\231 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\231 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LowerRightArrow", "type" -> "keyword", 
  "info" -> "LowerRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\230 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\230 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "LowpassFilter", "type" -> "keyword", 
  "info" -> "LowpassFilter[data, \[CapitalATilde]\217\[CapitalAHat]\211 ] \
applies a lowpass filter with a cutoff frequency \
\[CapitalATilde]\217\[CapitalAHat]\211  to an array of data.Lowp"|>, 
 <|"label" -> "LQEstimatorGains", "type" -> "keyword", 
  "info" -> "LQEstimatorGains[ssm, {w, v}] gives the optimal estimator gain \
matrix for the StateSpaceModel ssm, w"|>, <|"label" -> "LQGRegulator", 
  "type" -> "keyword", "info" -> "LQGRegulator[sspec, cvs, wts] gives the \
optimal output feedback controller for the stochastic system"|>, 
 <|"label" -> "LQOutputRegulatorGains", "type" -> "keyword", 
  "info" -> "LQOutputRegulatorGains[sspec, wts] gives the state feedback \
gains for the system specification sspec"|>, <|"label" -> "LQRegulatorGains", 
  "type" -> "keyword", "info" -> "LQRegulatorGains[spsec, wts] gives the \
state feedback gains for the system specification sspec that "|>, 
 <|"label" -> "LucasL", "type" -> "keyword", "info" -> "LucasL[n] gives the \
Lucas number L .LucasL[n, x] gives the Lucas polynomial L (x).\n              \
   "|>, <|"label" -> "LuccioSamiComponents", "type" -> "keyword", 
  "info" -> "LuccioSamiComponents[g] gives the \
Luccio\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Sami \
components of the graph g.LuccioSamiComponents[g, {v ,"|>, 
 <|"label" -> "LUDecomposition", "type" -> "keyword", 
  "info" -> "LUDecomposition[m] generates a representation of the LU \
decomposition of a square matrix\[CapitalATilde]\202\[CapitalAHat] m. "|>, 
 <|"label" -> "LunarEclipse", "type" -> "keyword", 
  "info" -> "LunarEclipse[] gives the time of the next lunar \
eclipse.LunarEclipse[datespec] gives the time for th"|>, 
 <|"label" -> "LUVColor", "type" -> "keyword", "info" -> "LUVColor[l, u, v] \
represents a color in the LUV color space with lightness l and color \
components u "|>, <|"label" -> "LyapunovSolve", "type" -> "keyword", 
  "info" -> "LyapunovSolve[a, c] finds a solution x of the matrix Lyapunov \
equation a . x + x . a \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\211 \
\[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 c.LyapunovS"|>, 
 <|"label" -> "LyonsGroupLy", "type" -> "keyword", 
  "info" -> 
   "LyonsGroupLy[] represents the sporadic simple Lyons group Ly."|>, 
 <|"label" -> "MachineID", "type" -> "keyword", 
  "info" -> "MachineID is an option to Encode which specifies the required \
value of ECMachineID on the computer th"|>, <|"label" -> "MachineName", 
  "type" -> "keyword", "info" -> "MachineName is an option to Encode which \
specifies the required value of ECMachineName on the compute"|>, 
 <|"label" -> "MachineNumberQ", "type" -> "keyword", 
  "info" -> "MachineNumberQ[expr] returns True if expr is a \
machine\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220precision \
real or complex number, and returns"|>, <|"label" -> "MachinePrecision", 
  "type" -> "keyword", "info" -> "MachinePrecision is a symbol used to \
indicate \
machine\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220number \
precision. "|>, <|"label" -> "Magenta", "type" -> "keyword", 
  "info" -> "Magenta represents the color magenta in graphics or style \
specifications. "|>, <|"label" -> "Magnification", "type" -> "keyword", 
  "info" -> "Magnification is an option for Style and Cell that specifies \
what magnification to use for display. "|>, <|"label" -> "Magnify", 
  "type" -> "keyword", "info" -> "Magnify[expr, r] represents an object to be \
displayed with magnification r. Magnify[expr] displays w"|>, 
 <|"label" -> "MailAddressValidation", "type" -> "keyword", 
  "info" -> "MailAddressValidation is an option for SendMail that specifies \
whether and how to validate email add"|>, <|"label" -> "MailExecute", 
  "type" -> "keyword", "info" -> "MailExecute[cmd, target] executes the mail \
command cmd on the target mail server connection, folder,"|>, 
 <|"label" -> "MailFolder", "type" -> "keyword", 
  "info" -> "MailFolder[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a mail folder associated with an active mail \
server connection."|>, <|"label" -> "MailItem", "type" -> "keyword", 
  "info" -> "MailItem[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] represents an item of mail associated with an active mail server \
connection."|>, <|"label" -> "MailReceiverFunction", "type" -> "keyword", 
  "info" -> "MailReceiverFunction[fun] represents a mail receiver function \
that applies fun to any mail message i"|>, 
 <|"label" -> "MailResponseFunction", "type" -> "keyword", 
  "info" -> "MailResponseFunction is an option for MailReceiverFunction that \
specifies what function to apply to "|>, <|"label" -> "MailSearch", 
  "type" -> "keyword", "info" -> "MailSearch[folder, assoc] searches the \
specified mail folder for messages with properties matching e"|>, 
 <|"label" -> "MailServerConnect", "type" -> "keyword", 
  "info" -> "MailServerConnect[] connects to your default incoming mail \
server.MailServerConnect[\"server\"] connec"|>, 
 <|"label" -> "MailServerConnection", "type" -> "keyword", 
  "info" -> "MailServerConnection[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] is a symbolic representation of a connection to an \
incoming mail server."|>, <|"label" -> "MailSettings", "type" -> "keyword", 
  "info" -> "MailSettings is an option for SendMail and MailServerConnect to \
specify mail settings."|>, <|"label" -> "MainSolve", "type" -> "keyword", 
  "info" -> "MainSolve[eqns] is the underlying function for transforming \
systems of equations. Solve and Eliminat"|>, <|"label" -> "Majority", 
  "type" -> "keyword", "info" -> "Majority[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives True if \
the majority of the e  are True, and False if the majority are Fal"|>, 
 <|"label" -> "MakeRules", "type" -> "keyword", 
  "info" -> "MakeRules is an option to Solve and related functions. With \
MakeRules -> True, the result is present"|>, 
 <|"label" -> "ManagedLibraryExpressionID", "type" -> "keyword", 
  "info" -> "ManagedLibraryExpressionID[expr] returns the positive integer ID \
associated with expr if it is a man"|>, 
 <|"label" -> "ManagedLibraryExpressionQ", "type" -> "keyword", 
  "info" -> "ManagedLibraryExpressionQ[expr] returns True if expr is a \
managed library expression and False other"|>, 
 <|"label" -> "MandelbrotSetBoettcher", "type" -> "keyword", 
  "info" -> "MandelbrotSetBoettcher[z] gives the \
B\[CapitalATilde]\203\\[Paragraph]ttcher coordinate of z with respect to the \
Mandelbrot set."|>, <|"label" -> "MandelbrotSetDistance", 
  "type" -> "keyword", "info" -> "MandelbrotSetDistance[c] estimates the \
distance from c to the nearest point in the Mandelbrot set.Ma"|>, 
 <|"label" -> "MandelbrotSetIterationCount", "type" -> "keyword", 
  "info" -> "                                                                 \
                       2\nMandelbrot"|>, <|"label" -> "MandelbrotSetMemberQ", 
  "type" -> "keyword", "info" -> "MandelbrotSetMemberQ[z] returns True if z \
is in the Mandelbrot set, and False otherwise."|>, 
 <|"label" -> "MandelbrotSetPlot", "type" -> "keyword", 
  "info" -> "MandelbrotSetPlot[{z   , z   }] plots the portion of the \
Mandelbrot set inside the rectangle with co"|>, 
 <|"label" -> "MangoldtLambda", "type" -> "keyword", 
  "info" -> "MangoldtLambda[n] gives the von Mangoldt function \
\[CapitalATilde]\216\[CapitalAHat]\233(n)."|>, 
 <|"label" -> "ManhattanDistance", "type" -> "keyword", 
  "info" -> "ManhattanDistance[u, v] gives the Manhattan or \"city block\" \
distance between vectors u and v."|>, <|"label" -> "Manipulate", 
  "type" -> "keyword", "info" -> "Manipulate[expr, {u, u   , u   }] generates \
a version of expr with controls added to allow interacti"|>, 
 <|"label" -> "Manipulator", "type" -> "keyword", 
  "info" -> "Manipulator[x] represents a manipulator with setting x in the \
range 0 to 1. Manipulator[Dynamic[x]] "|>, 
 <|"label" -> "MannedSpaceMissionData", "type" -> "keyword", 
  "info" -> "MannedSpaceMissionData[entity, property] gives the value of the \
specified property for the manned sp"|>, <|"label" -> "MannWhitneyTest", 
  "type" -> "keyword", "info" -> "MannWhitneyTest[{data , data }] tests \
whether the medians of data  and data  are equal.MannWhitneyTe"|>, 
 <|"label" -> "MantissaExponent", "type" -> "keyword", 
  "info" -> "MantissaExponent[x] gives a list containing the mantissa and \
exponent of a number x. MantissaExponen"|>, <|"label" -> "Manual", 
  "type" -> "keyword", "info" -> "Manual represents an option or other value \
that is to be selected manually, usually by some form of "|>, 
 <|"label" -> "Map", "type" -> "keyword", "info" -> "Map[f, expr] or f/@expr \
applies f to each element on the first level in expr. Map[f, expr, \
levelspec]"|>, <|"label" -> "MapAll", "type" -> "keyword", 
  "info" -> 
   "MapAll[f, expr] or f//@expr applies f to every subexpression in expr. "|>\
, <|"label" -> "MapAt", "type" -> "keyword", "info" -> "MapAt[f, expr, n] \
applies f to the element at position n in expr. If n is negative, the \
position is "|>, <|"label" -> "MapIndexed", "type" -> "keyword", 
  "info" -> "MapIndexed[f, expr] applies f to the elements of expr, giving \
the part specification of each element"|>, <|"label" -> "MAProcess", 
  "type" -> "keyword", "info" -> "MAProcess[{b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }, v] \
represents a moving-average process of order q with normal white noise var"|>\
, <|"label" -> "MapThread", "type" -> "keyword", 
  "info" -> "MapThread[f, {{a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {b , b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives {f[a , b \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], f[a , b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}. MapThread[f, \
{exp"|>, <|"label" -> "MarchenkoPasturDistribution", "type" -> "keyword", 
  "info" -> "MarchenkoPasturDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet], \[CapitalATilde]\217\[CapitalAHat]\203] represents a \
Marchenko\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Pastur \
distribution with asymptotic ratio \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]"|>, 
 <|"label" -> "MarcumQ", "type" -> "keyword", "info" -> "MarcumQ[m, a, b] \
gives Marcum's Q function Q (a, b).MarcumQ[m, a, b , b ] gives Marcum's Q \
function "|>, <|"label" -> "MardiaCombinedTest", "type" -> "keyword", 
  "info" -> "MardiaCombinedTest[data] tests whether data follows a \
MultinormalDistribution using the Mardia combi"|>, 
 <|"label" -> "MardiaKurtosisTest", "type" -> "keyword", 
  "info" -> "MardiaKurtosisTest[data] tests whether data follows a \
MultinormalDistribution using the Mardia kurto"|>, 
 <|"label" -> "MardiaSkewnessTest", "type" -> "keyword", 
  "info" -> "MardiaSkewnessTest[data] tests whether data follows a \
MultinormalDistribution using the Mardia skewn"|>, 
 <|"label" -> "MarginalDistribution", "type" -> "keyword", 
  "info" -> "                                                                 \
                    th\nMarginalDist"|>, 
 <|"label" -> "MarkovProcessProperties", "type" -> "keyword", 
  "info" -> "MarkovProcessProperties[mproc] gives a summary of properties for \
the finite state Markov process mpr"|>, <|"label" -> "Masking", 
  "type" -> "keyword", "info" -> "Masking is an option for various image and \
signal processing functions that specifies on which regio"|>, 
 <|"label" -> "MassConcentrationCondition", "type" -> "keyword", 
  "info" -> "MassConcentrationCondition[pred, vars, pars] represents a mass \
concentration boundary condition for "|>, <|"label" -> "MassFluxValue", 
  "type" -> "keyword", "info" -> "MassFluxValue[pred, vars, pars] represents \
a mass flux boundary condition for PDEs with predicate pr"|>, 
 <|"label" -> "MassImpermeableBoundaryValue", "type" -> "keyword", 
  "info" -> "MassImpermeableBoundaryValue[pred, vars, pars] represents a mass \
impermeable boundary condition for "|>, <|"label" -> "MassOutflowValue", 
  "type" -> "keyword", "info" -> "MassOutflowValue[pred, vars, pars] \
represents a mass outflow boundary condition for PDEs with predic"|>, 
 <|"label" -> "MassSymmetryValue", "type" -> "keyword", 
  "info" -> "MassSymmetryValue[pred, vars, pars] represents a mass symmetry \
boundary condition for PDEs with pred"|>, <|"label" -> "MassTransferValue", 
  "type" -> "keyword", "info" -> "MassTransferValue[pred, vars, pars] \
represents a mass transfer boundary condition for PDEs with pred"|>, 
 <|"label" -> "MassTransportPDEComponent", "type" -> "keyword", 
  "info" -> "MassTransportPDEComponent[vars, pars] yields a mass transport \
PDE term with variables vars and param"|>, 
 <|"label" -> "MatchingDissimilarity", "type" -> "keyword", 
  "info" -> "MatchingDissimilarity[u, v] gives the matching dissimilarity \
between Boolean vectors u and v."|>, <|"label" -> "MatchLocalNameQ", 
  "type" -> "keyword", "info" -> "MatchLocalNameQ is an internal symbol."|>, 
 <|"label" -> "MatchLocalNames", "type" -> "keyword", 
  "info" -> "MatchLocalNames is an option for Trace and related functions \
that specifies whether symbols such as "|>, <|"label" -> "MatchQ", 
  "type" -> "keyword", "info" -> "MatchQ[expr, form] returns True if the \
pattern form matches expr, and returns False otherwise.MatchQ"|>, 
 <|"label" -> "MaterialShading", "type" -> "keyword", 
  "info" -> "MaterialShading[\"material\"] is a three-dimensional graphics \
directive specifying that surfaces that "|>, 
 <|"label" -> "MathematicalFunctionData", "type" -> "keyword", 
  "info" -> "MathematicalFunctionData[entity, property] gives data \
corresponding to property for the mathematical"|>, 
 <|"label" -> "MathieuC", "type" -> "keyword", "info" -> "MathieuC[a, q, z] \
gives the even Mathieu function with characteristic value a and \
parameter\[CapitalATilde]\202\[CapitalAHat] q. "|>, 
 <|"label" -> "MathieuCharacteristicA", "type" -> "keyword", 
  "info" -> "MathieuCharacteristicA[r, q] gives the characteristic value a  \
for even Mathieu functions with chara"|>, 
 <|"label" -> "MathieuCharacteristicB", "type" -> "keyword", 
  "info" -> "MathieuCharacteristicB[r, q] gives the characteristic value b  \
for odd Mathieu functions with charac"|>, 
 <|"label" -> "MathieuCharacteristicExponent", "type" -> "keyword", 
  "info" -> "MathieuCharacteristicExponent[a, q] gives the characteristic \
exponent r for Mathieu functions with c"|>, <|"label" -> "MathieuCPrime", 
  "type" -> "keyword", "info" -> "MathieuCPrime[a, q, z] gives the derivative \
with respect to z of the even Mathieu function with char"|>, 
 <|"label" -> "MathieuGroupM11", "type" -> "keyword", 
  "info" -> "MathieuGroupM11[] represents the sporadic simple Mathieu group M \
 .\n                                "|>, <|"label" -> "MathieuGroupM12", 
  "type" -> "keyword", "info" -> "MathieuGroupM12[] represents the sporadic \
simple Mathieu group M  .\n                                "|>, 
 <|"label" -> "MathieuGroupM22", "type" -> "keyword", 
  "info" -> "MathieuGroupM22[] represents the sporadic simple Mathieu group M \
 .\n                                "|>, <|"label" -> "MathieuGroupM23", 
  "type" -> "keyword", "info" -> "MathieuGroupM23[] represents the sporadic \
simple Mathieu group M  .\n                                "|>, 
 <|"label" -> "MathieuGroupM24", "type" -> "keyword", 
  "info" -> "MathieuGroupM24[] represents the sporadic simple Mathieu group M \
 .\n                                "|>, <|"label" -> "MathieuS", 
  "type" -> "keyword", "info" -> "MathieuS[a, q, z] gives the odd Mathieu \
function with characteristic value a and \
parameter\[CapitalATilde]\202\[CapitalAHat] q. "|>, 
 <|"label" -> "MathieuSPrime", "type" -> "keyword", 
  "info" -> "MathieuSPrime[a, q, z] gives the derivative with respect to z of \
the odd Mathieu function with chara"|>, <|"label" -> "MathMLForm", 
  "type" -> "keyword", "info" -> 
   "MathMLForm[expr] prints as a MathML form of expr. "|>, 
 <|"label" -> "Matrices", "type" -> "keyword", "info" -> "Matrices[{d , d }] \
represents the domain of matrices of dimensions d \
\[CapitalATilde]\203\[CapitalAHat]\227d .Matrices[{d , d }, dom] rep"|>, 
 <|"label" -> "MatrixExp", "type" -> "keyword", 
  "info" -> "MatrixExp[m] gives the matrix exponential of m. MatrixExp[m, v] \
gives the matrix exponential of m ap"|>, <|"label" -> "MatrixForm", 
  "type" -> "keyword", "info" -> "MatrixForm[list] prints with the elements \
of list arranged in a regular array. "|>, <|"label" -> "MatrixFunction", 
  "type" -> "keyword", "info" -> "MatrixFunction[f, m] gives the matrix \
generated by the scalar function f at the matrix argument m."|>, 
 <|"label" -> "MatrixLog", "type" -> "keyword", 
  "info" -> "MatrixLog[m] gives the matrix logarithm of a matrix m."|>, 
 <|"label" -> "MatrixNormalDistribution", "type" -> "keyword", 
  "info" -> "MatrixNormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[Sterling]   , \[CapitalATilde]\216\[CapitalAHat]\[Sterling]   ] represents \
zero mean matrix normal distribution with row covari"|>, 
 <|"label" -> "MatrixPlot", "type" -> "keyword", 
  "info" -> "MatrixPlot[m] generates a plot that gives a visual \
representation of the values of elements in a mat"|>, 
 <|"label" -> "MatrixPower", "type" -> "keyword", 
  "info" -> "                               th                                \
                                th\n"|>, 
 <|"label" -> "MatrixPropertyDistribution", "type" -> "keyword", 
  "info" -> "MatrixPropertyDistribution[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 mdist] represents \
the distribution of the matrix property expr "|>, 
 <|"label" -> "MatrixQ", "type" -> "keyword", "info" -> "MatrixQ[expr] gives \
True if expr is a list of lists or a two-dimensional SparseArray object that \
can"|>, <|"label" -> "MatrixRank", "type" -> "keyword", 
  "info" -> "MatrixRank[m] gives the rank of the matrix m. "|>, 
 <|"label" -> "MatrixTDistribution", "type" -> "keyword", 
  "info" -> "MatrixTDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[Sterling]   , \[CapitalATilde]\216\[CapitalAHat]\[Sterling]   , \
\[CapitalATilde]\216\[CapitalAHat]\275] represents zero mean matrix t \
distribution with row covariance ma"|>, <|"label" -> "Max", 
  "type" -> "keyword", "info" -> "Max[x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] yields the \
numerically largest of the x . Max[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] yields the lar"|>\
, <|"label" -> "MaxCellMeasure", "type" -> "keyword", 
  "info" -> "MaxCellMeasure is an option for DiscretizeRegion and related \
functions that specifies the maximum ce"|>, <|"label" -> "MaxColorDistance", 
  "type" -> "keyword", "info" -> "MaxColorDistance is an option to specify \
the maximum distance allowed between colors."|>, 
 <|"label" -> "MaxDate", "type" -> "keyword", "info" -> "MaxDate[{date , date \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
latest date of the date .MaxDate[interval] gives the endpoint o"|>, 
 <|"label" -> "MaxDetect", "type" -> "keyword", 
  "info" -> "MaxDetect[image] gives a binary image in which white pixels \
correspond to constant extended maxima i"|>, <|"label" -> "MaxDuration", 
  "type" -> "keyword", "info" -> "MaxDuration is an option that specifies the \
maximum duration for audio playback or capture."|>, 
 <|"label" -> "MaxExtraBandwidths", "type" -> "keyword", 
  "info" -> "MaxExtraBandwidths is an option to SmoothKernelDistribution that \
controls the behavior outside that "|>, <|"label" -> "MaxExtraConditions", 
  "type" -> "keyword", "info" -> "MaxExtraConditions is an option to Solve \
and related functions that specifies how many extra equatio"|>, 
 <|"label" -> "MaxFeatureDisplacement", "type" -> "keyword", 
  "info" -> "MaxFeatureDisplacement is an option that specifies the maximum \
displacement allowed for any feature."|>, <|"label" -> "MaxFeatures", 
  "type" -> "keyword", "info" -> "MaxFeatures is an option that specifies the \
maximum number of features that will be returned from fe"|>, 
 <|"label" -> "MaximalBy", "type" -> "keyword", 
  "info" -> "MaximalBy[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] returns a \
list of the e  for which the value of f[e ] is maximal.MaximalBy"|>, 
 <|"label" -> "Maximize", "type" -> "keyword", "info" -> "Maximize[f, x] \
maximizes f exactly with respect to x.Maximize[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] maximizes f \
exactly with"|>, <|"label" -> "MaxItems", "type" -> "keyword", 
  "info" -> "MaxItems is an option that specifies the maximum number of items \
to be used or shown."|>, <|"label" -> "MaxIterations", "type" -> "keyword", 
  "info" -> "MaxIterations is an option that specifies the maximum number of \
iterations that should be tried in v"|>, <|"label" -> "MaxLimit", 
  "type" -> "keyword", "info" -> "                 *                          \
                              *           *             "|>, 
 <|"label" -> "MaxMemoryUsed", "type" -> "keyword", 
  "info" -> "MaxMemoryUsed[] gives the maximum number of bytes used to store \
all data for the current Wolfram Sys"|>, <|"label" -> "MaxMixtureKernels", 
  "type" -> "keyword", "info" -> "MaxMixtureKernels is an option for \
SmoothKernelDistribution and related functions that specifies the"|>, 
 <|"label" -> "MaxOverlapFraction", "type" -> "keyword", 
  "info" -> "MaxOverlapFraction is an option that specifies the maximum \
acceptable overlap between different iden"|>, <|"label" -> "MaxPlotPoints", 
  "type" -> "keyword", "info" -> "MaxPlotPoints is an option for plotting \
functions like ArrayPlot and ListPlot3D that specifies the m"|>, 
 <|"label" -> "MaxPoints", "type" -> "keyword", 
  "info" -> "MaxPoints is an option for NIntegrate specifying the maximum \
total number of times to sample the int"|>, <|"label" -> "MaxRecursion", 
  "type" -> "keyword", "info" -> "MaxRecursion is an option for functions \
like NIntegrate and Plot that specifies how many recursive s"|>, 
 <|"label" -> "MaxStableDistribution", "type" -> "keyword", 
  "info" -> "MaxStableDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203, \
\[CapitalATilde]\216\[CapitalAHat]\276] represents a generalized maximum \
extreme value distribution with loca"|>, <|"label" -> "MaxStepFraction", 
  "type" -> "keyword", "info" -> "MaxStepFraction is an option to functions \
like NDSolve that specifies the maximum fraction of the to"|>, 
 <|"label" -> "MaxSteps", "type" -> "keyword", "info" -> "MaxSteps is an \
option to functions like NDSolve that specifies the maximum number of steps \
to take i"|>, <|"label" -> "MaxStepSize", "type" -> "keyword", 
  "info" -> "MaxStepSize is an option to functions like NDSolve that \
specifies the maximum size of a single step "|>, 
 <|"label" -> "MaxTrainingRounds", "type" -> "keyword", 
  "info" -> "MaxTrainingRounds is an option for NetTrain and related \
functions that specifies the maximum number "|>, 
 <|"label" -> "MaxValue", "type" -> "keyword", "info" -> "MaxValue[f, x] \
gives the maximum value of f with respect to x.MaxValue[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
maxim"|>, <|"label" -> "MaxwellDistribution", "type" -> "keyword", 
  "info" -> "MaxwellDistribution[\[CapitalATilde]\217\[CapitalAHat]\203] \
represents a Maxwell distribution with scale parameter \
\[CapitalATilde]\217\[CapitalAHat]\203."|>, <|"label" -> "MaxWordGap", 
  "type" -> "keyword", "info" -> "MaxWordGap is an option for \
SearchAdjustment that specifies the number of words that can occur betwe"|>, 
 <|"label" -> "McLaughlinGroupMcL", "type" -> "keyword", 
  "info" -> 
   "McLaughlinGroupMcL[] represents the sporadic simple McLaughlin group \
McL."|>, <|"label" -> "Mean", "type" -> "keyword", 
  "info" -> "Mean[list] gives the statistical mean of the elements in list. \
Mean[dist] gives the mean of the dist"|>, 
 <|"label" -> "MeanAbsoluteLossLayer", "type" -> "keyword", 
  "info" -> "MeanAbsoluteLossLayer[] represents a loss layer that computes \
the mean absolute loss between the \"In"|>, <|"label" -> "MeanAround", 
  "type" -> "keyword", "info" -> "MeanAround[{x , x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an Around \
object describing the mean of the x  and its uncertainty"|>, 
 <|"label" -> "MeanClusteringCoefficient", "type" -> "keyword", 
  "info" -> "MeanClusteringCoefficient[g] gives the mean clustering \
coefficient of the graph g.MeanClusteringCoef"|>, 
 <|"label" -> "MeanDegreeConnectivity", "type" -> "keyword", 
  "info" -> "MeanDegreeConnectivity[g] gives a list of k-mean degree \
connectivity for the graph g for successive "|>, 
 <|"label" -> "MeanDeviation", "type" -> "keyword", 
  "info" -> "MeanDeviation[list] gives the mean absolute deviation from the \
mean of the elements in list."|>, <|"label" -> "MeanGraphDistance", 
  "type" -> "keyword", "info" -> "MeanGraphDistance[g] gives the mean \
distance between all pairs of vertices in the graph g.MeanGraphD"|>, 
 <|"label" -> "MeanNeighborDegree", "type" -> "keyword", 
  "info" -> "MeanNeighborDegree[g] gives a list of mean neighbor degrees of \
vertices for the graph g.MeanNeighbor"|>, <|"label" -> "MeanPointDensity", 
  "type" -> "keyword", "info" -> "MeanPointDensity[pdata] estimates the mean \
point density \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] from point \
data pdata in the observation "|>, <|"label" -> "MeanShift", 
  "type" -> "keyword", "info" -> "MeanShift[list, d] replaces each element in \
list by the mean of the values of all elements that diff"|>, 
 <|"label" -> "MeanSquaredLossLayer", "type" -> "keyword", 
  "info" -> "MeanSquaredLossLayer[] represents a loss layer that computes the \
mean squared loss between its \"Inpu"|>, <|"label" -> "Median", 
  "type" -> "keyword", "info" -> "Median[list] gives the median of the \
elements in list. Median[dist] gives the median of the distribu"|>, 
 <|"label" -> "MedianDeviation", "type" -> "keyword", 
  "info" -> "MedianDeviation[list] gives the median absolute deviation from \
the median of the elements in list."|>, <|"label" -> "MedicalTestData", 
  "type" -> "keyword", "info" -> "MedicalTestData[entity, property] gives the \
value of the specified property for the medical test ent"|>, 
 <|"label" -> "Medium", "type" -> "keyword", "info" -> "Medium is a style or \
option setting that specifies that objects should be medium sized."|>, 
 <|"label" -> "MeijerGReduce", "type" -> "keyword", 
  "info" -> "MeijerGReduce[expr, x] attempts to reduce expr to a single \
MeijerG object as a function of x."|>, <|"label" -> "MeixnerDistribution", 
  "type" -> "keyword", "info" -> "MeixnerDistribution[a, b, m, d] represents \
a Meixner distribution with location parameter m, scale p"|>, 
 <|"label" -> "MellinConvolve", "type" -> "keyword", 
  "info" -> "MellinConvolve[f, g, x, y] gives the Mellin convolution with \
respect to x of the expressions f and g"|>, <|"label" -> "MellinTransform", 
  "type" -> "keyword", "info" -> "MellinTransform[expr, x, s] gives the \
Mellin transform of expr.MellinTransform[expr, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {s"|>, 
 <|"label" -> "MemberQ", "type" -> "keyword", "info" -> "MemberQ[list, form] \
returns True if an element of list matches form, and False otherwise. \
MemberQ[li"|>, <|"label" -> "MemoryAvailable", "type" -> "keyword", 
  "info" -> "MemoryAvailable[] gives the estimated number of bytes readily \
available for storing additional data "|>, <|"label" -> "MemoryConstrained", 
  "type" -> "keyword", "info" -> "MemoryConstrained[expr, b] evaluates expr, \
stopping if more than b bytes of memory are requested. Me"|>, 
 <|"label" -> "MemoryConstraint", "type" -> "keyword", 
  "info" -> "MemoryConstraint is an option for TestReport and \
VerificationTest that specifies how much memory (in"|>, 
 <|"label" -> "MemoryInUse", "type" -> "keyword", 
  "info" -> "MemoryInUse[] gives the number of bytes currently being used to \
store all data in the current Wolfra"|>, <|"label" -> "MengerMesh", 
  "type" -> "keyword", "info" -> "                                            \
         th                                             "|>, 
 <|"label" -> "Merge", "type" -> "keyword", "info" -> "Merge[{assoc , assoc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] merges the \
associations assoc , using the function f to combine values"|>, 
 <|"label" -> "MergingFunction", "type" -> "keyword", 
  "info" -> "MergingFunction is an option for functions such as \
PersistentSymbol that specifies a function to app"|>, 
 <|"label" -> "MersennePrimeExponent", "type" -> "keyword", 
  "info" -> "                                     \
th\nMersennePrimeExponent[n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    Mersenne prime \
expon"|>, <|"label" -> "MersennePrimeExponentQ", "type" -> "keyword", 
  "info" -> "MersennePrimeExponentQ[n] returns True if n is a Mersenne prime \
exponent, and False otherwise."|>, <|"label" -> "Mesh", "type" -> "keyword", 
  "info" -> "Mesh is an option for Plot3D, DensityPlot, and other plotting \
functions that specifies what mesh sho"|>, <|"label" -> "MeshCellCentroid", 
  "type" -> "keyword", "info" -> "MeshCellCentroid is an annotation of \
MeshRegion and BoundaryMeshRegion objects that gives the centro"|>, 
 <|"label" -> "MeshCellHighlight", "type" -> "keyword", 
  "info" -> "MeshCellHighlight is an option and annotation of MeshRegion, \
BoundaryMeshRegion, and related functio"|>, <|"label" -> "MeshCellLabel", 
  "type" -> "keyword", "info" -> "MeshCellLabel is an option to MeshRegion, \
BoundaryMeshRegion and related functions that specifies la"|>, 
 <|"label" -> "MeshCellMarker", "type" -> "keyword", 
  "info" -> "MeshCellMarker is an option to MeshRegion and BoundaryMeshRegion \
that specifies integer markers to a"|>, <|"label" -> "MeshCellMeasure", 
  "type" -> "keyword", "info" -> "MeshCellMeasure is an annotation of \
MeshRegion and BoundaryMeshRegion objects that gives the measure"|>, 
 <|"label" -> "MeshCellQuality", "type" -> "keyword", 
  "info" -> "MeshCellQuality is an annotation of MeshRegion and \
BoundaryMeshRegion objects that gives a quality m"|>, 
 <|"label" -> "MeshCellShapeFunction", "type" -> "keyword", 
  "info" -> "MeshCellShapeFunction is an option and annotation for \
MeshRegion, BoundaryMeshRegion, and related fu"|>, 
 <|"label" -> "MeshCellStyle", "type" -> "keyword", 
  "info" -> "MeshCellStyle is an option and annotation of MeshRegion, \
BoundaryMeshRegion, and related functions t"|>, 
 <|"label" -> "MeshConnectivityGraph", "type" -> "keyword", 
  "info" -> "MeshConnectivityGraph[mr, 0] gives a graph of points connected \
by lines.MeshConnectivityGraph[mr, d]"|>, <|"label" -> "MeshCoordinates", 
  "type" -> "keyword", "info" -> "MeshCoordinates[mreg] gives a list of \
coordinates in the mesh region mreg."|>, <|"label" -> "MeshFunctions", 
  "type" -> "keyword", "info" -> "MeshFunctions is an option for plotting \
functions that specifies functions to use to determine the p"|>, 
 <|"label" -> "MeshRefinementFunction", "type" -> "keyword", 
  "info" -> "MeshRefinementFunction is an option for DiscretizeRegion and \
related functions that specifies a func"|>, <|"label" -> "MeshRegionQ", 
  "type" -> "keyword", "info" -> "MeshRegionQ[reg] yields True if the region \
reg is a valid MeshRegion object and False otherwise."|>, 
 <|"label" -> "MeshShading", "type" -> "keyword", 
  "info" -> "MeshShading is an option for plotting functions that gives lists \
of colors to use for regions betwee"|>, <|"label" -> "MeshStyle", 
  "type" -> "keyword", "info" -> "MeshStyle is an option for Plot3D, \
DensityPlot, and other plotting functions that specifies the styl"|>, 
 <|"label" -> "Message", "type" -> "keyword", "info" -> "Message[symbol :: \
tag] prints the message symbol :: tag unless it has been switched off. \
Message[sym"|>, <|"label" -> "MessageDialog", "type" -> "keyword", 
  "info" -> "MessageDialog[expr] puts up a standard message dialog that \
displays expr together with an OK button."|>, <|"label" -> "MessageName", 
  "type" -> "keyword", "info" -> "symbol :: tag is a name for a message. "|>, 
 <|"label" -> "MessagePacket", "type" -> "keyword", 
  "info" -> "MessagePacket[symbol, string] is a WSTP packet containing a \
Wolfram Language message identifier of t"|>, <|"label" -> "Messages", 
  "type" -> "keyword", "info" -> 
   "Messages[symbol] gives all the messages assigned to a particular symbol. \
"|>, <|"label" -> "MetaCharacters", "type" -> "keyword", 
  "info" -> "MetaCharacters is an option to StringPosition. With \
MetaCharacters -> None, no strings have special "|>, 
 <|"label" -> "MetaInformation", "type" -> "keyword", 
  "info" -> "MetaInformation is an option giving meta-information for Image, \
CloudObject, and other objects."|>, <|"label" -> "MeteorShowerData", 
  "type" -> "keyword", "info" -> "MeteorShowerData[entity, property] gives \
the value of the specified property for the meteor shower e"|>, 
 <|"label" -> "Method", "type" -> "keyword", "info" -> "Method is an option \
for various algorithm-intensive functions that specifies what internal \
methods t"|>, <|"label" -> "MexicanHatWavelet", "type" -> "keyword", 
  "info" -> "MexicanHatWavelet[] represents the Mexican hat wavelet of width \
1.MexicanHatWavelet[\[CapitalATilde]\217\[CapitalAHat]\203] represents th"|>, 
 <|"label" -> "MeyerWavelet", "type" -> "keyword", 
  "info" -> "MeyerWavelet[] represents the Meyer wavelet of order \
3.MeyerWavelet[n] represents the Meyer wavelet "|>, 
 <|"label" -> "Midpoint", "type" -> "keyword", "info" -> "Midpoint[{p , p }] \
gives the midpoint of the line segment connecting the points p  and p \
.Midpoint[L"|>, <|"label" -> "MIMETypeToFormatList", "type" -> "keyword", 
  "info" -> "MIMETypeToFormatList[] returns lists of file formats \
corresponding to all registered MIME types.MIME"|>, 
 <|"label" -> "Min", "type" -> "keyword", "info" -> "Min[x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] yields the \
numerically smallest of the x . Min[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] yields the sm"|>\
, <|"label" -> "MinColorDistance", "type" -> "keyword", 
  "info" -> "MinColorDistance is an option for DominantColors that specifies \
the minimum distance between returne"|>, <|"label" -> "MinDate", 
  "type" -> "keyword", "info" -> "MinDate[{date , date , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
earliest date of the date .MinDate[interval] gives the beginnin"|>, 
 <|"label" -> "MinDetect", "type" -> "keyword", 
  "info" -> "MinDetect[image] gives a binary image in which white pixels \
correspond to constant extended minima i"|>, <|"label" -> "MineralData", 
  "type" -> "keyword", "info" -> "MineralData[entity, property] gives the \
value of the specified property for the mineral entity.Miner"|>, 
 <|"label" -> "MinimalBy", "type" -> "keyword", 
  "info" -> "MinimalBy[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, f] returns a \
list of the e  for which the value of f[e ] is minimal.MinimalBy"|>, 
 <|"label" -> "MinimalPolynomial", "type" -> "keyword", 
  "info" -> "MinimalPolynomial[s, x] gives the minimal polynomial in x for \
which the algebraic number s is a root"|>, 
 <|"label" -> "MinimalStateSpaceModel", "type" -> "keyword", 
  "info" -> "MinimalStateSpaceModel[sys] gives the minimal state-space model \
of the state-space model sys.Minimal"|>, <|"label" -> "Minimize", 
  "type" -> "keyword", "info" -> "Minimize[f, x] minimizes f exactly with \
respect to x.Minimize[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] minimizes f \
exactly with"|>, <|"label" -> "MinimumTimeIncrement", "type" -> "keyword", 
  "info" -> "MinimumTimeIncrement[tseries] gives the minimum time increment \
in the time series tseries."|>, <|"label" -> "MinIntervalSize", 
  "type" -> "keyword", "info" -> "MinIntervalSize is an option for \
IntervalSlider that specifies the minimum size of the interval duri"|>, 
 <|"label" -> "MinkowskiQuestionMark", "type" -> "keyword", 
  "info" -> 
   "MinkowskiQuestionMark[x] gives Minkowski's question mark function ? (x)."\
|>, <|"label" -> "MinLimit", "type" -> "keyword", 
  "info" -> "                 *                                               \
         *           *             "|>, <|"label" -> "MinMax", 
  "type" -> "keyword", "info" -> "MinMax[list] gives the list {Min[list], \
Max[list]}.MinMax[list, \[CapitalATilde]\216b4] gives {Min[list] - \
\[CapitalATilde]\216b4, Max[list] +"|>, <|"label" -> "MinorPlanetData", 
  "type" -> "keyword", "info" -> "MinorPlanetData[entity, property] gives the \
value of the specified property for the minor planet ent"|>, 
 <|"label" -> "Minors", "type" -> "keyword", "info" -> "                      \
                                              th\nMinors[m] gives the minors \
of"|>, <|"label" -> "MinPointSeparation", "type" -> "keyword", 
  "info" -> "MinPointSeparation is an option for GeoGraphValuePlot that \
determines when to merge nearby vertices "|>, <|"label" -> "MinRecursion", 
  "type" -> "keyword", "info" -> "MinRecursion is an option for NIntegrate \
and other numerical functions that use a recursive algorith"|>, 
 <|"label" -> "MinStableDistribution", "type" -> "keyword", 
  "info" -> "MinStableDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203, \
\[CapitalATilde]\216\[CapitalAHat]\276] represents a generalized minimum \
extreme value distribution with loca"|>, <|"label" -> "Minus", 
  "type" -> "keyword", "info" -> "-x is the arithmetic negation of x. "|>, 
 <|"label" -> "MinusPlus", "type" -> "keyword", 
  "info" -> "MinusPlus[x] displays as \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\223 x.MinusPlus[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\223 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\223 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n"|>, 
 <|"label" -> "MinValue", "type" -> "keyword", "info" -> "MinValue[f, x] \
gives the minimum value of f with respect to x.MinValue[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
exact"|>, <|"label" -> "Missing", "type" -> "keyword", 
  "info" -> "Missing[] represents data that is missing.Missing[\"reason\"] \
specifies a reason for the data's being "|>, <|"label" -> "MissingBehavior", 
  "type" -> "keyword", "info" -> "MissingBehavior is an option to Query and \
related functions that specifies how expressions with head"|>, 
 <|"label" -> "MissingDataMethod", "type" -> "keyword", 
  "info" -> "MissingDataMethod is an option to TemporalData and other \
functions that controls how to process miss"|>, 
 <|"label" -> "MissingDataRules", "type" -> "keyword", 
  "info" -> "MissingDataRules is an option for SemanticImport and related \
functions that specifies what should be"|>, <|"label" -> "MissingQ", 
  "type" -> "keyword", "info" -> 
   "MissingQ[expr] gives True if expr has head Missing."|>, 
 <|"label" -> "MissingString", "type" -> "keyword", 
  "info" -> "MissingString is an option for TextString and related functions \
that indicates how an expression wit"|>, <|"label" -> "MissingStyle", 
  "type" -> "keyword", "info" -> "MissingStyle is an option for \
GeoRegionValuePlot that specifies how locations with missing data shou"|>, 
 <|"label" -> "MissingValuePattern", "type" -> "keyword", 
  "info" -> "MissingValuePattern is an option for SynthesizeMissingValues to \
specify which elements are considere"|>, 
 <|"label" -> "MissingValueSynthesis", "type" -> "keyword", 
  "info" -> "MissingValueSynthesis is an option for functions such as \
Classify that specifies how missing values "|>, 
 <|"label" -> "MittagLefflerE", "type" -> "keyword", 
  "info" -> "MittagLefflerE[\[CapitalATilde]\216\\[PlusMinus], z] gives the \
Mittag\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Leffler \
function E (z).MittagLefflerE[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, z] gives the gener"|>, 
 <|"label" -> "MixedFractionParts", "type" -> "keyword", 
  "info" -> "MixedFractionParts[expr] gives the list {IntegerPart[expr], \
FractionalPart[expr]}."|>, <|"label" -> "MixedGraphQ", "type" -> "keyword", 
  "info" -> "MixedGraphQ[g] yields True if the graph g is a mixed graph and \
False otherwise. "|>, <|"label" -> "MixedMagnitude", "type" -> "keyword", 
  "info" -> "MixedMagnitude[{val , val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, val }] \
represents a mixed-magnitude expression consisting of values v"|>, 
 <|"label" -> "MixedRadix", "type" -> "keyword", 
  "info" -> "MixedRadix[{b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }] represents \
the list of bases of a numerical system in which different digits"|>, 
 <|"label" -> "MixedRadixQuantity", "type" -> "keyword", 
  "info" -> "MixedRadixQuantity[{value , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, value }, {unit , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, unit }] yields a \
single Quantity expression repre"|>, <|"label" -> "MixedUnit", 
  "type" -> "keyword", "info" -> "MixedUnit[{unit , unit , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, unit }] \
represents a mixed-unit expression consisting of units unit  thr"|>, 
 <|"label" -> "MixtureDistribution", "type" -> "keyword", 
  "info" -> "MixtureDistribution[{w , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, w }, {dist , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, dist }] \
represents a mixture distribution whose CDF is g"|>, 
 <|"label" -> "Mod", "type" -> "keyword", "info" -> "Mod[m, n] gives the \
remainder on division of m by n. Mod[m, n, d] uses an offset d. \n"|>, 
 <|"label" -> "Modal", "type" -> "keyword", "info" -> "Modal is an option to \
functions such as CreateDialog that specifies whether the dialog that is \
creat"|>, <|"label" -> "Mode", "type" -> "keyword", 
  "info" -> "Mode is an option to Eliminate and related functions that \
specifies in what sense the equations are "|>, 
 <|"label" -> "Modular", "type" -> "keyword", "info" -> "Modular is a setting \
for the option Mode in Solve and related functions, which specifies that \
equati"|>, <|"label" -> "ModularInverse", "type" -> "keyword", 
  "info" -> 
   "ModularInverse[k, n] gives the modular inverse of k modulo n."|>, 
 <|"label" -> "ModularLambda", "type" -> "keyword", 
  "info" -> "ModularLambda[\[CapitalATilde]\217\[CapitalAHat]\204] gives the \
modular lambda elliptic function \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet](\[CapitalATilde]\217\
\[CapitalAHat]\204). "|>, <|"label" -> "Module", "type" -> "keyword", 
  "info" -> "Module[{x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, expr] specifies \
that occurrences of the symbols x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 in expr should be \
treated "|>, <|"label" -> "Modulus", "type" -> "keyword", 
  "info" -> "Modulus \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] n is an option \
that can be given in certain algebraic functions to specify that integers s"|>\
, <|"label" -> "MoebiusMu", "type" -> "keyword", 
  "info" -> "MoebiusMu[n] gives the M\[CapitalATilde]\203\\[Paragraph]bius \
function \[CapitalATilde]\216\[CapitalAHat]\274(n). "|>, 
 <|"label" -> "MoleculeDraw", "type" -> "keyword", 
  "info" -> "MoleculeDraw[] displays a window with interactive tools for \
drawing a Molecule, and returns the resu"|>, <|"label" -> "MoleculeMatchQ", 
  "type" -> "keyword", "info" -> "MoleculeMatchQ[mol, patt] returns True if \
the Molecule matches the given pattern.MoleculeMatchQ[patt"|>, 
 <|"label" -> "MoleculeProperty", "type" -> "keyword", 
  "info" -> "MoleculeProperty[pname] represents a property identified by \
pname for use in MoleculeValue.MoleculeP"|>, <|"label" -> "MoleculeQ", 
  "type" -> "keyword", "info" -> "MoleculeQ[mol] returns True if mol is a \
valid Molecule expression, and False otherwise."|>, 
 <|"label" -> "MoleculeSubstructureCount", "type" -> "keyword", 
  "info" -> "MoleculeSubstructureCount[mol, patt] gives a count of the number \
of times patt appears as a substruc"|>, <|"label" -> "Moment", 
  "type" -> "keyword", "info" -> "                            th              \
                                                     th "|>, 
 <|"label" -> "MomentConvert", "type" -> "keyword", 
  "info" -> "MomentConvert[mexpr, form] converts the moment expression mexpr \
to the specified form. "|>, <|"label" -> "MomentEvaluate", 
  "type" -> "keyword", "info" -> "MomentEvaluate[mexpr, dist] evaluates \
formal moments in the moment expression mexpr on the distribut"|>, 
 <|"label" -> "MomentGeneratingFunction", "type" -> "keyword", 
  "info" -> "MomentGeneratingFunction[dist, t] gives the moment-generating \
function for the distribution dist as "|>, <|"label" -> "MomentOfInertia", 
  "type" -> "keyword", "info" -> "MomentOfInertia[reg, pt, v] computes the \
moment of inertia for the region reg rotating around an axi"|>, 
 <|"label" -> "Monday", "type" -> "keyword", 
  "info" -> "Monday is a day of the week."|>, <|"label" -> "MonomialList", 
  "type" -> "keyword", "info" -> "MonomialList[poly] gives the list of all \
monomials in the polynomial poly.MonomialList[poly, {x , x "|>, 
 <|"label" -> "MonsterGroupM", "type" -> "keyword", 
  "info" -> 
   "MonsterGroupM[] represents the sporadic simple monster group M."|>, 
 <|"label" -> "MoonPhase", "type" -> "keyword", 
  "info" -> "MoonPhase[] gives moon phase fraction of illumination for the \
current date.MoonPhase[datespec] gives"|>, <|"label" -> "MoonPosition", 
  "type" -> "keyword", "info" -> "MoonPosition[] gives the position of the \
Moon for the current date and location.MoonPosition[datespe"|>, 
 <|"label" -> "MorletWavelet", "type" -> "keyword", 
  "info" -> "MorletWavelet[] represents a Morlet wavelet. "|>, 
 <|"label" -> "MorphologicalBinarize", "type" -> "keyword", 
  "info" -> "MorphologicalBinarize[image, {t , t }] creates a binary image \
from image by replacing all values abo"|>, 
 <|"label" -> "MorphologicalBranchPoints", "type" -> "keyword", 
  "info" -> "MorphologicalBranchPoints[image] gives a version of a binary \
image image in which white pixels repre"|>, 
 <|"label" -> "MorphologicalComponents", "type" -> "keyword", 
  "info" -> "MorphologicalComponents[image] gives an array in which each \
pixel of image is replaced by an integer"|>, 
 <|"label" -> "MorphologicalEulerNumber", "type" -> "keyword", 
  "info" -> "MorphologicalEulerNumber[image] computes the morphological Euler \
number of regions in a binary image"|>, <|"label" -> "MorphologicalGraph", 
  "type" -> "keyword", "info" -> "MorphologicalGraph[image] gives a graph \
object that represents the connectivity of the morphological"|>, 
 <|"label" -> "MorphologicalPerimeter", "type" -> "keyword", 
  "info" -> "MorphologicalPerimeter[image] picks out the morphological \
perimeter of regions of foreground in imag"|>, 
 <|"label" -> "MorphologicalTransform", "type" -> "keyword", 
  "info" -> "MorphologicalTransform[image, f] applies the function f to the \
3\[CapitalATilde]\203\[CapitalAHat]\2273 neighborhood of each pixel in a b"|>\
, <|"label" -> "MortalityData", "type" -> "keyword", 
  "info" -> "MortalityData[spec] gives the values of all properties for the \
specified demographic.MortalityData[s"|>, <|"label" -> "Most", 
  "type" -> "keyword", "info" -> 
   "Most[expr] gives expr with the last element removed. "|>, 
 <|"label" -> "MountainData", "type" -> "keyword", 
  "info" -> "MountainData[entity, property] gives the value of the specified \
property for the mountain entity.Mou"|>, <|"label" -> "MouseAnnotation", 
  "type" -> "keyword", "info" -> "MouseAnnotation[] gives any mouse \
annotation associated with the expression at the current mouse pos"|>, 
 <|"label" -> "MouseAppearance", "type" -> "keyword", 
  "info" -> "MouseAppearance[expr, graphic] changes the mouse cursor to \
appear as graphic when the mouse pointer "|>, <|"label" -> "MouseButtons", 
  "type" -> "keyword", "info" -> 
   "MouseButtons[] gives a list of the mouse buttons currently being \
pressed."|>, <|"label" -> "Mouseover", "type" -> "keyword", 
  "info" -> "Mouseover[expr, over] represents an object that displays as over \
when the mouse pointer is over it, "|>, <|"label" -> "MovieData", 
  "type" -> "keyword", "info" -> "MovieData[entity, property] gives the value \
of the specified property for the movie entity.MovieData"|>, 
 <|"label" -> "MovingAverage", "type" -> "keyword", 
  "info" -> "MovingAverage[list, r] gives the moving average of list, \
computed by averaging runs of r elements.Mo"|>, 
 <|"label" -> "MovingMap", "type" -> "keyword", 
  "info" -> "MovingMap[f, data, w] applies f to size w windows in the \
specified data.MovingMap[f, data, wspec] us"|>, 
 <|"label" -> "MovingMedian", "type" -> "keyword", 
  "info" -> "MovingMedian[list, r] gives the moving median of list, computed \
using spans of r elements."|>, <|"label" -> "MoyalDistribution", 
  "type" -> "keyword", "info" -> "MoyalDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\274, \[CapitalATilde]\217\[CapitalAHat]\203] represents a \
Moyal distribution with location parameter \
\[CapitalATilde]\216\[CapitalAHat]\274 and scale paramete"|>, 
 <|"label" -> "MultiaxisArrangement", "type" -> "keyword", 
  "info" -> "MultiaxisArrangement is an option to plotting functions that \
specifies how multiple axes are arrange"|>, <|"label" -> "Multicolumn", 
  "type" -> "keyword", "info" -> "Multicolumn[list, cols] is an object that \
formats with the elements of list arranged in a grid with "|>, 
 <|"label" -> "MultiedgeStyle", "type" -> "keyword", 
  "info" -> "MultiedgeStyle is an option for GraphPlot and related functions \
that specifies how to draw multiple "|>, <|"label" -> "MultigraphQ", 
  "type" -> "keyword", "info" -> "MultigraphQ[g] yields True if the graph g \
is a multigraph and False otherwise."|>, <|"label" -> "MultilaunchWarning", 
  "type" -> "keyword", "info" -> "MultilaunchWarning is a global option that \
specifies whether a warning is given when you try to modi"|>, 
 <|"label" -> "Multinomial", "type" -> "keyword", 
  "info" -> "Multinomial[n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
multinomial coefficient (n  + n  + \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246) !/(n  ! n  ! \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246). \n           "|>\
, <|"label" -> "MultinomialDistribution", "type" -> "keyword", 
  "info" -> "MultinomialDistribution[n, {p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] represents \
a multinomial distribution with n trials and "|>, 
 <|"label" -> "MultinormalDistribution", "type" -> "keyword", 
  "info" -> "MultinormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\216\[CapitalAHat]\[Sterling]] represents a multivariate \
normal (Gaussian) distribution with mean vec"|>, 
 <|"label" -> "Multiplicity", "type" -> "keyword", 
  "info" -> "Multiplicity is an option to Roots. Multiplicity -> n specifies \
that the multiplicity of each of the"|>, <|"label" -> "MultiplySides", 
  "type" -> "keyword", "info" -> "MultiplySides[rel, x] multiplies each side \
of the equation or inequality rel by x.MultiplySides[rel "|>, 
 <|"label" -> "Multiselection", "type" -> "keyword", 
  "info" -> "Multiselection is an option to ListPicker that specifies whether \
multiple values may be selected."|>, 
 <|"label" -> "MultivariateHypergeometricDistribution", "type" -> "keyword", 
  "info" -> "MultivariateHypergeometricDistribution[n, {m , m , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, m }] represents \
a multivariate hypergeometric "|>, 
 <|"label" -> "MultivariatePoissonDistribution", "type" -> "keyword", 
  "info" -> "MultivariatePoissonDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\274 , {\[CapitalATilde]\216\[CapitalAHat]\274 , \
\[CapitalATilde]\216\[CapitalAHat]\274 , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
multivariate Poisson distribution with"|>, 
 <|"label" -> "MultivariateTDistribution", "type" -> "keyword", 
  "info" -> "MultivariateTDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[Sterling], \[CapitalATilde]\216\[CapitalAHat]\275] represents the \
multivariate Student t distribution with scale matrix"|>, 
 <|"label" -> "N", "type" -> "keyword", "info" -> "N[expr] gives the \
numerical value of expr. N[expr, n] attempts to give a result with \
n\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220digit precisi"|>, 
 <|"label" -> "NakagamiDistribution", "type" -> "keyword", 
  "info" -> "NakagamiDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\211] represents a Nakagami distribution \
with shape parameter \[CapitalATilde]\216\[CapitalAHat]\274 and spread para"|>\
, <|"label" -> "NameQ", "type" -> "keyword", "info" -> "NameQ[\"string\"] \
yields True if there are any symbols whose names match the string pattern \
given, and"|>, <|"label" -> "Names", "type" -> "keyword", 
  "info" -> "Names[\"string\"] gives a list of the names of symbols that \
match the string. Names[patt] gives a list"|>, 
 <|"label" -> "Nand", "type" -> "keyword", "info" -> "Nand[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is the logical \
NAND function. It evaluates its arguments in order, giving True immed"|>, 
 <|"label" -> "NArgMax", "type" -> "keyword", "info" -> "NArgMax[f, x] gives \
a position x    at which f is numerically maximized.NArgMax[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives "|>, 
 <|"label" -> "NArgMin", "type" -> "keyword", "info" -> "NArgMin[f, x] gives \
a position x    at which f is numerically minimized.NArgMin[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives "|>, 
 <|"label" -> "NBernoulliB", "type" -> "keyword", 
  "info" -> "                                                  \
th\nNBernoulliB[n] gives the numerical value of the"|>, 
 <|"label" -> "NBodySimulation", "type" -> "keyword", 
  "info" -> "NBodySimulation[law, {state , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, state }, t] \
generates a simulation of the motion of a system of n b"|>, 
 <|"label" -> "NBodySimulationData", "type" -> "keyword", 
  "info" -> "NBodySimulationData[data\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents the result of an n-body simulation."|>, 
 <|"label" -> "NCache", "type" -> "keyword", "info" -> "NCache[x, xn] \
represents a numeric cache object for a quantity with exact value x and \
approximate nu"|>, <|"label" -> "NDEigensystem", "type" -> "keyword", 
  "info" -> "NDEigensystem[\[CapitalATilde]\[Cent]\[CapitalAHat]\204\
\[CapitalAHat]\222[u[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]], u, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\216\[CapitalAHat]\[Copyright], n] gives the n smallest \
magnitude eigenvalues and eig"|>, <|"label" -> "NDEigenvalues", 
  "type" -> "keyword", "info" -> "NDEigenvalues[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\204\[CapitalAHat]\222[u[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]], u, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\216\[CapitalAHat]\[Copyright], n] gives the n smallest \
magnitude eigenvalues for the"|>, <|"label" -> "NDSolve", 
  "type" -> "keyword", "info" -> "NDSolve[eqns, u, {x, x   , x   }] finds a \
numerical solution to the ordinary differential equations "|>, 
 <|"label" -> "NDSolveValue", "type" -> "keyword", 
  "info" -> "NDSolveValue[eqns, expr, {x, x   , x   }] gives the value of \
expr with functions determined by a num"|>, <|"label" -> "Nearest", 
  "type" -> "keyword", "info" -> "Nearest[{elem , elem , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] gives the \
list of elem  to which x is nearest. Nearest[{elem  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] v , el"|>, 
 <|"label" -> "NearestFunction", "type" -> "keyword", 
  "info" -> "NearestFunction[data] represents a function whose values give \
the elements closest to an element tha"|>, <|"label" -> "NearestNeighborG", 
  "type" -> "keyword", "info" -> "NearestNeighborG[pdata, r] estimates the \
nearest neighbor function G(r) at radius r in the point dat"|>, 
 <|"label" -> "NearestNeighborGraph", "type" -> "keyword", 
  "info" -> "NearestNeighborGraph[{elem , elem , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a graph \
with vertices elem , elem , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 and edges connec"\
|>, <|"label" -> "NearestTo", "type" -> "keyword", 
  "info" -> "NearestTo[x] is an operator form that yields Nearest[elems, x] \
when applied to a list elems.NearestT"|>, <|"label" -> "NebulaData", 
  "type" -> "keyword", "info" -> "NebulaData[entity, property] gives the \
value of the specified property for the nebula entity.NebulaD"|>, 
 <|"label" -> "NeedlemanWunschSimilarity", "type" -> "keyword", 
  "info" -> "NeedlemanWunschSimilarity[u, v] gives a number representing the \
Needleman\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Wunsch \
similarity between "|>, <|"label" -> "Needs", "type" -> "keyword", 
  "info" -> "Needs[\"context`\"] loads an appropriate file if the specified \
context is not already in ECPackages. Ne"|>, <|"label" -> "Negative", 
  "type" -> "keyword", "info" -> 
   "Negative[x] gives True if x is a negative number. "|>, 
 <|"label" -> "NegativeBinomialDistribution", "type" -> "keyword", 
  "info" -> "NegativeBinomialDistribution[n, p] represents a negative \
binomial distribution with parameters n and"|>, 
 <|"label" -> "NegativeDefiniteMatrixQ", "type" -> "keyword", 
  "info" -> "NegativeDefiniteMatrixQ[m] gives True if m is explicitly \
negative definite, and False otherwise."|>, <|"label" -> "NegativeIntegers", 
  "type" -> "keyword", "info" -> "NegativeIntegers represents the domain of \
strictly negative integers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 NegativeIntegers. \
"|>, <|"label" -> "NegativelyOrientedPoints", "type" -> "keyword", 
  "info" -> "NegativelyOrientedPoints[{p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] tests \
whether the sequence of points p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p "|>, 
 <|"label" -> "NegativeMultinomialDistribution", "type" -> "keyword", 
  "info" -> "NegativeMultinomialDistribution[n, p] represents a negative \
multinomial distribution with parameter "|>, 
 <|"label" -> "NegativeRationals", "type" -> "keyword", 
  "info" -> "NegativeRationals represents the domain of strictly negative \
rational numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 NegativeRat"|>, 
 <|"label" -> "NegativeReals", "type" -> "keyword", 
  "info" -> 
   "NegativeReals represents the domain of strictly negative real numbers."|>\
, <|"label" -> "NegativeSemidefiniteMatrixQ", "type" -> "keyword", 
  "info" -> "NegativeSemidefiniteMatrixQ[m] gives True if m is explicitly \
negative semidefinite, and False otherw"|>, <|"label" -> "NeighborhoodData", 
  "type" -> "keyword", "info" -> "NeighborhoodData[entity, property] gives \
the value of the specified property for the neighborhood en"|>, 
 <|"label" -> "NeighborhoodGraph", "type" -> "keyword", 
  "info" -> "NeighborhoodGraph[g, v] gives the graph neighborhood of a vertex \
v in the graph g.NeighborhoodGraph["|>, <|"label" -> "Nest", 
  "type" -> "keyword", "info" -> 
   "Nest[f, expr, n] gives an expression with f applied n times to expr. "|>, 
 <|"label" -> "NestedGreaterGreater", "type" -> "keyword", 
  "info" -> "NestedGreaterGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\[CapitalAHat]\[Cent] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NestedLessLess", "type" -> "keyword", 
  "info" -> "NestedLessLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\[CapitalAHat]\[DownExclamation] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\[CapitalAHat]\[DownExclamation] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NestGraph", "type" -> "keyword", 
  "info" -> "NestGraph[f, expr, n] gives the graph obtained by starting with \
expr and applying f successively n t"|>, <|"label" -> "NestList", 
  "type" -> "keyword", "info" -> "NestList[f, expr, n] gives a list of the \
results of applying f to expr 0 through n times. "|>, 
 <|"label" -> "NestTree", "type" -> "keyword", "info" -> "NestTree[f, tree] \
gives the tree obtained by applying f to the data in the leaves of tree and \
extend"|>, <|"label" -> "NestWhile", "type" -> "keyword", 
  "info" -> "NestWhile[f, expr, test] starts with expr, then repeatedly \
applies f until applying test to the resu"|>, <|"label" -> "NestWhileList", 
  "type" -> "keyword", "info" -> "NestWhileList[f, expr, test] generates a \
list of the results of applying f repeatedly, starting with"|>, 
 <|"label" -> "NetAppend", "type" -> "keyword", 
  "info" -> "NetAppend[net, layer] appends a layer or a net onto a NetChain, \
a layer or a NetGraph with one outpu"|>, <|"label" -> "NetArray", 
  "type" -> "keyword", "info" -> "NetArray[] represents an array in a \
net.NetArray[\"name\"] uses \"name\" as an identifier to share the a"|>, 
 <|"label" -> "NetArrayLayer", "type" -> "keyword", 
  "info" -> "NetArrayLayer[] represents a layer that has no input and \
produces as output a constant array.NetArra"|>, 
 <|"label" -> "NetBidirectionalOperator", "type" -> "keyword", 
  "info" -> "NetBidirectionalOperator[net] represents a net that applies net \
to a sequence and to its reverse, co"|>, <|"label" -> "NetChain", 
  "type" -> "keyword", "info" -> "NetChain[{layer , layer , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] specifies a \
neural net in which the output of layer  is connected to t"|>, 
 <|"label" -> "NetDecoder", "type" -> "keyword", 
  "info" -> "NetDecoder[\"name\"] represents a decoder that takes a net \
representation and decodes it into an expre"|>, 
 <|"label" -> "NetDelete", "type" -> "keyword", 
  "info" -> "                                th\nNetDelete[net, n] deletes \
the n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    layer from a \
NetChain or NetGr"|>, <|"label" -> "NetDrop", "type" -> "keyword", 
  "info" -> "NetDrop[chain, n] removes the first n layers from a \
NetChain.NetDrop[chain, -n] removes the last n l"|>, 
 <|"label" -> "NetEncoder", "type" -> "keyword", 
  "info" -> "NetEncoder[\"name\"] represents an encoder that takes a given \
form of input and encodes it as an array"|>, 
 <|"label" -> "NetEvaluationMode", "type" -> "keyword", 
  "info" -> "NetEvaluationMode is an option that can be given when applying \
neural net functions to input data, s"|>, <|"label" -> "NetExtract", 
  "type" -> "keyword", "info" -> "NetExtract[layer, \"param\"] extracts the \
value of a parameter for the specified net layer.NetExtract["|>, 
 <|"label" -> "NetFlatten", "type" -> "keyword", 
  "info" -> "NetFlatten[net] collapses nested NetChain and NetGraph objects \
within net.NetFlatten[net, n] collaps"|>, <|"label" -> "NetFoldOperator", 
  "type" -> "keyword", "info" -> "NetFoldOperator[net] represents a net in \
which net is folded over a sequence of inputs, maintaining "|>, 
 <|"label" -> "NetGANOperator", "type" -> "keyword", 
  "info" -> "NetGANOperator[{generator, discriminator}] represents a network \
to perform generative adversarial ne"|>, <|"label" -> "NetGraph", 
  "type" -> "keyword", "info" -> "NetGraph[{layer , layer , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {m  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] n , m  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] specifies a \
neural net defined by a graph in wh"|>, <|"label" -> "NetInformation", 
  "type" -> "keyword", "info" -> "NetInformation[net] gives a report about \
the neural network net.NetInformation[net, \"prop\"] gives th"|>, 
 <|"label" -> "NetInitialize", "type" -> "keyword", 
  "info" -> "NetInitialize[net] gives a net in which all uninitialized \
learnable parameters in net have been give"|>, 
 <|"label" -> "NetInsert", "type" -> "keyword", 
  "info" -> "NetInsert[chain, layer, i] inserts a layer into a NetChain \
before the layer at position i.NetInsert["|>, 
 <|"label" -> "NetInsertSharedArrays", "type" -> "keyword", 
  "info" -> "NetInsertSharedArrays[net] converts all ordinary arrays in net \
into NetSharedArray objects.NetInsert"|>, <|"label" -> "NetJoin", 
  "type" -> "keyword", "info" -> "NetJoin[net , net , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] connects a \
series of NetChain or NetGraph objects to form a single NetChain o"|>, 
 <|"label" -> "NetMapOperator", "type" -> "keyword", 
  "info" -> "NetMapOperator[net] represents a net in which net is mapped over \
a sequence of inputs to give a sequ"|>, <|"label" -> "NetMapThreadOperator", 
  "type" -> "keyword", "info" -> "NetMapThreadOperator[mapnet] represents a \
net in which mapnet is mapped over one or more inputs to g"|>, 
 <|"label" -> "NetMeasurements", "type" -> "keyword", 
  "info" -> "NetMeasurements[net, data, measurement] computes the requested \
measurement for the net evaluated on "|>, <|"label" -> "NetModel", 
  "type" -> "keyword", "info" -> "NetModel[\"name\"] obtains a neural net \
model with the specified name from the Neural Net Repository. "|>, 
 <|"label" -> "NetNestOperator", "type" -> "keyword", 
  "info" -> "NetNestOperator[net, n] represents a net in which net is applied \
n times to the input."|>, <|"label" -> "NetPairEmbeddingOperator", 
  "type" -> "keyword", "info" -> "NetPairEmbeddingOperator[net] represents a \
net that takes a pair of arrays, embeds them into a vecto"|>, 
 <|"label" -> "NetPort", "type" -> "keyword", "info" -> "NetPort[\"port\"] \
represents the specified input or output port for a complete net.NetPort[{n, \
\"port\"}"|>, <|"label" -> "NetPortGradient", "type" -> "keyword", 
  "info" -> "NetPortGradient[\"port\"] represents the gradient of the output \
of a net with respect to the value of "|>, <|"label" -> "NetPrepend", 
  "type" -> "keyword", "info" -> "NetPrepend[net, layer] prepends a layer or \
a net onto a NetChain, a layer or a NetGraph with one inp"|>, 
 <|"label" -> "NetRename", "type" -> "keyword", 
  "info" -> "NetRename[net, \"old\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \"new\"] gives a \
net in which the name old for a layer is replaced with new.Net"|>, 
 <|"label" -> "NetReplace", "type" -> "keyword", 
  "info" -> "NetReplace[net, patt \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] layer] gives a \
net in which all layers matching patt are replaced with layer."|>, 
 <|"label" -> "NetReplacePart", "type" -> "keyword", 
  "info" -> "NetReplacePart[layer, \"array\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value] replaces \
an array within a layer, returning a new layer.NetRe"|>, 
 <|"label" -> "NetSharedArray", "type" -> "keyword", 
  "info" -> "NetSharedArray[\"name\"] represents an array in a net that is \
shared by more than one layer."|>, <|"label" -> "NetStateObject", 
  "type" -> "keyword", "info" -> "NetStateObject[net] creates an object \
derived from net that represents a neural net with additional "|>, 
 <|"label" -> "NetTake", "type" -> "keyword", "info" -> "NetTake[net, end] \
takes only those layers up to end in a NetChain or NetGraph.NetTake[net, \
{start, e"|>, <|"label" -> "NetTrain", "type" -> "keyword", 
  "info" -> "NetTrain[net, {input  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] output , input  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] output , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] trains the \
specified neural net by giving the"|>, <|"label" -> "NetTrainResultsObject", 
  "type" -> "keyword", "info" -> "NetTrainResultsObject[\[CapitalATilde]\
\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an object generated \
by NetTrain that contains the trained net an"|>, 
 <|"label" -> "NetUnfold", "type" -> "keyword", 
  "info" -> "NetUnfold[fnet] produces the elementary net of the folded net \
fnet, exposing the recurrent states."|>, <|"label" -> "NetworkPacketCapture", 
  "type" -> "keyword", "info" -> "NetworkPacketCapture[] creates a temporary \
interactive interface for capturing information on networ"|>, 
 <|"label" -> "NetworkPacketRecording", "type" -> "keyword", 
  "info" -> "NetworkPacketRecording[t] records information on network packets \
transmitted or received through all"|>, <|"label" -> "NetworkPacketTrace", 
  "type" -> "keyword", "info" -> "NetworkPacketTrace[expr] evaluates expr and \
returns information on network packets transmitted or re"|>, 
 <|"label" -> "NeumannValue", "type" -> "keyword", 
  "info" -> "NeumannValue[val, pred] represents a Neumann boundary value val, \
specified on the part of the bounda"|>, <|"label" -> "NevilleThetaC", 
  "type" -> "keyword", "info" -> "NevilleThetaC[z, m] gives the Neville theta \
function \[CapitalATilde]\217\[CapitalAHat]\221  (z \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). \n                               \
   "|>, <|"label" -> "NevilleThetaD", "type" -> "keyword", 
  "info" -> "NevilleThetaD[z, m] gives the Neville theta function \
\[CapitalATilde]\217\[CapitalAHat]\221  (z \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). \n                               \
   "|>, <|"label" -> "NevilleThetaN", "type" -> "keyword", 
  "info" -> "NevilleThetaN[z, m] gives the Neville theta function \
\[CapitalATilde]\217\[CapitalAHat]\221  (z \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). \n                               \
   "|>, <|"label" -> "NevilleThetaS", "type" -> "keyword", 
  "info" -> "NevilleThetaS[z, m] gives the Neville theta function \
\[CapitalATilde]\217\[CapitalAHat]\221  (z \
\[CapitalATilde]\257\[CapitalAHat]\220b2 m). \n                               \
   "|>, <|"label" -> "NExpectation", "type" -> "keyword", 
  "info" -> "NExpectation[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist] gives the \
numerical expectation of expr under the assumption that x fol"|>, 
 <|"label" -> "NextDate", "type" -> "keyword", "info" -> "NextDate[gran] \
gives the next occurring date of the specified granularity type \
gran.NextDate[daytype"|>, <|"label" -> "NextPrime", "type" -> "keyword", 
  "info" -> "                                                                 \
         th\nNextPrime[x] gives the "|>, 
 <|"label" -> "NextScheduledTaskTime", "type" -> "keyword", 
  "info" -> "NextScheduledTaskTime[obj] gives the next execution time of the \
scheduled task represented by obj."|>, <|"label" -> "NHoldAll", 
  "type" -> "keyword", "info" -> "NHoldAll is an attribute which specifies \
that none of the arguments to a function should be affected"|>, 
 <|"label" -> "NHoldFirst", "type" -> "keyword", 
  "info" -> "NHoldFirst is an attribute which specifies that the first \
argument to a function should not be affec"|>, 
 <|"label" -> "NHoldRest", "type" -> "keyword", 
  "info" -> "NHoldRest is an attribute which specifies that all but the first \
argument to a function should not b"|>, <|"label" -> "NicholsGridLines", 
  "type" -> "keyword", "info" -> "NicholsGridLines is an option to \
NicholsPlot that specifies contours of constant magnitude and const"|>, 
 <|"label" -> "NicholsPlot", "type" -> "keyword", 
  "info" -> "NicholsPlot[lsys] generates a Nichols plot of the transfer \
function for the system lsys.NicholsPlot["|>, <|"label" -> "NightHemisphere", 
  "type" -> "keyword", "info" -> "NightHemisphere[] is a two-dimensional \
GeoGraphics primitive that represents the half of the Earth c"|>, 
 <|"label" -> "NIntegrate", "type" -> "keyword", 
  "info" -> "                                                                 \
               x                   "|>, <|"label" -> "NMaximize", 
  "type" -> "keyword", "info" -> "NMaximize[f, x] maximizes f numerically \
with respect to x.NMaximize[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] maximizes f \
numeri"|>, <|"label" -> "NMaxValue", "type" -> "keyword", 
  "info" -> "NMaxValue[f, x] gives the maximum value of f with respect to \
x.NMaxValue[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the max"|>\
, <|"label" -> "NMinimize", "type" -> "keyword", 
  "info" -> "NMinimize[f, x] minimizes f numerically with respect to \
x.NMinimize[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] minimizes f \
numeri"|>, <|"label" -> "NMinValue", "type" -> "keyword", 
  "info" -> "NMinValue[f, x] gives the minimum value of f with respect to \
x.NMinValue[f, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the min"|>\
, <|"label" -> "NominalVariables", "type" -> "keyword", 
  "info" -> "NominalVariables is an option for statistical functions such as \
LinearModelFit that specifies which "|>, 
 <|"label" -> "NoncentralBetaDistribution", "type" -> "keyword", 
  "info" -> "NoncentralBetaDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216b4] represents a noncentral beta \
distribution with shape parameters "|>, 
 <|"label" -> "NoncentralChiSquareDistribution", "type" -> "keyword", 
  "info" -> "                                                               \
2\nNoncentralChiSquareDistribution[\[CapitalATilde]\216\[CapitalAHat]\275, "|>\
, <|"label" -> "NoncentralFRatioDistribution", "type" -> "keyword", 
  "info" -> "NoncentralFRatioDistribution[n, m, \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]] represents a noncentral \
F-ratio distribution with n numerator "|>, 
 <|"label" -> "NoncentralStudentTDistribution", "type" -> "keyword", 
  "info" -> "NoncentralStudentTDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\275, \[CapitalATilde]\216b4] represents a noncentral Student t \
distribution with \[CapitalATilde]\216\[CapitalAHat]\275 degrees o"|>, 
 <|"label" -> "NonCommutativeMultiply", "type" -> "keyword", 
  "info" -> "a ** b ** c is a general associative, but \
non\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220commutative, \
form of multiplication. "|>, <|"label" -> "NonConstants", 
  "type" -> "keyword", "info" -> "NonConstants is an option for D which gives \
a list of objects to be taken to depend implicitly on th"|>, 
 <|"label" -> "NondimensionalizationTransform", "type" -> "keyword", 
  "info" -> "NondimensionalizationTransform[eq, ovars, fvars] \
nondimensionalizes eq, replacing original variables"|>, 
 <|"label" -> "None", "type" -> "keyword", 
  "info" -> "None is a setting used for certain options. "|>, 
 <|"label" -> "NoneTrue", "type" -> "keyword", "info" -> "NoneTrue[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, test] yields \
True if test[e ] is False for all of the e .NoneTrue[expr, test, "|>, 
 <|"label" -> "NonlinearModelFit", "type" -> "keyword", 
  "info" -> "NonlinearModelFit[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, form, \
{\[CapitalATilde]\216b2 , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] constructs a \
nonlinear model with structure form th"|>, 
 <|"label" -> "NonlinearStateSpaceModel", "type" -> "keyword", 
  "info" -> "NonlinearStateSpaceModel[{f, g}, x, u] represents the model x ' \
(t) \[CapitalATilde]\257\[CapitalAHat]\220\\[PlusMinus] f(x(t), u(t)), y(t) \
\[CapitalATilde]\257\[CapitalAHat]\220\\[PlusMinus] g(x(t), "|>, 
 <|"label" -> "NonlocalMeansFilter", "type" -> "keyword", 
  "info" -> "NonlocalMeansFilter[image, r] applies a nonlocal means filter to \
image by comparing a range r neighb"|>, <|"label" -> "NonNegative", 
  "type" -> "keyword", "info" -> "NonNegative[x] gives True if x is a \
non\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220negative \
number. "|>, <|"label" -> "NonNegativeIntegers", "type" -> "keyword", 
  "info" -> "NonNegativeIntegers represents the domain of non-negative \
integers, as in x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
NonNegativeIntegers. "|>, <|"label" -> "NonNegativeRationals", 
  "type" -> "keyword", "info" -> "NonNegativeRationals represents the domain \
of non-negative rational numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 NonNegativeRa"|>, 
 <|"label" -> "NonNegativeReals", "type" -> "keyword", 
  "info" -> 
   "NonNegativeReals represents the domain of non-negative real numbers."|>, 
 <|"label" -> "NonPositive", "type" -> "keyword", 
  "info" -> "NonPositive[x] gives True if x is a \
non\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220positive \
number. "|>, <|"label" -> "NonPositiveIntegers", "type" -> "keyword", 
  "info" -> "NonPositiveIntegers represents the domain of non-positive \
integers, as in x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
NonPositiveIntegers. "|>, <|"label" -> "NonPositiveRationals", 
  "type" -> "keyword", "info" -> "NonPositiveRationals represents the domain \
of non-positive rational numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 NonPositiveRa"|>, 
 <|"label" -> "NonPositiveReals", "type" -> "keyword", 
  "info" -> 
   "NonPositiveReals represents the domain of non-positive real numbers."|>, 
 <|"label" -> "Nor", "type" -> "keyword", "info" -> "Nor[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is the logical \
NOR function. It evaluates its arguments in order, giving False immedi"|>, 
 <|"label" -> "NorlundB", "type" -> "keyword", "info" -> "                    \
                      (a)                                                     \
  "|>, <|"label" -> "Norm", "type" -> "keyword", 
  "info" -> "Norm[expr] gives the norm of a number, vector, or matrix. \
Norm[expr, p] gives the \
p\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220norm. \n"|>, 
 <|"label" -> "Normal", "type" -> "keyword", "info" -> "Normal[expr] converts \
expr to a normal expression from a variety of special forms. Normal[expr, h] \
c"|>, <|"label" -> "NormalDistribution", "type" -> "keyword", 
  "info" -> "NormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents a normal (Gaussian) \
distribution with mean \[CapitalATilde]\216\[CapitalAHat]\274 and standard \
deviat"|>, <|"label" -> "NormalizationLayer", "type" -> "keyword", 
  "info" -> "NormalizationLayer[] represents a trainable net layer that \
normalizes its input data across the seco"|>, 
 <|"label" -> "Normalize", "type" -> "keyword", 
  "info" -> "Normalize[v] gives the normalized form of a vector v. \
Normalize[z] gives the normalized form of a co"|>, 
 <|"label" -> "Normalized", "type" -> "keyword", 
  "info" -> "Normalized is an option that determines whether to test if \
matrix rows are normalized."|>, 
 <|"label" -> "NormalizedSquaredEuclideanDistance", "type" -> "keyword", 
  "info" -> "NormalizedSquaredEuclideanDistance[u, v] gives the normalized \
squared Euclidean distance between vec"|>, <|"label" -> "NormalMatrixQ", 
  "type" -> "keyword", "info" -> "NormalMatrixQ[m] gives True if m is an \
explicitly normal matrix, and False otherwise."|>, 
 <|"label" -> "NormalsFunction", "type" -> "keyword", 
  "info" -> "NormalsFunction is an option for Plot3D and related functions \
that specifies a function to apply to "|>, <|"label" -> "NormFunction", 
  "type" -> "keyword", "info" -> "NormFunction is an option for functions \
such as FindFit and NDSolve which gives a function to be min"|>, 
 <|"label" -> "Not", "type" -> "keyword", "info" -> "! expr is the logical \
NOT function. It gives False if expr is True, and True if it is False. "|>, 
 <|"label" -> "NotCongruent", "type" -> "keyword", 
  "info" -> "NotCongruent[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Cent] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotCupCap", "type" -> "keyword", 
  "info" -> "NotCupCap[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DiscretionaryHyphen] \
y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DiscretionaryHyphen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotDoubleVerticalBar", "type" -> "keyword", 
  "info" -> "NotDoubleVerticalBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\246 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\246 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotElement", "type" -> "keyword", 
  "info" -> "NotElement[x, dom] or x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\211 dom asserts that \
x is not an element of the domain dom.NotElement[x  | \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 |"|>, 
 <|"label" -> "NotEqualTilde", "type" -> "keyword", 
  "info" -> "NotEqualTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\200 y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\200 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotExists", "type" -> "keyword", 
  "info" -> "NotExists[x, y] displays as \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\204  y.\n             \
                x"|>, <|"label" -> "NotGreater", "type" -> "keyword", 
  "info" -> "NotGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\257 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\257 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotGreaterEqual", "type" -> "keyword", 
  "info" -> "NotGreaterEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[PlusMinus] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[PlusMinus] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotGreaterFullEqual", "type" -> "keyword", 
  "info" -> "NotGreaterFullEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Copyright] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Copyright] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotGreaterGreater", "type" -> "keyword", 
  "info" -> "NotGreaterGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Section] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Section] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotGreaterLess", "type" -> "keyword", 
  "info" -> "NotGreaterLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\271 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\271 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotGreaterSlantEqual", "type" -> "keyword", 
  "info" -> "NotGreaterSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Copyright] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Copyright] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotGreaterTilde", "type" -> "keyword", 
  "info" -> "NotGreaterTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[Micro] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[Micro] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Nothing", "type" -> "keyword", "info" -> "Nothing represents \
an element of a list that will automatically be removed. \
Nothing[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives \
Nothing"|>, <|"label" -> "NotHumpDownHump", "type" -> "keyword", 
  "info" -> "NotHumpDownHump[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\202 y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\202 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotHumpEqual", "type" -> "keyword", 
  "info" -> "NotHumpEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\201 y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\201 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotificationFunction", "type" -> "keyword", 
  "info" -> "NotificationFunction is an option that specifies how \
notifications should be sent from background ta"|>, 
 <|"label" -> "NotLeftTriangle", "type" -> "keyword", 
  "info" -> "NotLeftTriangle[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\252 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\252 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLeftTriangleBar", "type" -> "keyword", 
  "info" -> "NotLeftTriangleBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\222 y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\222 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLeftTriangleEqual", "type" -> "keyword", 
  "info" -> "NotLeftTriangleEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\\[Not] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\\[Not] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLess", "type" -> "keyword", "info" -> "NotLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[RegisteredTrademark] \
y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[RegisteredTrademark] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLessEqual", "type" -> "keyword", 
  "info" -> "NotLessEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[Degree] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\\[Degree] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLessFullEqual", "type" -> "keyword", 
  "info" -> "NotLessFullEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DoubleDot] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DoubleDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLessGreater", "type" -> "keyword", 
  "info" -> "NotLessGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Cedilla] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Cedilla] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLessLess", "type" -> "keyword", 
  "info" -> "NotLessLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Cent] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLessSlantEqual", "type" -> "keyword", 
  "info" -> "NotLessSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Currency] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Currency] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotLessTilde", "type" -> "keyword", 
  "info" -> "NotLessTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211b4 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211b4 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotNestedGreaterGreater", "type" -> "keyword", 
  "info" -> "NotNestedGreaterGreater[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[DoubleDot] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[DoubleDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotNestedLessLess", "type" -> "keyword", 
  "info" -> "NotNestedLessLess[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Sterling] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[Sterling] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotPrecedes", "type" -> "keyword", 
  "info" -> "NotPrecedes[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\200 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\200 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotPrecedesEqual", "type" -> "keyword", 
  "info" -> "NotPrecedesEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[LeftGuillemet] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[LeftGuillemet] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotPrecedesSlantEqual", "type" -> "keyword", 
  "info" -> "NotPrecedesSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]  y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotPrecedesTilde", "type" -> "keyword", 
  "info" -> "NotPrecedesTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[DoubleDot] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[DoubleDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotReverseElement", "type" -> "keyword", 
  "info" -> "NotReverseElement[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\214 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\214 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotRightTriangle", "type" -> "keyword", 
  "info" -> "NotRightTriangle[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[LeftGuillemet] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[LeftGuillemet] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotRightTriangleBar", "type" -> "keyword", 
  "info" -> "NotRightTriangleBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\223 y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\223 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotRightTriangleEqual", "type" -> "keyword", 
  "info" -> "NotRightTriangleEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[DiscretionaryHyphen] \
y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[DiscretionaryHyphen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSquareSubset", "type" -> "keyword", 
  "info" -> "NotSquareSubset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[RegisteredTrademark] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[RegisteredTrademark] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSquareSubsetEqual", "type" -> "keyword", 
  "info" -> "NotSquareSubsetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[Cent] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[Cent] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSquareSuperset", "type" -> "keyword", 
  "info" -> "NotSquareSuperset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\257 y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\257 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSquareSupersetEqual", "type" -> "keyword", 
  "info" -> "NotSquareSupersetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[Sterling] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[Sterling] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSubset", "type" -> "keyword", 
  "info" -> "NotSubset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\204 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\204 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSubsetEqual", "type" -> "keyword", 
  "info" -> "NotSubsetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\210 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\210 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSucceeds", "type" -> "keyword", 
  "info" -> "NotSucceeds[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\201 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\201 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSucceedsEqual", "type" -> "keyword", 
  "info" -> "NotSucceedsEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[DiscretionaryHyphen] y \
\[CapitalATilde]\257\[CapitalAHat]\220\[CapitalAHat]\[DiscretionaryHyphen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSucceedsSlantEqual", "type" -> "keyword", 
  "info" -> "NotSucceedsSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[DownExclamation] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[DownExclamation] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSucceedsTilde", "type" -> "keyword", 
  "info" -> "NotSucceedsTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[Copyright] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\[Copyright] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSuperset", "type" -> "keyword", 
  "info" -> "NotSuperset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\205 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\205 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotSupersetEqual", "type" -> "keyword", 
  "info" -> "NotSupersetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\211 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\211 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotTilde", "type" -> "keyword", "info" -> "NotTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\201 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\201 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotTildeEqual", "type" -> "keyword", 
  "info" -> "NotTildeEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\204 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\204 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotTildeFullEqual", "type" -> "keyword", 
  "info" -> "NotTildeFullEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\207 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\207 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotTildeTilde", "type" -> "keyword", 
  "info" -> "NotTildeTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\211 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\211 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "NotVerticalBar", "type" -> "keyword", 
  "info" -> "NotVerticalBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\221 y \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\221 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Now", "type" -> "keyword", 
  "info" -> 
   "Now gives a DateObject representing the current moment in time."|>, 
 <|"label" -> "NoWhitespace", "type" -> "keyword", 
  "info" -> "NoWhitespace represents the absence of whitespace between \
elements in a grammar rules pattern."|>, <|"label" -> "NProbability", 
  "type" -> "keyword", "info" -> "NProbability[pred, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist] gives the \
numerical probability for an event that satisfies the predica"|>, 
 <|"label" -> "NProduct", "type" -> "keyword", "info" -> "                    \
                                                          i\n                 \
   "|>, <|"label" -> "NProductFactors", "type" -> "keyword", 
  "info" -> "NProductFactors is an option for NProduct. NProductFactors -> n \
explicitly includes n factors in the"|>, <|"label" -> "NRoots", 
  "type" -> "keyword", "info" -> "NRoots[lhs == rhs, var] yields a \
disjunction of equations which represent numerical approximations t"|>, 
 <|"label" -> "NSolve", "type" -> "keyword", "info" -> "NSolve[expr, vars] \
attempts to find numerical approximations to the solutions of the system expr \
of "|>, <|"label" -> "NSolveValues", "type" -> "keyword", 
  "info" -> "NSolveValues[expr, vars] attempts to find numerical \
approximations to the values of vars determined "|>, 
 <|"label" -> "NSum", "type" -> "keyword", "info" -> "                        \
                                              i\n                            \
"|>, <|"label" -> "NSumTerms", "type" -> "keyword", 
  "info" -> "NSumTerms is an option for NSum. NSumTerms -> n explicitly \
includes n terms in the sum before extrap"|>, 
 <|"label" -> "NuclearExplosionData", "type" -> "keyword", 
  "info" -> "NuclearExplosionData[entity, property] gives the value of the \
specified property for the nuclear exp"|>, <|"label" -> "NuclearReactorData", 
  "type" -> "keyword", "info" -> "NuclearReactorData[entity, property] gives \
the value of the specified property for the nuclear react"|>, 
 <|"label" -> "Null", "type" -> "keyword", "info" -> "Null is a symbol used \
to indicate the absence of an expression or a result. It is not displayed in \
o"|>, <|"label" -> "NullRecords", "type" -> "keyword", 
  "info" -> "NullRecords is an option for Read and related functions which \
specifies whether null records should "|>, <|"label" -> "NullSpace", 
  "type" -> "keyword", "info" -> "NullSpace[m] gives a list of vectors that \
forms a basis for the null space of the matrix m. "|>, 
 <|"label" -> "NullWords", "type" -> "keyword", 
  "info" -> "NullWords is an option for Read and related functions which \
specifies whether null words should be t"|>, 
 <|"label" -> "Number", "type" -> "keyword", 
  "info" -> "Number represents an exact integer or an approximate real number \
in Read. "|>, <|"label" -> "NumberCompose", "type" -> "keyword", 
  "info" -> "NumberCompose[{c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, c }, {u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, u }] returns the \
quantity c  u  + \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
+ c  u .\n                1   "|>, <|"label" -> "NumberDecompose", 
  "type" -> "keyword", "info" -> "NumberDecompose[x, {u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, u }] returns a \
list of coefficients {c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, c } of a \
decomposition of the"|>, <|"label" -> "NumberDigit", "type" -> "keyword", 
  "info" -> "                                                       n         \
                                   "|>, <|"label" -> "NumberExpand", 
  "type" -> "keyword", "info" -> "NumberExpand[x] gives a list of the decimal \
digits of x multiplied by their corresponding powers of "|>, 
 <|"label" -> "NumberFieldClassNumber", "type" -> "keyword", 
  "info" -> "NumberFieldClassNumber[\[CapitalATilde]\216\[CapitalAHat]\
\[Cedilla]] gives the class number for the algebraic number field \
\[CapitalATilde]\257\[CapitalAHat]\236b4[\[CapitalATilde]\216\[CapitalAHat]\
\[Cedilla]] generated by \[CapitalATilde]\216\[CapitalAHat]\[Cedilla]."|>, 
 <|"label" -> "NumberFieldDiscriminant", "type" -> "keyword", 
  "info" -> "NumberFieldDiscriminant[a] gives the discriminant of the field \
\[CapitalATilde]\257\[CapitalAHat]\236b4[a] generated by the algebraic numbe"\
|>, <|"label" -> "NumberFieldFundamentalUnits", "type" -> "keyword", 
  "info" -> "NumberFieldFundamentalUnits[a] gives a list of fundamental units \
for the field \[CapitalATilde]\257\[CapitalAHat]\236b4[a] generated by the"|>\
, <|"label" -> "NumberFieldIntegralBasis", "type" -> "keyword", 
  "info" -> "NumberFieldIntegralBasis[a] gives an integral basis for the \
field \[CapitalATilde]\257\[CapitalAHat]\236b4[a] generated by the algebraic \
nu"|>, <|"label" -> "NumberFieldNormRepresentatives", "type" -> "keyword", 
  "info" -> "NumberFieldNormRepresentatives[a, m] gives a list of \
representatives of classes of algebraic integer"|>, 
 <|"label" -> "NumberFieldRegulator", "type" -> "keyword", 
  "info" -> "NumberFieldRegulator[a] gives the regulator of the field \
\[CapitalATilde]\257\[CapitalAHat]\236b4[a] generated by the algebraic number \
a."|>, <|"label" -> "NumberFieldRootsOfUnity", "type" -> "keyword", 
  "info" -> "NumberFieldRootsOfUnity[a] gives the roots of unity for the \
field \[CapitalATilde]\257\[CapitalAHat]\236b4[a] generated by the algebraic \
nu"|>, <|"label" -> "NumberFieldSignature", "type" -> "keyword", 
  "info" -> "NumberFieldSignature[a] gives the signature of the field \
\[CapitalATilde]\257\[CapitalAHat]\236b4[a] generated by the algebraic number \
a."|>, <|"label" -> "NumberForm", "type" -> "keyword", 
  "info" -> "NumberForm[expr, n] prints with approximate real numbers in expr \
given to n\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220digit \
precision. NumberF"|>, <|"label" -> "NumberFormat", "type" -> "keyword", 
  "info" -> "NumberFormat is an option for NumberForm and related functions \
that specifies how the mantissa, base"|>, <|"label" -> "NumberLinePlot", 
  "type" -> "keyword", "info" -> "NumberLinePlot[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots the \
values v  on a number line.NumberLinePlot[pred, x] plots a num"|>, 
 <|"label" -> "NumberMarks", "type" -> "keyword", 
  "info" -> "NumberMarks is an option for InputForm and related functions \
that specifies whether ` marks should b"|>, <|"label" -> "NumberMultiplier", 
  "type" -> "keyword", "info" -> "NumberMultiplier is an option for \
NumberForm and related functions which gives the string to use as "|>, 
 <|"label" -> "NumberPadding", "type" -> "keyword", 
  "info" -> "NumberPadding is an option for NumberForm and related functions \
which gives strings to use as paddin"|>, <|"label" -> "NumberPoint", 
  "type" -> "keyword", "info" -> "NumberPoint is an option for NumberForm and \
related functions that gives the string to use as a deci"|>, 
 <|"label" -> "NumberQ", "type" -> "keyword", 
  "info" -> 
   "NumberQ[expr] gives True if expr is a number, and False otherwise. "|>, 
 <|"label" -> "NumberSeparator", "type" -> "keyword", 
  "info" -> "NumberSeparator is an option for NumberForm and related \
functions that gives the string to insert at"|>, 
 <|"label" -> "NumberSigns", "type" -> "keyword", 
  "info" -> "NumberSigns is an option for NumberForm and related functions \
which gives strings to use as signs fo"|>, <|"label" -> "NumberString", 
  "type" -> "keyword", "info" -> 
   "NumberString represents the characters of a number in StringExpression."|>\
, <|"label" -> "Numerator", "type" -> "keyword", 
  "info" -> "Numerator[expr] gives the numerator of expr. "|>, 
 <|"label" -> "NumeratorDenominator", "type" -> "keyword", 
  "info" -> "NumeratorDenominator[expr] gives the list {Numerator[expr], \
Denominator[expr]} of expr."|>, <|"label" -> "NumericalOrder", 
  "type" -> "keyword", "info" -> "NumericalOrder[e , e ] gives 1 if e  < e , \
-1 if e  > e , 0 if e  and e  are identical or numericall"|>, 
 <|"label" -> "NumericalSort", "type" -> "keyword", 
  "info" -> 
   "NumericalSort[list] sorts the elements of list into numerical order."|>, 
 <|"label" -> "NumericArray", "type" -> "keyword", 
  "info" -> "NumericArray[array, type] creates a numeric array of the \
specified type.NumericArray[array, type, me"|>, 
 <|"label" -> "NumericArrayQ", "type" -> "keyword", 
  "info" -> "NumericArrayQ[expr] gives True if expr is a valid NumericArray \
object, and False otherwise.NumericAr"|>, <|"label" -> "NumericArrayType", 
  "type" -> "keyword", "info" -> "NumericArrayType[array] gives the \
underlying type of values used for each element in the NumericArra"|>, 
 <|"label" -> "NumericFunction", "type" -> "keyword", 
  "info" -> "NumericFunction is an attribute that can be assigned to a symbol \
f to indicate that f[arg , arg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]"|>, 
 <|"label" -> "NumericQ", "type" -> "keyword", "info" -> "NumericQ[expr] \
gives True if expr is a numeric quantity, and False otherwise. "|>, 
 <|"label" -> "NuttallWindow", "type" -> "keyword", 
  "info" -> "NuttallWindow[x] represents a Nuttall window function of x."|>, 
 <|"label" -> "NValues", "type" -> "keyword", "info" -> "NValues[f] gives a \
list of transformation rules corresponding to all numerical values (values \
for N["|>, <|"label" -> "NyquistGridLines", "type" -> "keyword", 
  "info" -> "NyquistGridLines is an option to NyquistPlot that specifies \
contours of constant magnitude and phase"|>, <|"label" -> "NyquistPlot", 
  "type" -> "keyword", "info" -> "NyquistPlot[lsys] generates a Nyquist plot \
of the transfer function for the system lsys.NyquistPlot["|>, 
 <|"label" -> "O", "type" -> "keyword", "info" -> "                           \
        n                                                                "|>, 
 <|"label" -> "ObjectExistsQ", "type" -> "keyword", 
  "info" -> 
   "ObjectExistsQ gives True if the object exists and False otherwise."|>, 
 <|"label" -> "ObservabilityGramian", "type" -> "keyword", 
  "info" -> "ObservabilityGramian[ssm] gives the observability Gramian of the \
state-space model ssm."|>, <|"label" -> "ObservabilityMatrix", 
  "type" -> "keyword", "info" -> "ObservabilityMatrix[ssm] gives the \
observability matrix of the state-space model ssm."|>, 
 <|"label" -> "ObservableDecomposition", "type" -> "keyword", 
  "info" -> "ObservableDecomposition[sys] yields the observable subsystem of \
the system sys.ObservableDecompositi"|>, <|"label" -> "ObservableModelQ", 
  "type" -> "keyword", "info" -> "ObservableModelQ[sys] gives True if the \
system sys is observable, and False otherwise.ObservableMode"|>, 
 <|"label" -> "OceanData", "type" -> "keyword", 
  "info" -> "OceanData[entity, property] gives the value of the specified \
property for the ocean entity.OceanData"|>, <|"label" -> "Octahedron", 
  "type" -> "keyword", "info" -> "Octahedron[] represents a regular \
octahedron centered at the origin with unit edge length.Octahedron"|>, 
 <|"label" -> "OddQ", "type" -> "keyword", 
  "info" -> 
   "OddQ[expr] gives True if expr is an odd integer, and False otherwise. "|>\
, <|"label" -> "Off", "type" -> "keyword", "info" -> "Off[symbol :: tag] \
switches off a message, so that it is no longer printed. Off[\"name\"] \
switches off"|>, <|"label" -> "Offset", "type" -> "keyword", 
  "info" -> "Offset[{dx, dy}, position] gives the position of a graphical \
object obtained by starting at the spec"|>, 
 <|"label" -> "On", "type" -> "keyword", "info" -> "On[symbol :: tag] \
switches on a message, so that it can be printed. On[\"name\"] switches on a \
named g"|>, <|"label" -> "ONanGroupON", "type" -> "keyword", 
  "info" -> 
   "ONanGroupON[] represents the sporadic simple O'Nan group O ' N."|>, 
 <|"label" -> "Once", "type" -> "keyword", "info" -> "Once[expr] evaluates \
expr once in each Wolfram Language session, always returning the result from \
th"|>, <|"label" -> "OneIdentity", "type" -> "keyword", 
  "info" -> "OneIdentity is an attribute that can be assigned to a symbol f \
to indicate that f[x], f[f[x]], etc. "|>, <|"label" -> "Opacity", 
  "type" -> "keyword", "info" -> "Opacity[a] is a graphics directive that \
specifies that graphical objects that follow are to be displ"|>, 
 <|"label" -> "OpacityFunction", "type" -> "keyword", 
  "info" -> "OpacityFunction is an option for graphics functions that \
specifies a function to apply to determine "|>, 
 <|"label" -> "OpacityFunctionScaling", "type" -> "keyword", 
  "info" -> "OpacityFunctionScaling is an option to visualization functions \
such as DensityPlot3D that specifies "|>, <|"label" -> "OpenAppend", 
  "type" -> "keyword", "info" -> "OpenAppend[\"file\"] opens a file to append \
output to it, and returns an OutputStream object. "|>, 
 <|"label" -> "OpenerView", "type" -> "keyword", 
  "info" -> "OpenerView[{expr , expr }] represents an object which displays \
as an opener, together with expr  if "|>, <|"label" -> "Opening", 
  "type" -> "keyword", "info" -> "Opening[image, ker] gives the morphological \
opening of image with respect to the structuring element"|>, 
 <|"label" -> "OpenRead", "type" -> "keyword", "info" -> "OpenRead[\"file\"] \
opens a file to read data from, and returns an InputStream object."|>, 
 <|"label" -> "OpenTemporary", "type" -> "keyword", 
  "info" -> "OpenTemporary[] opens a temporary file to which output can be \
written, and returns an OutputStream o"|>, <|"label" -> "OpenWrite", 
  "type" -> "keyword", "info" -> "OpenWrite[\"file\"] opens a file to write \
output to it, and returns an OutputStream object. OpenWrite["|>, 
 <|"label" -> "Operate", "type" -> "keyword", "info" -> "Operate[p, f[x, y]] \
gives p[f][x, y]. Operate[p, expr, n] applies p at level n in the head of \
expr. "|>, <|"label" -> "OperatorApplied", "type" -> "keyword", 
  "info" -> "OperatorApplied[f, n] represents an operator form of the \
function f of n arguments so that OperatorA"|>, 
 <|"label" -> "OptimumFlowData", "type" -> "keyword", 
  "info" -> "OptimumFlowData[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents flow data such as generated by \
FindMaximumFlow, FindMinimumCostFlow, e"|>, <|"label" -> "Optional", 
  "type" -> "keyword", "info" -> "patt : def or Optional[patt, def] is a \
pattern object that represents an expression of the form patt"|>, 
 <|"label" -> "OptionalElement", "type" -> "keyword", 
  "info" -> "OptionalElement[patt] is a grammar rules pattern object that \
represents 0 or 1 instances of patt.Opt"|>, 
 <|"label" -> "OptionInspectorSettings", "type" -> "keyword", 
  "info" -> "OptionInspectorSettings is a global option that specifies the \
display of options in the Option Inspe"|>, <|"label" -> "OptionQ", 
  "type" -> "keyword", "info" -> "OptionQ[e] returns True if e can be \
considered an option or list of options, and False otherwise."|>, 
 <|"label" -> "Options", "type" -> "keyword", "info" -> "Options[symbol] \
gives the list of default options assigned to a symbol. Options[expr] gives \
the opti"|>, <|"label" -> "OptionsPattern", "type" -> "keyword", 
  "info" -> "OptionsPattern[] is a pattern object that represents a \
collection of options given as rules, where t"|>, 
 <|"label" -> "OptionValue", "type" -> "keyword", 
  "info" -> "OptionValue[name] gives the value of name in options matched by \
OptionsPattern. OptionValue[f, name]"|>, <|"label" -> "Or", 
  "type" -> "keyword", "info" -> "e  || e  || \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 is the logical OR \
function. It evaluates its arguments in order, giving True immediate"|>, 
 <|"label" -> "Orange", "type" -> "keyword", 
  "info" -> 
   "Orange represents the color orange in graphics or style specifications. "\
|>, <|"label" -> "Order", "type" -> "keyword", "info" -> "Order[expr , expr ] \
gives 1 if expr  is before expr  in canonical order, and -1 if expr  is after \
ex"|>, <|"label" -> "OrderDistribution", "type" -> "keyword", 
  "info" -> "                                                 th              \
                                   "|>, <|"label" -> "OrderedQ", 
  "type" -> "keyword", "info" -> "OrderedQ[h[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]] gives True if \
the e  are in canonical order, and False otherwise.OrderedQ[h[e"|>, 
 <|"label" -> "Ordering", "type" -> "keyword", "info" -> "Ordering[list] \
gives the positions in list at which each successive element of Sort[list] \
appears. O"|>, <|"label" -> "OrderingBy", "type" -> "keyword", 
  "info" -> "OrderingBy[list, f] gives the positions in list at which each \
successive element of SortBy[list, f] "|>, <|"label" -> "OrderingLayer", 
  "type" -> "keyword", "info" -> "OrderingLayer[] represents a net layer that \
effectively applies Ordering to its input. OrderingLayer"|>, 
 <|"label" -> "Orderless", "type" -> "keyword", 
  "info" -> "Orderless is an attribute that can be assigned to a symbol f to \
indicate that the elements e  in exp"|>, 
 <|"label" -> "OrderlessPatternSequence", "type" -> "keyword", 
  "info" -> "OrderlessPatternSequence[p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is a pattern \
object that represents a sequence of arguments matc"|>, 
 <|"label" -> "OrnsteinUhlenbeckProcess", "type" -> "keyword", 
  "info" -> "OrnsteinUhlenbeckProcess[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] represents a stationary \
Ornstein\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Uhlenbeck \
process with long-term "|>, <|"label" -> "Orthogonalize", 
  "type" -> "keyword", "info" -> "Orthogonalize[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives an \
orthonormal basis found by orthogonalizing the vectors v .Orthog"|>, 
 <|"label" -> "OrthogonalMatrixQ", "type" -> "keyword", 
  "info" -> "OrthogonalMatrixQ[m] gives True if m is an explicitly orthogonal \
matrix, and False otherwise."|>, <|"label" -> "Out", "type" -> "keyword", 
  "info" -> "                                                                 \
                  th               "|>, <|"label" -> "Outer", 
  "type" -> "keyword", "info" -> "Outer[f, list , list , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
generalized outer product of the list , forming all possible com"|>, 
 <|"label" -> "OuterPolygon", "type" -> "keyword", 
  "info" -> 
   "OuterPolygon[poly] gives the outer polygon of the polygon poly."|>, 
 <|"label" -> "OuterPolyhedron", "type" -> "keyword", 
  "info" -> 
   "OuterPolyhedron[poly] gives the outer polyhedron of the polyhedron poly."\
|>, <|"label" -> "OutputAutoOverwrite", "type" -> "keyword", 
  "info" -> "OutputAutoOverwrite is an option for notebooks that specifies \
whether the output of a command should"|>, 
 <|"label" -> "OutputControllabilityMatrix", "type" -> "keyword", 
  "info" -> "OutputControllabilityMatrix[ssm] gives the output \
controllability matrix of the state-space model ss"|>, 
 <|"label" -> "OutputControllableModelQ", "type" -> "keyword", 
  "info" -> "OutputControllableModelQ[ssm] gives True if the state-space \
model ssm is output controllable, and Fa"|>, <|"label" -> "OutputForm", 
  "type" -> "keyword", "info" -> "OutputForm[expr] prints as a \
two-dimensional representation of expr using only keyboard characters. "|>, 
 <|"label" -> "OutputNamePacket", "type" -> "keyword", 
  "info" -> "OutputNamePacket[string] is a WSTP packet that contains in \
string the name assigned to the next outp"|>, <|"label" -> "OutputPorts", 
  "type" -> "keyword", "info" -> "OutputPorts is an option to specify the \
number, names or shapes of output ports for some neural net "|>, 
 <|"label" -> "OutputResponse", "type" -> "keyword", 
  "info" -> "OutputResponse[sys, u, {t, t   , t   }] gives the numeric output \
response of systems model sys to th"|>, <|"label" -> "OutputSizeLimit", 
  "type" -> "keyword", "info" -> "OutputSizeLimit is an option for notebooks \
that specifies the maximum size in bytes of expressions t"|>, 
 <|"label" -> "OutputStream", "type" -> "keyword", 
  "info" -> "OutputStream[\"name\", n] is an object that represents an output \
stream for functions such as Write. "|>, <|"label" -> "OverBar", 
  "type" -> "keyword", "info" -> 
   "OverBar[expr] displays with a bar over expr."|>, 
 <|"label" -> "OverDot", "type" -> "keyword", 
  "info" -> "OverDot[expr] displays with a dot over expr."|>, 
 <|"label" -> "Overflow", "type" -> "keyword", 
  "info" -> "Overflow[] represents a number too large to represent explicitly \
on your computer system."|>, <|"label" -> "OverHat", "type" -> "keyword", 
  "info" -> "OverHat[expr] displays with a hat over expr."|>, 
 <|"label" -> "Overlaps", "type" -> "keyword", "info" -> "Overlaps is an \
option to string and sequence functions that specifies how to treat \
overlapping subst"|>, <|"label" -> "Overlay", "type" -> "keyword", 
  "info" -> "Overlay[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] displays as an \
overlay of all the expr .Overlay[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {i, j,"|>, 
 <|"label" -> "OverlayVideo", "type" -> "keyword", 
  "info" -> "OverlayVideo[background, o] gives the result of overlaying o \
onto a background video or image backgr"|>, <|"label" -> "Overscript", 
  "type" -> "keyword", "info" -> "                                            \
  y\nOverscript[x, y] is an object that formats as x. "|>, 
 <|"label" -> "OverTilde", "type" -> "keyword", 
  "info" -> "OverTilde[expr] displays with a tilde over expr."|>, 
 <|"label" -> "OverVector", "type" -> "keyword", 
  "info" -> "OverVector[expr] displays with a right vector over expr."|>, 
 <|"label" -> "OverwriteTarget", "type" -> "keyword", 
  "info" -> "OverwriteTarget is an option for functions like CopyFile that \
specifies whether to overwrite if targ"|>, <|"label" -> "OwenT", 
  "type" -> "keyword", "info" -> 
   "OwenT[x, a] gives Owen's T function T(x, a)."|>, 
 <|"label" -> "OwnValues", "type" -> "keyword", 
  "info" -> "OwnValues[x] gives a list of transformation rules corresponding \
to all ownvalues defined for the sym"|>, <|"label" -> "PackingMethod", 
  "type" -> "keyword", "info" -> "PackingMethod is an option for GraphPlot \
and related functions that specifies how disconnected compo"|>, 
 <|"label" -> "PackPaclet", "type" -> "keyword", 
  "info" -> "The experimental function PackPaclet is now obsolete and is \
superseded by CreatePacletArchive."|>, <|"label" -> "PacletDataRebuild", 
  "type" -> "keyword", "info" -> "PacletDataRebuild[] rescans all the \
installed paclets to rebuild the internal cache of paclet data."|>, 
 <|"label" -> "PacletDirectoryAdd", "type" -> "keyword", 
  "info" -> "The experimental function PacletDirectoryAdd is now obsolete and \
is superseded by PacletDirectoryLoa"|>, <|"label" -> "PacletDirectoryLoad", 
  "type" -> "keyword", "info" -> "PacletDirectoryLoad[dir] makes paclets in \
dir visible in the current session.PacletDirectoryLoad[{di"|>, 
 <|"label" -> "PacletDirectoryRemove", "type" -> "keyword", 
  "info" -> "StringTemplate[The experimental function `1` is now obsolete and \
is superseded by `2`., PacletDirect"|>, <|"label" -> "PacletDirectoryUnload", 
  "type" -> "keyword", "info" -> "PacletDirectoryUnload[dir] makes paclets in \
dir no longer visible in the current session.PacletDirec"|>, 
 <|"label" -> "PacletDisable", "type" -> "keyword", 
  "info" -> "PacletDisable[paclet] disables an installed paclet."|>, 
 <|"label" -> "PacletEnable", "type" -> "keyword", 
  "info" -> "PacletEnable[paclet] enables a previously disabled paclet."|>, 
 <|"label" -> "PacletFind", "type" -> "keyword", 
  "info" -> "PacletFind[\"name\"] gives a list of installed paclets that \
match \"name\".PacletFind[\"name\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \"version\""|>, 
 <|"label" -> "PacletFindRemote", "type" -> "keyword", 
  "info" -> "PacletFindRemote[\"name\"] gives a list of paclets that match \
\"name\" available on known paclet sites.P"|>, 
 <|"label" -> "PacletInformation", "type" -> "keyword", 
  "info" -> "The experimental function PacletInformation is now obsolete. Use \
Information[PacletObject[\"pacletnam"|>, <|"label" -> "PacletInstall", 
  "type" -> "keyword", "info" -> "PacletInstall[paclet] installs or updates \
paclet.PacletInstall[task] waits for completion of the tas"|>, 
 <|"label" -> "PacletInstallSubmit", "type" -> "keyword", 
  "info" -> 
   "PacletInstallSubmit[paclet] asynchronously installs or updates paclet."|>\
, <|"label" -> "PacletNewerQ", "type" -> "keyword", 
  "info" -> "PacletNewerQ[paclet , paclet ] returns True if paclet  has a \
higher version number than paclet , and"|>, <|"label" -> "PacletObject", 
  "type" -> "keyword", "info" -> "PacletObject[...] is the representation of \
a paclet in the Wolfram Language."|>, <|"label" -> "PacletObjectQ", 
  "type" -> "keyword", "info" -> "PacletObjectQ[expr] returns True or False \
depending on whether its argument is a PacletObject expres"|>, 
 <|"label" -> "PacletSite", "type" -> "keyword", 
  "info" -> "PacletSite is an option for PacletInstall and \
PacletInstallSubmit that specifies the URL of a paclet"|>, 
 <|"label" -> "PacletSiteObject", "type" -> "keyword", 
  "info" -> "PacletSiteObject[assoc] represents a site from which paclets can \
be automatically downloaded."|>, <|"label" -> "PacletSiteRegister", 
  "type" -> "keyword", "info" -> "PacletSiteRegister[url] registers url as a \
known paclet site.PacletSiteRegister[url, name] registers"|>, 
 <|"label" -> "PacletSites", "type" -> "keyword", 
  "info" -> 
   "PacletSites[] gives the list of all paclet sites known to your system."|>\
, <|"label" -> "PacletSiteUnregister", "type" -> "keyword", 
  "info" -> "PacletSiteUnregister[url] removes url from the list of \
registered paclet sites.PacletSiteUnregister["|>, 
 <|"label" -> "PacletSiteUpdate", "type" -> "keyword", 
  "info" -> "PacletSiteUpdate[site] acquires and caches current information \
about the available paclets on the gi"|>, <|"label" -> "PacletSymbol", 
  "type" -> "keyword", "info" -> "PacletSymbol[paclet, \"sym\"] gives the \
symbol named \"sym\" in the primary context of paclet.PacletSymb"|>, 
 <|"label" -> "PacletUninstall", "type" -> "keyword", 
  "info" -> "PacletUninstall[paclet] uninstalls a paclet."|>, 
 <|"label" -> "PacletUpdate", "type" -> "keyword", 
  "info" -> "The experimental function PacletUpdate is now obsolete and is \
superseded by PacletInstall."|>, <|"label" -> "PaddedForm", 
  "type" -> "keyword", "info" -> "PaddedForm[expr, n] prints with all numbers \
in expr padded to leave room for a total of n digits. Pa"|>, 
 <|"label" -> "Padding", "type" -> "keyword", "info" -> "Padding is an option \
to various array and image operations that specifies what padding to use when \
e"|>, <|"label" -> "PaddingLayer", "type" -> "keyword", 
  "info" -> "PaddingLayer[{{m , n }, {m , n }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
net layer that pads an input array with m  elemen"|>, 
 <|"label" -> "PaddingSize", "type" -> "keyword", 
  "info" -> "PaddingSize is an option in AudioDelay and other functions that \
specifies the amount of padding."|>, <|"label" -> "PadeApproximant", 
  "type" -> "keyword", "info" -> "PadeApproximant[expr, {x, x , {m, n}}] \
gives the Pad\[CapitalATilde]\203\[CapitalAHat]\[Copyright] approximant to \
expr about the point x = x , wi"|>, <|"label" -> "PadLeft", 
  "type" -> "keyword", "info" -> "PadLeft[list, n] makes a list of length n \
by padding list with zeros on the left. PadLeft[list, n, x"|>, 
 <|"label" -> "PadRight", "type" -> "keyword", "info" -> "PadRight[list, n] \
makes a list of length n by padding list with zeros on the right. \
PadRight[list, n"|>, <|"label" -> "PageBreakAbove", "type" -> "keyword", 
  "info" -> "PageBreakAbove is an option for Cell which specifies whether a \
page break should be made immediately"|>, <|"label" -> "PageBreakBelow", 
  "type" -> "keyword", "info" -> "PageBreakBelow is an option for Cell which \
specifies whether a page break should be made immediately"|>, 
 <|"label" -> "PageBreakWithin", "type" -> "keyword", 
  "info" -> "PageBreakWithin is an option for Cell which specifies whether a \
page break should be allowed within "|>, <|"label" -> "PageFooterLines", 
  "type" -> "keyword", "info" -> "PageFooterLines is an option for notebooks \
that specifies whether a horizontal line is inserted at t"|>, 
 <|"label" -> "PageFooters", "type" -> "keyword", 
  "info" -> "PageFooters is an option for notebooks that specifies what \
should be inserted as the footer of each "|>, <|"label" -> "PageHeaderLines", 
  "type" -> "keyword", "info" -> "PageHeaderLines is an option for notebooks \
that specifies whether a horizontal line is inserted at t"|>, 
 <|"label" -> "PageHeaders", "type" -> "keyword", 
  "info" -> "PageHeaders is an option for notebooks that specifies what \
should be inserted as the header of each "|>, 
 <|"label" -> "PageRankCentrality", "type" -> "keyword", 
  "info" -> "PageRankCentrality[g, \[CapitalATilde]\216\\[PlusMinus]] gives a \
list of page-rank centralities for the vertices in the graph g and "|>, 
 <|"label" -> "PageTheme", "type" -> "keyword", 
  "info" -> "PageTheme is an option for FormObject, GalleryView, and related \
functions that specifies an overall "|>, <|"label" -> "Pagination", 
  "type" -> "keyword", "info" -> "Pagination is an option for GalleryView and \
related functions that specifies how pagination should b"|>, 
 <|"label" -> "PairCorrelationG", "type" -> "keyword", 
  "info" -> "PairCorrelationG[pdata, r] estimates the pair correlation \
function g(r) for point data pdata at radi"|>, 
 <|"label" -> "PairedBarChart", "type" -> "keyword", 
  "info" -> "PairedBarChart[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {z , z , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a paired \
bar chart with bar lengths y ,  y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 and z "|>, 
 <|"label" -> "PairedHistogram", "type" -> "keyword", 
  "info" -> "PairedHistogram[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a paired \
histogram of the values x  and y .PairedHis"|>, 
 <|"label" -> "PairedSmoothHistogram", "type" -> "keyword", 
  "info" -> "PairedSmoothHistogram[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a paired \
smooth histogram of the values x  and"|>, <|"label" -> "PairedTTest", 
  "type" -> "keyword", "info" -> "PairedTTest[data] tests whether the mean of \
data is zero. PairedTTest[{data , data }] tests whether "|>, 
 <|"label" -> "PairedZTest", "type" -> "keyword", 
  "info" -> "PairedZTest[data] tests whether the mean of the data is zero. \
PairedZTest[{data , data }] tests whet"|>, <|"label" -> "PalindromeQ", 
  "type" -> "keyword", "info" -> "PalindromeQ[list] returns True if the given \
list is identical to Reverse[list], and False otherwise."|>, 
 <|"label" -> "Pane", "type" -> "keyword", "info" -> "Pane[expr] displays as \
a pane containing expr. Pane[expr, w] makes the pane be w printer's points \
wi"|>, <|"label" -> "Panel", "type" -> "keyword", 
  "info" -> "Panel[expr] displays as a panel containing expr. Panel[expr, \
title] gives the panel the specified ti"|>, <|"label" -> "Paneled", 
  "type" -> "keyword", "info" -> "Paneled is an option for Manipulate and \
related functions that specifies whether to give the output "|>, 
 <|"label" -> "PaneSelector", "type" -> "keyword", 
  "info" -> "PaneSelector[{val  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] expr , val  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] represents \
an object that displays as a pane contai"|>, 
 <|"label" -> "ParabolicCylinderD", "type" -> "keyword", 
  "info" -> "ParabolicCylinderD[\[CapitalATilde]\216\[CapitalAHat]\275, z] \
gives the parabolic cylinder function D (z). \n                             "\
|>, <|"label" -> "ParallelArray", "type" -> "keyword", 
  "info" -> "ParallelArray[f, n] generates in parallel a list of length n, \
with elements f[i], evaluated.Parallel"|>, <|"label" -> "ParallelAxisPlot", 
  "type" -> "keyword", "info" -> "ParallelAxisPlot[{{y  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, {y  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y  }}] generates \
a parallel axis plot for the points {y"|>, <|"label" -> "ParallelCombine", 
  "type" -> "keyword", "info" -> "ParallelCombine[f, h[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], comb] evaluates \
f[h[e , e , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]] in \
parallel by distributing parts o"|>, <|"label" -> "ParallelDo", 
  "type" -> "keyword", "info" -> "ParallelDo[expr, {i   }] evaluates expr in \
parallel i    times. ParallelDo[expr, {i, i   }] evaluate"|>, 
 <|"label" -> "Parallelepiped", "type" -> "keyword", 
  "info" -> "Parallelepiped[p, {v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, v }] represents \
a parallelepiped with origin p and directions v .\n        "|>, 
 <|"label" -> "ParallelEvaluate", "type" -> "keyword", 
  "info" -> "ParallelEvaluate[expr] evaluates the expression expr on all \
available parallel kernels and returns t"|>, <|"label" -> "Parallelization", 
  "type" -> "keyword", "info" -> "Parallelization is an option for Compile \
that specifies whether it should create a compiled function"|>, 
 <|"label" -> "Parallelize", "type" -> "keyword", 
  "info" -> 
   "Parallelize[expr] evaluates expr using automatic parallelization."|>, 
 <|"label" -> "ParallelMap", "type" -> "keyword", 
  "info" -> "ParallelMap[f, expr] applies f in parallel to each element on \
the first level in expr.ParallelMap[f,"|>, <|"label" -> "ParallelNeeds", 
  "type" -> "keyword", "info" -> "ParallelNeeds[\"context`\"] evaluates \
Needs[\"context`\"] on all available parallel kernels."|>, 
 <|"label" -> "Parallelogram", "type" -> "keyword", 
  "info" -> "Parallelogram[p, {v , v }] represents a parallelogram with \
origin p and directions v  and v .\n      "|>, 
 <|"label" -> "ParallelSubmit", "type" -> "keyword", 
  "info" -> "ParallelSubmit[expr] submits expr for evaluation on the next \
available parallel kernel and returns a"|>, <|"label" -> "ParallelTable", 
  "type" -> "keyword", "info" -> "ParallelTable[expr, {i   }] generates in \
parallel a list of i    copies of expr.ParallelTable[expr, "|>, 
 <|"label" -> "ParallelTry", "type" -> "keyword", 
  "info" -> "ParallelTry[f, {arg , arg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] evaluates f[arg \
] in parallel, returning the first result received.P"|>, 
 <|"label" -> "ParameterEstimator", "type" -> "keyword", 
  "info" -> "ParameterEstimator is an option to EstimatedDistribution and \
FindDistributionParameters that specifi"|>, 
 <|"label" -> "ParameterMixtureDistribution", "type" -> "keyword", 
  "info" -> "ParameterMixtureDistribution[dist[\[CapitalATilde]\216\
\[CapitalAHat]\[Cedilla]], \[CapitalATilde]\216\[CapitalAHat]\[Cedilla] \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 wdist] represents a \
parameter mixture distribution where t"|>, <|"label" -> "ParameterVariables", 
  "type" -> "keyword", "info" -> "ParameterVariables is an option for \
GroebnerBasis and PolynomialReduce. These variables will always "|>, 
 <|"label" -> "ParametricConvexOptimization", "type" -> "keyword", 
  "info" -> "ParametricConvexOptimization[f, cons, vars, pars] gives a \
ParametricFunction object that finds value"|>, 
 <|"label" -> "ParametricFunction", "type" -> "keyword", 
  "info" -> "ParametricFunction[pars, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
function that computes a solution when evaluated with numer"|>, 
 <|"label" -> "ParametricNDSolve", "type" -> "keyword", 
  "info" -> "ParametricNDSolve[eqns, u, {x, x   , x   }, pars] finds a \
numerical solution to the ordinary differe"|>, 
 <|"label" -> "ParametricNDSolveValue", "type" -> "keyword", 
  "info" -> "ParametricNDSolveValue[eqns, expr, {x, x   , x   }, pars] gives \
the value of expr with functions det"|>, <|"label" -> "ParametricPlot", 
  "type" -> "keyword", "info" -> "ParametricPlot[{f , f }, {u, u   , u   }] \
generates a parametric plot of a curve with x and y coordi"|>, 
 <|"label" -> "ParametricPlot3D", "type" -> "keyword", 
  "info" -> "ParametricPlot3D[{f , f , f }, {u, u   , u   }] produces a \
three-dimensional space curve parametrize"|>, 
 <|"label" -> "ParametricRampLayer", "type" -> "keyword", 
  "info" -> "ParametricRampLayer[] represents a net layer that computes a \
leaky ReLU activation with a slope that"|>, <|"label" -> "ParametricRegion", 
  "type" -> "keyword", "info" -> "                                            \
                       n\nParametricRegion[{f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f }, {"|>, 
 <|"label" -> "ParentCell", "type" -> "keyword", 
  "info" -> "ParentCell[obj] returns the CellObject that contains obj."|>, 
 <|"label" -> "ParentDirectory", "type" -> "keyword", 
  "info" -> "ParentDirectory[] gives the parent of the current working \
directory. ParentDirectory[\"dir\"] gives th"|>, 
 <|"label" -> "Parenthesize", "type" -> "keyword", 
  "info" -> "Parenthesize[ expr, fmt, prec, group] or Parenthesize[ expr, \
fmt, {prec, group}] will represent expr"|>, 
 <|"label" -> "ParetoDistribution", "type" -> "keyword", 
  "info" -> "ParetoDistribution[k, \[CapitalATilde]\216\\[PlusMinus]] \
represents a Pareto distribution with minimum value parameter k and shape p"|>\
, <|"label" -> "ParetoPickandsDistribution", "type" -> "keyword", 
  "info" -> "ParetoPickandsDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\274, \[CapitalATilde]\217\[CapitalAHat]\203, \
\[CapitalATilde]\216\[CapitalAHat]\276] gives a \
Pareto\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Pickands \
distribution with location parameter \[CapitalATilde]\216\[CapitalAHat]\274, \
"|>, <|"label" -> "ParkData", "type" -> "keyword", 
  "info" -> "ParkData[entity, property] gives the value of the specified \
property for the park entity.ParkData[{e"|>, 
 <|"label" -> "Part", "type" -> "keyword", "info" -> "                        \
               th\nexpr[[i]] or Part[expr, i] gives the \
i\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    part of expr. ex"|>, 
 <|"label" -> "PartBehavior", "type" -> "keyword", 
  "info" -> "PartBehavior is an option to Query and related functions that \
specifies how nonexistent parts should"|>, 
 <|"label" -> "PartialCorrelationFunction", "type" -> "keyword", 
  "info" -> "PartialCorrelationFunction[data, hspec] estimates the partial \
correlation function at lags hspec fro"|>, 
 <|"label" -> "ParticleAcceleratorData", "type" -> "keyword", 
  "info" -> "ParticleAcceleratorData[entity, property] gives the value of the \
specified property for the particle"|>, <|"label" -> "ParticleData", 
  "type" -> "keyword", "info" -> "ParticleData[name, \"property\"] gives the \
specified property for a subatomic particle or family of pa"|>, 
 <|"label" -> "Partition", "type" -> "keyword", 
  "info" -> "Partition[list, n] partitions list into nonoverlapping sublists \
of length n. Partition[list, n, d] g"|>, <|"label" -> "PartitionGranularity", 
  "type" -> "keyword", "info" -> "PartitionGranularity is an option for audio \
analysis functions that specifies the partitioning of th"|>, 
 <|"label" -> "PartitionsP", "type" -> "keyword", 
  "info" -> "PartitionsP[n] gives the number p (n) of unrestricted partitions \
of the integer n. "|>, <|"label" -> "PartitionsQ", "type" -> "keyword", 
  "info" -> "PartitionsQ[n] gives the number q (n) of partitions of the \
integer n into distinct parts. "|>, <|"label" -> "PartLayer", 
  "type" -> "keyword", "info" -> "                                            \
         th\nPartLayer[i] represents a net layer that giv"|>, 
 <|"label" -> "PartOfSpeech", "type" -> "keyword", 
  "info" -> "PartOfSpeech[\"word\"] returns the possible parts of speech for \
the specified word."|>, <|"label" -> "ParzenWindow", "type" -> "keyword", 
  "info" -> "ParzenWindow[x] represents a Parzen window function of x."|>, 
 <|"label" -> "PascalDistribution", "type" -> "keyword", 
  "info" -> "PascalDistribution[n, p] represents a Pascal distribution with \
parameters n and p."|>, <|"label" -> "EventHandler", "type" -> "keyword", 
  "info" -> "EventHandler[ev_String | _EventObject, {handlers___Rule | \
handlers___RuleDelayed}] ev_ binds an event object represented as a string or \
EventObject or anything compatible with this type to a single or multiple \
handling functions (multiple - only if patterns do not intersect). Returns an \
original event-object ev"|>, <|"label" -> "PassEventsDown", 
  "type" -> "keyword", "info" -> "PassEventsDown is an option to EventHandler \
which specifies whether events handled by a particular e"|>, 
 <|"label" -> "PassEventsUp", "type" -> "keyword", 
  "info" -> "PassEventsUp is an option to EventHandler that specifies whether \
events handled by a particular even"|>, <|"label" -> "Paste", 
  "type" -> "keyword", "info" -> "Paste[expr] pastes expr at the current \
insertion point in the input notebook. Paste[notebook, expr] "|>, 
 <|"label" -> "PasteButton", "type" -> "keyword", 
  "info" -> "PasteButton[expr] represents a button that pastes expr whenever \
it is pressed. PasteButton[label, ex"|>, <|"label" -> "Path", 
  "type" -> "keyword", "info" -> "Path is an option for Get and related \
functions which gives a list of directories to search in attem"|>, 
 <|"label" -> "PathGraph", "type" -> "keyword", 
  "info" -> "PathGraph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a path \
with vertices v  and edges between v  and v       .PathGraph[{e"|>, 
 <|"label" -> "PathGraphQ", "type" -> "keyword", 
  "info" -> 
   "PathGraphQ[g] yields True if the graph g is a path and False otherwise."|>\
, <|"label" -> "Pattern", "type" -> "keyword", 
  "info" -> "sym : obj or Pattern[sym, obj] represents the pattern object \
obj, assigned the name sym. "|>, <|"label" -> "PatternFilling", 
  "type" -> "keyword", "info" -> "PatternFilling[obj] is a two-dimensional \
graphics directive specifying that obj should be used to fi"|>, 
 <|"label" -> "PatternSequence", "type" -> "keyword", 
  "info" -> "PatternSequence[p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is a pattern \
object that represents a sequence of arguments matching p , "|>, 
 <|"label" -> "PatternTest", "type" -> "keyword", 
  "info" -> "p ? test is a pattern object that stands for any expression that \
matches p, and on which the applica"|>, <|"label" -> "PauliMatrix", 
  "type" -> "keyword", "info" -> "                           \
th\nPauliMatrix[k] gives the \
k\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    Pauli spin matrix \
\[CapitalATilde]\217\[CapitalAHat]\203 .\n                  "|>, 
 <|"label" -> "PaulWavelet", "type" -> "keyword", 
  "info" -> "PaulWavelet[] represents a Paul wavelet of order \
4.PaulWavelet[n] represents a Paul wavelet of order"|>, 
 <|"label" -> "Pause", "type" -> "keyword", 
  "info" -> "Pause[n] pauses for at least n seconds. "|>, 
 <|"label" -> "PDF", "type" -> "keyword", "info" -> "PDF[dist, x] gives the \
probability density function for the distribution dist evaluated at \
x.PDF[dis"|>, <|"label" -> "PeakDetect", "type" -> "keyword", 
  "info" -> "PeakDetect[list] gives a binary list in which 1s correspond to \
peak positions in list.PeakDetect[lis"|>, <|"label" -> "PeanoCurve", 
  "type" -> "keyword", "info" -> "                                            \
             th\nPeanoCurve[n] gives the line segments re"|>, 
 <|"label" -> "PearsonChiSquareTest", "type" -> "keyword", 
  "info" -> "                                                                 \
                        2          "|>, 
 <|"label" -> "PearsonCorrelationTest", "type" -> "keyword", 
  "info" -> "PearsonCorrelationTest[v , v ] tests whether the vectors v  and \
v  are linearly independent.PearsonC"|>, <|"label" -> "PearsonDistribution", 
  "type" -> "keyword", "info" -> "PearsonDistribution[a , a , b , b , b ] \
represents a distribution of the Pearson family with paramet"|>, 
 <|"label" -> "PercentForm", "type" -> "keyword", 
  "info" -> "PercentForm[expr] prints with numbers in expr given as \
percentages.PercentForm[expr, n] prints with "|>, 
 <|"label" -> "PerfectNumber", "type" -> "keyword", 
  "info" -> "                             th\nPerfectNumber[n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    perfect number."|>, 
 <|"label" -> "PerfectNumberQ", "type" -> "keyword", 
  "info" -> "PerfectNumberQ[n] returns True if n is a perfect number, and \
False otherwise."|>, <|"label" -> "PerformanceGoal", "type" -> "keyword", 
  "info" -> "PerformanceGoal is an option for various algorithmic and \
presentational functions that specifies wha"|>, 
 <|"label" -> "Perimeter", "type" -> "keyword", 
  "info" -> "Perimeter[reg] gives the perimeter of the two-dimensional region \
reg.Perimeter[{x , x }, {s, s   , s"|>, 
 <|"label" -> "PeriodicBoundaryCondition", "type" -> "keyword", 
  "info" -> "PeriodicBoundaryCondition[u[x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], pred, f] \
represents a periodic boundary condition = u(x      ) ="|>, 
 <|"label" -> "Periodogram", "type" -> "keyword", 
  "info" -> "Periodogram[list] plots the squared magnitude of the discrete \
Fourier transform (power spectrum) of "|>, <|"label" -> "PeriodogramArray", 
  "type" -> "keyword", "info" -> "PeriodogramArray[list] returns the squared \
magnitude of the discrete Fourier transform (power spectr"|>, 
 <|"label" -> "Permanent", "type" -> "keyword", 
  "info" -> "Permanent[m] gives the permanent of the square matrix m. "|>, 
 <|"label" -> "PermissionsGroup", "type" -> "keyword", 
  "info" -> "PermissionsGroup[\"name\"] represents a permissions group with \
the specified name, owned by the curren"|>, 
 <|"label" -> "PermissionsGroupMemberQ", "type" -> "keyword", 
  "info" -> "PermissionsGroupMemberQ[group, user] returns True if user is a \
member of the permissions group group"|>, <|"label" -> "PermissionsGroups", 
  "type" -> "keyword", "info" -> "PermissionsGroups[] gives a list of \
permissions groups belonging to the current user."|>, 
 <|"label" -> "PermissionsKeys", "type" -> "keyword", 
  "info" -> "PermissionsKeys[] gives a list of all valid permissions keys \
created by the currently authenticated "|>, <|"label" -> "PermutationCycles", 
  "type" -> "keyword", "info" -> "PermutationCycles[perm] gives a disjoint \
cycle representation of permutation perm."|>, 
 <|"label" -> "PermutationCyclesQ", "type" -> "keyword", 
  "info" -> "PermutationCyclesQ[expr] returns True if expr is a permutation \
in disjoint cyclic form, and False ot"|>, <|"label" -> "PermutationGroup", 
  "type" -> "keyword", "info" -> "PermutationGroup[{perm , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, perm }] \
represents the group generated by multiplication of the permutat"|>, 
 <|"label" -> "PermutationLength", "type" -> "keyword", 
  "info" -> "PermutationLength[perm] returns the number of integers moved by \
the permutation perm."|>, <|"label" -> "PermutationList", 
  "type" -> "keyword", "info" -> "PermutationList[perm] returns a permutation \
list representation of permutation perm.PermutationList["|>, 
 <|"label" -> "PermutationListQ", "type" -> "keyword", 
  "info" -> "PermutationListQ[expr] returns True if expr is a valid \
permutation list and False otherwise."|>, <|"label" -> "PermutationMax", 
  "type" -> "keyword", "info" -> "PermutationMax[perm] returns the largest \
integer moved by the permutation perm."|>, <|"label" -> "PermutationMin", 
  "type" -> "keyword", "info" -> "PermutationMin[perm] returns the smallest \
integer moved by the permutation perm."|>, <|"label" -> "PermutationOrder", 
  "type" -> "keyword", "info" -> 
   "PermutationOrder[perm] gives the order of permutation perm."|>, 
 <|"label" -> "PermutationPower", "type" -> "keyword", 
  "info" -> "                                      th\nPermutationPower[perm, \
n] gives the n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    \
permutation power "|>, <|"label" -> "PermutationProduct", 
  "type" -> "keyword", "info" -> 
   "PermutationProduct[a, b, c] gives the product of permutations a, b, c."|>\
, <|"label" -> "PermutationReplace", "type" -> "keyword", 
  "info" -> "PermutationReplace[expr, perm] replaces each part in expr by its \
image under the permutation perm.Pe"|>, <|"label" -> "Permutations", 
  "type" -> "keyword", "info" -> "Permutations[list] generates a list of all \
possible permutations of the elements in list. Permutatio"|>, 
 <|"label" -> "PermutationSupport", "type" -> "keyword", 
  "info" -> 
   "PermutationSupport[perm] returns the support of the permutation perm."|>, 
 <|"label" -> "Permute", "type" -> "keyword", "info" -> "Permute[expr, perm] \
permutes the positions of the elements of expr according to the permutation \
perm"|>, <|"label" -> "PeronaMalikFilter", "type" -> "keyword", 
  "info" -> "PeronaMalikFilter[image] applies a \
Perona\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Malik \
diffusion filter to image.PeronaMalikFilter[image, t"|>, 
 <|"label" -> "PerpendicularBisector", "type" -> "keyword", 
  "info" -> "PerpendicularBisector[{p , p }] gives the perpendicular bisector \
of the line segment connecting p  a"|>, <|"label" -> "PersistenceLocation", 
  "type" -> "keyword", "info" -> "PersistenceLocation[\"type\"] represents a \
persistence location of the given type.PersistenceLocation["|>, 
 <|"label" -> "PersistenceTime", "type" -> "keyword", 
  "info" -> "PersistenceTime is an option for various functions that \
specifies when a persistent value should be "|>, 
 <|"label" -> "PersistentObject", "type" -> "keyword", 
  "info" -> "PersistentObject[\"name\", loc] represents a persistent object \
stored at persistence location loc."|>, <|"label" -> "PersistentObjects", 
  "type" -> "keyword", "info" -> "PersistentObjects[] gives all persistent \
objects in all locations in ECPersistencePath.PersistentObje"|>, 
 <|"label" -> "PersistentSymbol", "type" -> "keyword", 
  "info" -> "PersistentSymbol[\"name\"] represents the persistent symbol \
associated with the key \"name\".PersistentS"|>, 
 <|"label" -> "PersistentValue", "type" -> "keyword", 
  "info" -> "PersistentValue[\"name\"] represents the persistent value \
associated with the key \"name\".PersistentVal"|>, 
 <|"label" -> "PersonData", "type" -> "keyword", 
  "info" -> "PersonData[entity, property] gives the value of the specified \
property for the person entity.PersonD"|>, <|"label" -> "PERTDistribution", 
  "type" -> "keyword", "info" -> "PERTDistribution[{min, max}, c] represents \
a PERT distribution with range min to max and mode at c.P"|>, 
 <|"label" -> "PetersenGraph", "type" -> "keyword", 
  "info" -> "PetersenGraph[n, k] gives the generalized Petersen graph P    \
.\n                                    "|>, <|"label" -> "PhaseMargins", 
  "type" -> "keyword", "info" -> "PhaseMargins[lsys] gives the phase margins \
of the linear time-invariant system lsys."|>, 
 <|"label" -> "PhaseRange", "type" -> "keyword", 
  "info" -> "PhaseRange is an option to BodePlot and NicholsPlot that \
specifies the phase range."|>, <|"label" -> "Pi", "type" -> "keyword", 
  "info" -> "Pi is \[CapitalATilde]\217\[CapitalAHat]\200, with numerical \
value \[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 3.14159. "|>\
, <|"label" -> "Pick", "type" -> "keyword", "info" -> "Pick[list, sel] picks \
out those elements of list for which the corresponding element of sel is \
True."|>, <|"label" -> "PIDData", "type" -> "keyword", 
  "info" -> "PIDData[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] represents PID data generated by PIDTune function."|>, 
 <|"label" -> "PIDDerivativeFilter", "type" -> "keyword", 
  "info" -> "PIDDerivativeFilter is an option to PIDTune that controls the \
filtering used for derivative terms."|>, <|"label" -> "PIDFeedforward", 
  "type" -> "keyword", "info" -> "PIDFeedforward is an option to PIDTune that \
controls the reference weights used for the feedforward "|>, 
 <|"label" -> "PIDTune", "type" -> "keyword", "info" -> "PIDTune[sys] gives a \
feedback PID controller for the system sys. PIDTune[sys, \"carch\"] gives a \
contr"|>, <|"label" -> "Piecewise", "type" -> "keyword", 
  "info" -> "Piecewise[{{val , cond }, {val , cond }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
piecewise function with values val  in the"|>, 
 <|"label" -> "PiecewiseExpand", "type" -> "keyword", 
  "info" -> "PiecewiseExpand[expr] expands nested piecewise functions in expr \
to give a single piecewise function"|>, <|"label" -> "PieChart", 
  "type" -> "keyword", "info" -> "PieChart[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }] makes a pie \
chart with sector angle proportional to y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.PieChart[{\
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246,"|>, 
 <|"label" -> "PieChart3D", "type" -> "keyword", 
  "info" -> "PieChart3D[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a 3D pie \
chart with sector angle proportional to y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 .PieChart3D"|>, 
 <|"label" -> "PillaiTrace", "type" -> "keyword", 
  "info" -> "PillaiTrace[m , m ] gives Pillai's trace for the matrices m  and \
m .\n             1   2             "|>, <|"label" -> "PillaiTraceTest", 
  "type" -> "keyword", "info" -> "PillaiTraceTest[m , m ] tests whether the \
matrices m  and m  are \
independent.PillaiTraceTest[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246, \"pro"|>, <|"label" -> "PingTime", "type" -> "keyword", 
  "info" -> "PingTime[host] gives the round-trip ping time for the specified \
network host.PingTime[host, n] gives"|>, <|"label" -> "Pink", 
  "type" -> "keyword", "info" -> 
   "Pink represents the color pink in graphics or style specifications. "|>, 
 <|"label" -> "PitchRecognize", "type" -> "keyword", 
  "info" -> "PitchRecognize[audio] recognizes the main pitch in audio, \
returning it as a TimeSeries object. Pitch"|>, 
 <|"label" -> "Pivoting", "type" -> "keyword", "info" -> "Pivoting is an \
option to certain matrix decomposition functions. With Pivoting -> False, no \
pivoting"|>, <|"label" -> "PixelValue", "type" -> "keyword", 
  "info" -> "PixelValue[image, ppos] gives the pixel value of image at \
position pos.PixelValue[image, ppos, \"type"|>, 
 <|"label" -> "PixelValuePositions", "type" -> "keyword", 
  "info" -> "PixelValuePositions[image, val] returns a list of pixel \
positions in image that exactly match the va"|>, 
 <|"label" -> "Placed", "type" -> "keyword", "info" -> "Placed[expr, pos] \
represents an expression expr placed at relative position pos in a chart or \
other "|>, <|"label" -> "Placeholder", "type" -> "keyword", 
  "info" -> "Placeholder[name] represents a placeholder labeled with name \
that indicates a place to type.Placehol"|>, <|"label" -> "PlaceholderLayer", 
  "type" -> "keyword", "info" -> "PlaceholderLayer[] represents a net layer \
whose operation is undefined.PlaceholderLayer[\"tag\", assoc"|>, 
 <|"label" -> "PlaceholderReplace", "type" -> "keyword", 
  "info" -> "PlaceholderReplace is an option to Paste that determines whether \
to replace a selection placeholder "|>, <|"label" -> "Plain", 
  "type" -> "keyword", "info" -> 
   "Plain represents a font that is not bold, italic, or underlined."|>, 
 <|"label" -> "PlanarAngle", "type" -> "keyword", 
  "info" -> "PlanarAngle[p \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {q , q }] gives \
the angle between the \
half\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220lines from p \
through q  and q .PlanarAngl"|>, <|"label" -> "PlanarFaceList", 
  "type" -> "keyword", "info" -> 
   "PlanarFaceList[g] gives the list of faces of the planar graph g."|>, 
 <|"label" -> "PlanarGraph", "type" -> "keyword", 
  "info" -> "PlanarGraph[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a planar \
graph with edges e .PlanarGraph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] y"|>, 
 <|"label" -> "PlanarGraphQ", "type" -> "keyword", 
  "info" -> 
   "PlanarGraphQ[g] yields True if g is a planar graph and False otherwise."|>\
, <|"label" -> "PlanckRadiationLaw", "type" -> "keyword", 
  "info" -> "PlanckRadiationLaw[temperature, \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]] returns the spectral \
radiance for the specified temperature and w"|>, 
 <|"label" -> "PlaneCurveData", "type" -> "keyword", 
  "info" -> "PlaneCurveData[entity, property] gives the value of the \
specified property for the plane curve entit"|>, 
 <|"label" -> "PlanetaryMoonData", "type" -> "keyword", 
  "info" -> "PlanetaryMoonData[entity, property] gives the value of the \
specified property for the moon entity of"|>, 
 <|"label" -> "PlanetData", "type" -> "keyword", 
  "info" -> "PlanetData[entity, property] gives the value of the specified \
property for the planet entity.PlanetD"|>, <|"label" -> "PlantData", 
  "type" -> "keyword", "info" -> "PlantData[entity, property] gives the value \
of the specified property for the plant entity.PlantData"|>, 
 <|"label" -> "Play", "type" -> "keyword", "info" -> "Play[f, {t, t   , t   \
}] creates an object that plays as a sound whose amplitude is given by f as a \
"|>, <|"label" -> "PlayRange", "type" -> "keyword", 
  "info" -> "PlayRange is an option for Play and related functions which \
specifies what range of sound amplitude "|>, 
 <|"label" -> "Plot", "type" -> "keyword", "info" -> "Plot[f, {x, x   , x   \
}] generates a plot of f as a function of x from x    to x   . Plot[{f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "Plot3D", "type" -> "keyword", "info" -> "Plot3D[f, {x, x   , x \
  }, {y, y   , y   }] generates a three-dimensional plot of f as a function \
of"|>, <|"label" -> "PlotDivision", "type" -> "keyword", 
  "info" -> "PlotDivision is an option for Plot that specifies the maximum \
amount of subdivision to be used."|>, <|"label" -> "PlotJoined", 
  "type" -> "keyword", "info" -> "PlotJoined is an option for ListPlot that \
specifies whether the points plotted should be joined by a"|>, 
 <|"label" -> "PlotLabel", "type" -> "keyword", 
  "info" -> "PlotLabel is an option for graphics functions that specifies an \
overall label for a plot. "|>, <|"label" -> "PlotLabels", 
  "type" -> "keyword", "info" -> "PlotLabels is an option for visualization \
functions that specifies what labels to use for each data "|>, 
 <|"label" -> "PlotLayout", "type" -> "keyword", 
  "info" -> "PlotLayout is an option for plotting functions that specifies \
the layout of multiple components in a"|>, <|"label" -> "PlotLegends", 
  "type" -> "keyword", "info" -> "PlotLegends is an option for plot functions \
that specifies what legends to use. "|>, <|"label" -> "PlotMarkers", 
  "type" -> "keyword", "info" -> "PlotMarkers is an option for graphics \
functions like ListPlot and ListLinePlot that specifies what m"|>, 
 <|"label" -> "PlotPoints", "type" -> "keyword", 
  "info" -> "PlotPoints is an option for plotting functions that specifies \
how many initial sample points to use."|>, <|"label" -> "PlotRange", 
  "type" -> "keyword", "info" -> "PlotRange is an option for graphics \
functions that specifies what range of coordinates to include in"|>, 
 <|"label" -> "PlotRangeClipping", "type" -> "keyword", 
  "info" -> "PlotRangeClipping is an option for graphics functions that \
specifies whether graphics objects should"|>, 
 <|"label" -> "PlotRangePadding", "type" -> "keyword", 
  "info" -> "PlotRangePadding is an option for graphics functions that \
specifies how much further axes etc. shoul"|>, 
 <|"label" -> "PlotRegion", "type" -> "keyword", 
  "info" -> "PlotRegion is an option for graphics functions that specifies \
what region of the final display area "|>, <|"label" -> "PlotStyle", 
  "type" -> "keyword", "info" -> "PlotStyle is an option for plotting and \
related functions that specifies styles in which objects are"|>, 
 <|"label" -> "PlotTheme", "type" -> "keyword", 
  "info" -> "PlotTheme is an option for plotting and related functions that \
specifies an overall theme for visual"|>, <|"label" -> "Pluralize", 
  "type" -> "keyword", "info" -> "Pluralize[\"noun\"] gives the plural form \
of the English word \"noun\".Pluralize[\"noun\", n] gives the in"|>, 
 <|"label" -> "Plus", "type" -> "keyword", 
  "info" -> "x + y + z represents a sum of terms. "|>, 
 <|"label" -> "PlusMinus", "type" -> "keyword", 
  "info" -> "PlusMinus[x] displays as \[CapitalATilde]\202\\[PlusMinus] \
x.PlusMinus[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\202\\[PlusMinus] y \[CapitalATilde]\202\\[PlusMinus] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n"|>, 
 <|"label" -> "Pochhammer", "type" -> "keyword", 
  "info" -> "Pochhammer[a, n] gives the Pochhammer symbol (a) . \n            \
                                    "|>, <|"label" -> "PodStates", 
  "type" -> "keyword", "info" -> "PodStates is an option for WolframAlpha \
that determines information about the states of the pods."|>, 
 <|"label" -> "PodWidth", "type" -> "keyword", "info" -> "PodWidth is an \
option for WolframAlpha that determines the width parameters of the content \
returned "|>, <|"label" -> "Point", "type" -> "keyword", 
  "info" -> "Point[p] is a graphics and geometry primitive that represents a \
point at p. Point[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] repre"|>, 
 <|"label" -> "PointCountDistribution", "type" -> "keyword", 
  "info" -> "PointCountDistribution[pproc, reg] represents the distribution \
of point counts for the point process"|>, <|"label" -> "PointDensity", 
  "type" -> "keyword", "info" -> "PointDensity[pdata] estimates the point \
density function \[CapitalATilde]\216\[CapitalAHat]\274(x) from point data \
pdata.PointDensity[pda"|>, <|"label" -> "PointDensityFunction", 
  "type" -> "keyword", "info" -> "PointDensityFunction[\[CapitalATilde]\
\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a function whose \
values give the density at a given location."|>, 
 <|"label" -> "PointFigureChart", "type" -> "keyword", 
  "info" -> "PointFigureChart[{{date , p }, {date , p }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a point \
and figure chart with prices p  at dat"|>, <|"label" -> "PointLegend", 
  "type" -> "keyword", "info" -> "PointLegend[{col , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {lbl , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
legend that associates points of colors col  with labe"|>, 
 <|"label" -> "PointLight", "type" -> "keyword", 
  "info" -> "PointLight[col, pt] is a three-dimensional graphics directive \
that specifies the point light of colo"|>, 
 <|"label" -> "PointProcessEstimator", "type" -> "keyword", 
  "info" -> "PointProcessEstimator[] is an option to EstimatedPointProcess \
and FindPointProcessParameters that sp"|>, 
 <|"label" -> "PointProcessFitTest", "type" -> "keyword", 
  "info" -> "PointProcessFitTest[pdata] tests whether the point collection \
pdata could be modeled by a Poisson po"|>, 
 <|"label" -> "PointProcessParameterAssumptions", "type" -> "keyword", 
  "info" -> "PointProcessParameterAssumptions[proc] gives a logical \
expression for assumptions on parameters in t"|>, 
 <|"label" -> "PointProcessParameterQ", "type" -> "keyword", 
  "info" -> "PointProcessParameterQ[proc] yields True if proc is a valid \
random point process, and yields False o"|>, <|"label" -> "PointSize", 
  "type" -> "keyword", "info" -> "PointSize[d] is a graphics directive which \
specifies that points which follow are to be shown if pos"|>, 
 <|"label" -> "PointStatisticFunction", "type" -> "keyword", 
  "info" -> "PointStatisticFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a function whose values give the statistic \
of a points collecti"|>, <|"label" -> "PointValuePlot", "type" -> "keyword", 
  "info" -> "PointValuePlot[{pt  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , pt  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots the \
points pt  styled according to the values val "|>, 
 <|"label" -> "PoissonConsulDistribution", "type" -> "keyword", 
  "info" -> "PoissonConsulDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\274, \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]] represents a \
Poisson\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Consul \
distribution with parameters \[CapitalATilde]\216\[CapitalAHat]\274 and \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet]."|>, 
 <|"label" -> "PoissonDistribution", "type" -> "keyword", 
  "info" -> "PoissonDistribution[\[CapitalATilde]\216\[CapitalAHat]\274] \
represents a Poisson distribution with mean \
\[CapitalATilde]\216\[CapitalAHat]\274."|>, 
 <|"label" -> "PoissonPDEComponent", "type" -> "keyword", 
  "info" -> "                                                           \
2\nPoissonPDEComponent[vars, pars] yields "|>, 
 <|"label" -> "PoissonProcess", "type" -> "keyword", 
  "info" -> "PoissonProcess[\[CapitalATilde]\216\[CapitalAHat]\274] \
represents a Poisson process with rate \
\[CapitalATilde]\216\[CapitalAHat]\274."|>, <|"label" -> "PoissonWindow", 
  "type" -> "keyword", "info" -> "PoissonWindow[x] represents a Poisson \
window function of x.PoissonWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses \
the parameter \[CapitalATilde]\216\\[PlusMinus]."|>, 
 <|"label" -> "PolarAxes", "type" -> "keyword", 
  "info" -> "PolarAxes is an option for sector charts and polar plots that \
specifies whether polar axes should be"|>, <|"label" -> "PolarAxesOrigin", 
  "type" -> "keyword", "info" -> "PolarAxesOrigin is an option for sector \
charts and polar plots that specifies where polar axes shoul"|>, 
 <|"label" -> "PolarGridLines", "type" -> "keyword", 
  "info" -> "PolarGridLines is an option for sector charts and polar plots \
that specifies polar grid lines."|>, <|"label" -> "PolarPlot", 
  "type" -> "keyword", "info" -> "PolarPlot[r, \
{\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]   , \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]   }] generates a polar plot of a \
curve with radius r as a function of angle"|>, 
 <|"label" -> "PolarTicks", "type" -> "keyword", 
  "info" -> "PolarTicks is an option for sector charts and polar plots that \
specifies tick marks for polar axes."|>, <|"label" -> "PoleZeroMarkers", 
  "type" -> "keyword", "info" -> "PoleZeroMarkers is an option for \
RootLocusPlot that specifies the markers to be drawn on the complex"|>, 
 <|"label" -> "PolyaAeppliDistribution", "type" -> "keyword", 
  "info" -> "PolyaAeppliDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[Cedilla], p] represents a \
P\[CapitalATilde]\203b3lya\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\223Aeppli distribution with shape parameters \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] and p. "|>, 
 <|"label" -> "PolyGamma", "type" -> "keyword", 
  "info" -> "                                                                 \
         th                        "|>, <|"label" -> "Polygon", 
  "type" -> "keyword", "info" -> "Polygon[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] represents \
a filled polygon with points p .Polygon[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p } \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {{q , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, q }, "|>, 
 <|"label" -> "PolygonalNumber", "type" -> "keyword", 
  "info" -> "                               th                                \
                        th         "|>, <|"label" -> "PolygonAngle", 
  "type" -> "keyword", "info" -> "PolygonAngle[poly] gives a list of angles \
at the vertex points of poly.PolygonAngle[poly, p] gives t"|>, 
 <|"label" -> "PolygonCoordinates", "type" -> "keyword", 
  "info" -> 
   "PolygonCoordinates[poly] gives a list of coordinates in the polygon \
poly."|>, <|"label" -> "PolygonDecomposition", "type" -> "keyword", 
  "info" -> "PolygonDecomposition[poly] decomposes the polygon poly into a \
disjoint union of simpler polygons.Pol"|>, 
 <|"label" -> "PolygonIntersections", "type" -> "keyword", 
  "info" -> "PolygonIntersections is an option for Graphics3D which specifies \
whether intersecting polygons shoul"|>, <|"label" -> "Polyhedron", 
  "type" -> "keyword", "info" -> "Polyhedron[{f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, f }] represents \
a filled polyhedron inside the closed surfaces with polygon faces"|>, 
 <|"label" -> "PolyhedronAngle", "type" -> "keyword", 
  "info" -> "PolyhedronAngle[poly, p] gives the solid angle at the point p \
and spanned by edges with common point"|>, 
 <|"label" -> "PolyhedronCoordinates", "type" -> "keyword", 
  "info" -> "PolyhedronCoordinates[poly] gives a list of coordinates in the \
polyhedron poly."|>, <|"label" -> "PolyhedronData", "type" -> "keyword", 
  "info" -> "PolyhedronData[poly, \"property\"] gives the value of the \
specified property for the polyhedron named "|>, 
 <|"label" -> "PolyhedronDecomposition", "type" -> "keyword", 
  "info" -> "PolyhedronDecomposition[poly] decomposes the polyhedron poly \
into a union of simpler polyhedra."|>, <|"label" -> "PolyhedronGenus", 
  "type" -> "keyword", "info" -> 
   "PolyhedronGenus[poly] gives the genus of the polyhedron poly."|>, 
 <|"label" -> "PolyLog", "type" -> "keyword", "info" -> "PolyLog[n, z] gives \
the polylogarithm function Li (z).PolyLog[n, p, z] gives the Nielsen \
generalized"|>, <|"label" -> "PolynomialExpressionQ", "type" -> "keyword", 
  "info" -> "PolynomialExpressionQ[expr, x] gives True if expr is \
structurally a polynomial expression in x, and "|>, 
 <|"label" -> "PolynomialExtendedGCD", "type" -> "keyword", 
  "info" -> "PolynomialExtendedGCD[poly , poly , x] gives the extended GCD of \
poly  and poly  treated as univaria"|>, <|"label" -> "PolynomialGCD", 
  "type" -> "keyword", "info" -> "PolynomialGCD[poly , poly , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
greatest common divisor of the polynomials poly . Polynomia"|>, 
 <|"label" -> "PolynomialLCM", "type" -> "keyword", 
  "info" -> "PolynomialLCM[poly , poly , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the least \
common multiple of the polynomials poly . PolynomialL"|>, 
 <|"label" -> "PolynomialMod", "type" -> "keyword", 
  "info" -> "PolynomialMod[poly, m] gives the polynomial poly reduced modulo \
m. PolynomialMod[poly, {m , m , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] "|>, 
 <|"label" -> "PolynomialQ", "type" -> "keyword", 
  "info" -> "PolynomialQ[expr, var] yields True if expr is a polynomial in \
var, and yields False otherwise. Polyn"|>, <|"label" -> "PolynomialQuotient", 
  "type" -> "keyword", "info" -> "PolynomialQuotient[p, q, x] gives the \
quotient of p and q, treated as polynomials in x, with any rem"|>, 
 <|"label" -> "PolynomialQuotientRemainder", "type" -> "keyword", 
  "info" -> "PolynomialQuotientRemainder[p, q, x] gives a list of the \
quotient and remainder of p and q, treated "|>, 
 <|"label" -> "PolynomialReduce", "type" -> "keyword", 
  "info" -> "PolynomialReduce[poly, {poly , poly , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a list \
representing a reduction of pol"|>, <|"label" -> "PolynomialRemainder", 
  "type" -> "keyword", "info" -> "PolynomialRemainder[p, q, x] gives the \
remainder from dividing p by q, treated as polynomials in x. "|>, 
 <|"label" -> "PoolingLayer", "type" -> "keyword", 
  "info" -> "PoolingLayer[sz] represents a pooling net layer using kernels of \
size sz.PoolingLayer[{w}] represent"|>, <|"label" -> "PopupWindow", 
  "type" -> "keyword", "info" -> "PopupWindow[expr, contents] displays as \
expr, but pops up a window containing contents when clicked."|>, 
 <|"label" -> "Position", "type" -> "keyword", "info" -> "Position[expr, \
pattern] gives a list of the positions at which objects matching pattern \
appear in ex"|>, <|"label" -> "PositionIndex", "type" -> "keyword", 
  "info" -> "PositionIndex[list] gives an association between unique elements \
in list and the positions at which "|>, <|"label" -> "Positive", 
  "type" -> "keyword", "info" -> 
   "Positive[x] gives True if x is a positive number. "|>, 
 <|"label" -> "PositiveDefiniteMatrixQ", "type" -> "keyword", 
  "info" -> "PositiveDefiniteMatrixQ[m] gives True if m is explicitly \
positive definite, and False otherwise. "|>, <|"label" -> "PositiveIntegers", 
  "type" -> "keyword", "info" -> "PositiveIntegers represents the domain of \
strictly positive integers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 PositiveIntegers. \
"|>, <|"label" -> "PositivelyOrientedPoints", "type" -> "keyword", 
  "info" -> "PositivelyOrientedPoints[{p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p     }] tests \
whether the sequence of points p , p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "PositiveRationals", "type" -> "keyword", 
  "info" -> "PositiveRationals represents the domain of strictly positive \
rational numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 PositiveRat"|>, 
 <|"label" -> "PositiveReals", "type" -> "keyword", 
  "info" -> 
   "PositiveReals represents the domain of strictly positive real numbers."|>\
, <|"label" -> "PositiveSemidefiniteMatrixQ", "type" -> "keyword", 
  "info" -> "PositiveSemidefiniteMatrixQ[m] gives True if m is explicitly \
positive semidefinite, and False otherw"|>, <|"label" -> "PossibleZeroQ", 
  "type" -> "keyword", "info" -> "PossibleZeroQ[expr] gives True if basic \
symbolic and numerical methods suggest that expr has value z"|>, 
 <|"label" -> "Postfix", "type" -> "keyword", "info" -> "Postfix[f[expr]] \
prints with f[expr] given in default postfix form: expr//f. Postfix[f[expr], \
h] pri"|>, <|"label" -> "Power", "type" -> "keyword", 
  "info" -> "x^y gives x to the power y."|>, 
 <|"label" -> "PowerDistribution", "type" -> "keyword", 
  "info" -> "PowerDistribution[k, a] represents a power distribution with \
domain parameter k and shape parameter "|>, <|"label" -> "PowerExpand", 
  "type" -> "keyword", "info" -> "PowerExpand[expr] expands all powers of \
products and powers. PowerExpand[expr, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] expands "|>, 
 <|"label" -> "PowerMod", "type" -> "keyword", "info" -> "                    \
     b                                                                        \
  "|>, <|"label" -> "PowerModList", "type" -> "keyword", 
  "info" -> "                                                                 \
 r    s\nPowerModList[a, s/r, m] giv"|>, <|"label" -> "PowerRange", 
  "type" -> "keyword", "info" -> "PowerRange[b] generates the list {1, 10, \
100, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, max}, where \
max is the largest power of 10 that doe"|>, 
 <|"label" -> "PowerSpectralDensity", "type" -> "keyword", 
  "info" -> "PowerSpectralDensity[data, \
\[CapitalATilde]\217\[CapitalAHat]\211] estimates the power spectral density \
for data.PowerSpectralDensity[dat"|>, 
 <|"label" -> "PowerSymmetricPolynomial", "type" -> "keyword", 
  "info" -> "PowerSymmetricPolynomial[r] represents a formal power symmetric \
polynomial with exponent r.PowerSymm"|>, <|"label" -> "Precedence", 
  "type" -> "keyword", "info" -> "Precedence[sym] returns the precedence of \
the output operator associated to the symbol sym.Precedenc"|>, 
 <|"label" -> "PrecedenceForm", "type" -> "keyword", 
  "info" -> "PrecedenceForm[expr, prec] prints with expr parenthesized as it \
would be if it contained an operator"|>, <|"label" -> "Precedes", 
  "type" -> "keyword", "info" -> "Precedes[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\272 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\272 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "PrecedesEqual", "type" -> "keyword", 
  "info" -> "PrecedesEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\[CapitalAHat]\257 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\[CapitalAHat]\257 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "PrecedesSlantEqual", "type" -> "keyword", 
  "info" -> "PrecedesSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\274 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\274 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "PrecedesTilde", "type" -> "keyword", 
  "info" -> "PrecedesTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\276 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\276 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Precision", "type" -> "keyword", 
  "info" -> "Precision[x] gives the effective number of digits of precision \
in the number x. "|>, <|"label" -> "PrecisionGoal", "type" -> "keyword", 
  "info" -> "PrecisionGoal is an option for various numerical operations \
which specifies how many effective digit"|>, <|"label" -> "PreDecrement", 
  "type" -> "keyword", "info" -> 
   "--x decreases the value of x by 1, returning the new value of x. "|>, 
 <|"label" -> "Predict", "type" -> "keyword", "info" -> "Predict[{in  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] out , in  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] out , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
PredictorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\
\246] based on the example input-out"|>, <|"label" -> "PredictorFunction", 
  "type" -> "keyword", "info" -> "PredictorFunction[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents a function generated by \
Predict that predicts numerical values from "|>, 
 <|"label" -> "PredictorInformation", "type" -> "keyword", 
  "info" -> "PredictorInformation[predictor] generates a report giving \
information on the predictor function pred"|>, 
 <|"label" -> "PredictorMeasurements", "type" -> "keyword", 
  "info" -> "PredictorMeasurements[predictor, testset, prop] gives \
measurements associated with the property prop"|>, 
 <|"label" -> "PredictorMeasurementsObject", "type" -> "keyword", 
  "info" -> "PredictorMeasurementsObject[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents an object generated by \
PredictorMeasurements that can be a"|>, <|"label" -> "PreemptProtect", 
  "type" -> "keyword", "info" -> "PreemptProtect[expr] evaluates expr, \
without any interruption from preemptive evaluations."|>, 
 <|"label" -> "PreferencesPath", "type" -> "keyword", 
  "info" -> "PreferencesPath is a global option that specifies which \
directories are searched for user-specific s"|>, 
 <|"label" -> "Prefix", "type" -> "keyword", "info" -> "Prefix[f[expr]] \
prints with f[expr] given in default prefix form: f @ expr. Prefix[f[expr], \
h] print"|>, <|"label" -> "PreIncrement", "type" -> "keyword", 
  "info" -> 
   "++x increases the value of x by 1, returning the new value of x. "|>, 
 <|"label" -> "Prepend", "type" -> "keyword", "info" -> "Prepend[expr, elem] \
gives expr with elem prepended. Prepend[elem] represents an operator form of \
Pre"|>, <|"label" -> "PrependLayer", "type" -> "keyword", 
  "info" -> "PrependLayer[] represents a net layer that takes an input array \
and prepends another array to it."|>, <|"label" -> "PrependTo", 
  "type" -> "keyword", "info" -> "PrependTo[x, elem] prepends elem to the \
value of x, and resets x to the result. "|>, 
 <|"label" -> "PreprocessingRules", "type" -> "keyword", 
  "info" -> "PreprocessingRules is an option that specifies how the input \
should be preprocessed."|>, <|"label" -> "PreserveColor", 
  "type" -> "keyword", "info" -> "PreserveColor is an option for ImageRestyle \
and related functions that specifies whether to preserve"|>, 
 <|"label" -> "PreserveImageOptions", "type" -> "keyword", 
  "info" -> "PreserveImageOptions is an option to graphics and related \
functions that specifies whether image siz"|>, 
 <|"label" -> "PreviousDate", "type" -> "keyword", 
  "info" -> "PreviousDate[gran] gives the previously occurring date of the \
specified granularity type gran.Previo"|>, 
 <|"label" -> "PriceGraphDistribution", "type" -> "keyword", 
  "info" -> "PriceGraphDistribution[n, k, a] represents a de Solla Price \
graph distribution for n-vertex graphs w"|>, 
 <|"label" -> "Prime", "type" -> "keyword", "info" -> "                     \
th\nPrime[n] gives the n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]  \
  prime number p .\n                                   "|>, 
 <|"label" -> "PrimeNu", "type" -> "keyword", "info" -> "PrimeNu[n] gives the \
number of distinct primes \[CapitalATilde]\216\[CapitalAHat]\275(n) in n."|>, 
 <|"label" -> "PrimeOmega", "type" -> "keyword", 
  "info" -> "PrimeOmega[n] gives the number of prime factors counting \
multiplicities \[CapitalATilde]\216\[CapitalAHat]\[Copyright](n) in n."|>, 
 <|"label" -> "PrimePi", "type" -> "keyword", "info" -> "PrimePi[x] gives the \
number of primes \[CapitalATilde]\217\[CapitalAHat]\200(x) less than or equal \
to x."|>, <|"label" -> "PrimePowerQ", "type" -> "keyword", 
  "info" -> "PrimePowerQ[expr] yields True if expr is a power of a prime \
number, and yields False otherwise. "|>, <|"label" -> "PrimeQ", 
  "type" -> "keyword", "info" -> "PrimeQ[n] yields True if n is a prime \
number, and yields False otherwise. "|>, <|"label" -> "Primes", 
  "type" -> "keyword", "info" -> "Primes represents the domain of prime \
numbers, as in x \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
Primes. "|>, <|"label" -> "PrimeZetaP", "type" -> "keyword", 
  "info" -> "PrimeZetaP[s] gives prime zeta function P(s)."|>, 
 <|"label" -> "PrimitivePolynomialQ", "type" -> "keyword", 
  "info" -> "PrimitivePolynomialQ[poly, p] tests whether poly is a primitive \
polynomial modulo a prime p."|>, <|"label" -> "PrimitiveRoot", 
  "type" -> "keyword", "info" -> "PrimitiveRoot[n] gives a primitive root of \
n.PrimitiveRoot[n, k] gives the smallest primitive root o"|>, 
 <|"label" -> "PrimitiveRootList", "type" -> "keyword", 
  "info" -> "PrimitiveRootList[n] gives a list of primitive roots of n."|>, 
 <|"label" -> "PrincipalComponents", "type" -> "keyword", 
  "info" -> "PrincipalComponents[matrix] transforms elements of matrix into \
unscaled principal components."|>, <|"label" -> "PrincipalValue", 
  "type" -> "keyword", "info" -> "PrincipalValue is an option for Integrate \
that specifies whether the Cauchy principal value should b"|>, 
 <|"label" -> "Print", "type" -> "keyword", 
  "info" -> "Print[expr] prints expr as output. "|>, 
 <|"label" -> "PrintableASCIIQ", "type" -> "keyword", 
  "info" -> "PrintableASCIIQ[string] yields True if the string contains only \
printable ASCII characters, and yiel"|>, <|"label" -> "PrintAction", 
  "type" -> "keyword", "info" -> "PrintAction is an option for notebooks that \
specifies the action taken when a Print[] command is eva"|>, 
 <|"label" -> "PrintingCopies", "type" -> "keyword", 
  "info" -> "PrintingCopies is an option for notebooks that specifies the \
number of copies of a notebook printed "|>, <|"label" -> "PrintingOptions", 
  "type" -> "keyword", "info" -> 
   "PrintingOptions is an option that specifies settings for printing."|>, 
 <|"label" -> "PrintingPageRange", "type" -> "keyword", 
  "info" -> "PrintingPageRange is an option for notebooks that specifies the \
range of pages of a notebook to be p"|>, 
 <|"label" -> "PrintingStartingPageNumber", "type" -> "keyword", 
  "info" -> "PrintingStartingPageNumber is an option for notebooks that \
specifies what number to assign to the fi"|>, 
 <|"label" -> "PrintingStyleEnvironment", "type" -> "keyword", 
  "info" -> "PrintingStyleEnvironment is an option for notebooks that \
specifies the style environment to be used "|>, 
 <|"label" -> "Printout3D", "type" -> "keyword", 
  "info" -> "Printout3D[model] prints out the 3D model using a 3D print \
previewer.Printout3D[model, service] prin"|>, 
 <|"label" -> "Printout3DPreviewer", "type" -> "keyword", 
  "info" -> "Printout3DPreviewer is an option for Printout3D that specifies a \
previewer for generating outputs to"|>, <|"label" -> "PrintPrecision", 
  "type" -> "keyword", "info" -> "PrintPrecision is an option for selections \
that specifies the maximum number of digits used for disp"|>, 
 <|"label" -> "Prism", "type" -> "keyword", "info" -> "Prism[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] represents \
a filled prism connecting the triangles {p , p , p } and {p , p , p }."|>, 
 <|"label" -> "PrivateEvaluationOptions", "type" -> "keyword", 
  "info" -> "PrivateEvaluationOptions is an option for selections that \
specifies settings for evaluation-related "|>, 
 <|"label" -> "PrivateFontOptions", "type" -> "keyword", 
  "info" -> "PrivateFontOptions is an option for selections that specifies \
settings for various font suboptions."|>, <|"label" -> "PrivateKey", 
  "type" -> "keyword", "info" -> "PrivateKey[assoc] represents the private \
part of a key pair for a public-key cryptographic system."|>, 
 <|"label" -> "Probability", "type" -> "keyword", 
  "info" -> "Probability[pred, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist] gives the \
probability for an event that satisfies the predicate pred und"|>, 
 <|"label" -> "ProbabilityDistribution", "type" -> "keyword", 
  "info" -> "ProbabilityDistribution[pdf, {x, x   , x   }] represents the \
continuous distribution with PDF pdf in"|>, <|"label" -> "ProbabilityPlot", 
  "type" -> "keyword", "info" -> "ProbabilityPlot[list] generates a plot of \
the CDF of list against the CDF of a normal distribution.P"|>, 
 <|"label" -> "ProbabilityScalePlot", "type" -> "keyword", 
  "info" -> "ProbabilityScalePlot[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
normal probability plot of the samples x . Probability"|>, 
 <|"label" -> "ProcessConnection", "type" -> "keyword", 
  "info" -> "ProcessConnection[proc, \"stream\"] returns the stream object \
for a given stream."|>, <|"label" -> "ProcessDirectory", "type" -> "keyword", 
  "info" -> "ProcessDirectory is an option specifying the initial working \
directory to use when executing a proce"|>, 
 <|"label" -> "ProcessEnvironment", "type" -> "keyword", 
  "info" -> "ProcessEnvironment is an option specifying the initial settings \
of environment variables to use when"|>, <|"label" -> "Processes", 
  "type" -> "keyword", "info" -> "Processes[] returns a list of currently \
running external processes, started in this Wolfram Language"|>, 
 <|"label" -> "ProcessEstimator", "type" -> "keyword", 
  "info" -> "ProcessEstimator is an option to EstimatedProcess and \
FindProcessParameters that specifies what proc"|>, 
 <|"label" -> "ProcessInformation", "type" -> "keyword", 
  "info" -> "ProcessInformation[proc] gives information about an external \
process proc.\nProcessInformation[proc, "|>, <|"label" -> "ProcessObject", 
  "type" -> "keyword", "info" -> "ProcessObject[...] is an object that \
represents a runnable external process."|>, 
 <|"label" -> "ProcessParameterAssumptions", "type" -> "keyword", 
  "info" -> "ProcessParameterAssumptions[proc] gives a logical expression for \
assumptions on parameters in the ra"|>, <|"label" -> "ProcessParameterQ", 
  "type" -> "keyword", "info" -> "ProcessParameterQ[proc] yields True if proc \
is a valid random process, and yields False otherwise."|>, 
 <|"label" -> "ProcessStatus", "type" -> "keyword", 
  "info" -> "ProcessStatus[proc] gives the current status of the external \
process represented by the ProcessObjec"|>, 
 <|"label" -> "ProductDistribution", "type" -> "keyword", 
  "info" -> "ProductDistribution[dist , dist , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents the \
joint distribution with independent component di"|>, 
 <|"label" -> "ProductLog", "type" -> "keyword", 
  "info" -> "                                                            w    \
                           th\nProdu"|>, <|"label" -> "ProgressIndicator", 
  "type" -> "keyword", "info" -> "ProgressIndicator[x] represents a progress \
indicator with setting x in the range 0 to 1. ProgressInd"|>, 
 <|"label" -> "ProgressReporting", "type" -> "keyword", 
  "info" -> "ProgressReporting is an option for various algorithmic functions \
that specifies whether to report th"|>, <|"label" -> "Projection", 
  "type" -> "keyword", "info" -> "Projection[u, v] finds the projection of \
the vector u onto the vector v.Projection[u, v, f] finds pr"|>, 
 <|"label" -> "Prolog", "type" -> "keyword", "info" -> "Prolog is an option \
for graphics functions which gives a list of graphics primitives to be \
rendered "|>, <|"label" -> "PromptForm", "type" -> "keyword", 
  "info" -> 
   "PromptForm[prompt, expr] prints as an output prompt and expression."|>, 
 <|"label" -> "ProofObject", "type" -> "keyword", 
  "info" -> "ProofObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a proof object generated by \
FindEquationalProof."|>, <|"label" -> "Properties", "type" -> "keyword", 
  "info" -> "Properties is an option that allows specification of properties \
to objects and items of objects."|>, <|"label" -> "Property", 
  "type" -> "keyword", "info" -> "Property[item, name \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value] associates \
the property name \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
value with item."|>, <|"label" -> "PropertyList", "type" -> "keyword", 
  "info" -> "PropertyList[{obj, itemspec}] lists the properties available for \
itemspec in obj."|>, <|"label" -> "PropertyValue", "type" -> "keyword", 
  "info" -> "PropertyValue[{obj, item}, name] gives the property value \
associated with name for item in obj.Prope"|>, 
 <|"label" -> "Proportion", "type" -> "keyword", 
  "info" -> "Proportion[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\\[CenterDot] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\\[CenterDot] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Proportional", "type" -> "keyword", 
  "info" -> "Proportional[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\235 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\235 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Protect", "type" -> "keyword", "info" -> "Protect[s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] sets the \
attribute Protected for the symbols s . Protect[\"form \", \"form \", \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] pro"|>, 
 <|"label" -> "Protected", "type" -> "keyword", 
  "info" -> "Protected is an attribute that prevents any values associated \
with a symbol from being modified. "|>, <|"label" -> "ProteinData", 
  "type" -> "keyword", "info" -> "ProteinData[entity] gives the reference \
amino acid sequence for the protein entity.ProteinData[entit"|>, 
 <|"label" -> "Pruning", "type" -> "keyword", "info" -> "Pruning[image] \
removes the outermost branches of thin objects in image by setting their \
values to bl"|>, <|"label" -> "PseudoInverse", "type" -> "keyword", 
  "info" -> 
   "PseudoInverse[m] finds the pseudoinverse of a rectangular matrix. "|>, 
 <|"label" -> "PsychrometricPropertyData", "type" -> "keyword", 
  "info" -> "PsychrometricPropertyData[spec] returns the psychrometric \
properties of moist air for the specified "|>, 
 <|"label" -> "PublicKey", "type" -> "keyword", 
  "info" -> "PublicKey[assoc] represents the public part of a key pair for a \
public-key cryptographic system.Publ"|>, <|"label" -> "PublisherID", 
  "type" -> "keyword", "info" -> "PublisherID is an option for ResourceSubmit \
that specifies the ID used to submit a resource for publ"|>, 
 <|"label" -> "PulsarData", "type" -> "keyword", 
  "info" -> "PulsarData[entity, property] gives the value of the specified \
property for the pulsar entity.PulsarD"|>, 
 <|"label" -> "PunctuationCharacter", "type" -> "keyword", 
  "info" -> "PunctuationCharacter represents a punctuation character in \
StringExpression."|>, <|"label" -> "Purple", "type" -> "keyword", 
  "info" -> 
   "Purple represents the color purple in graphics or style specifications. "\
|>, <|"label" -> "Put", "type" -> "keyword", "info" -> "expr >> filename \
writes expr to a file. Put[expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \"filename\"] \
writes a sequence of expres"|>, <|"label" -> "PutAppend", 
  "type" -> "keyword", "info" -> "expr >>> filename appends expr to a file. \
PutAppend[expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \"filename\"] \
appends a sequence "|>, <|"label" -> "Pyramid", "type" -> "keyword", 
  "info" -> "Pyramid[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] represents \
a filled pyramid with base {p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p } and top p \
.\n          1      "|>, <|"label" -> "QBinomial", "type" -> "keyword", 
  "info" -> "QBinomial[n, m, q] gives the q-binomial coefficient (n) .\n      \
                                    "|>, <|"label" -> "QFactorial", 
  "type" -> "keyword", "info" -> "QFactorial[n, q] gives the q-factorial [n]  \
!.\n                                          q"|>, 
 <|"label" -> "QGamma", "type" -> "keyword", "info" -> "QGamma[z, q] gives \
the q-gamma function \[CapitalATilde]\216\[CapitalAHat]\223  (z).\n           \
                              q"|>, <|"label" -> "QHypergeometricPFQ", 
  "type" -> "keyword", "info" -> "QHypergeometricPFQ[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }, {b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }, q, z] gives \
the basic hypergeometric series \
\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]   \
\[CapitalATilde]\257\[CapitalAHat]\215\[CapitalAHat]  \
\[CapitalATilde]\217\[CapitalAHat]\225  (a "|>, 
 <|"label" -> "QnDispersion", "type" -> "keyword", 
  "info" -> "QnDispersion[list] gives the Q  statistic of the elements in \
list.QnDispersion[list, c] gives the Q "|>, <|"label" -> "QPochhammer", 
  "type" -> "keyword", "info" -> "QPochhammer[a, q, n] gives the q-Pochhammer \
symbol (a ; q)  .QPochhammer[a, q] gives the q-Pochhamme"|>, 
 <|"label" -> "QPolyGamma", "type" -> "keyword", 
  "info" -> "                                                                 \
                   th              "|>, <|"label" -> "QRDecomposition", 
  "type" -> "keyword", "info" -> "QRDecomposition[m] yields the QR \
decomposition for a numerical matrix m. The result is a list {q, r}"|>, 
 <|"label" -> "QuadraticIrrationalQ", "type" -> "keyword", 
  "info" -> "QuadraticIrrationalQ[x] gives True if x is a quadratic \
irrational and False otherwise."|>, <|"label" -> "QuadraticOptimization", 
  "type" -> "keyword", "info" -> "QuadraticOptimization[f, cons, vars] finds \
values of variables vars that minimize the quadratic obje"|>, 
 <|"label" -> "Quantile", "type" -> "keyword", "info" -> "                    \
           th\nQuantile[list, q] gives the \
q\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat] \
\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    quantile of list. \
Quantile[list,"|>, <|"label" -> "QuantilePlot", "type" -> "keyword", 
  "info" -> "QuantilePlot[list] generates a plot of quantiles of list against \
the quantiles of a normal distribut"|>, <|"label" -> "Quantity", 
  "type" -> "keyword", "info" -> "Quantity[magnitude, unit] represents a \
quantity with size magnitude and unit specified by unit.Quant"|>, 
 <|"label" -> "QuantityArray", "type" -> "keyword", 
  "info" -> "QuantityArray[mags, unit] represents an array of quantities with \
magnitudes mags and common unit.Qua"|>, <|"label" -> "QuantityDistribution", 
  "type" -> "keyword", "info" -> "QuantityDistribution[dist, unit] represents \
a distribution dist of quantities with unit specified by"|>, 
 <|"label" -> "QuantityForm", "type" -> "keyword", 
  "info" -> "QuantityForm[expr, form] prints expr with all Quantity \
expressions using the specified unit display "|>, 
 <|"label" -> "QuantityMagnitude", "type" -> "keyword", 
  "info" -> "QuantityMagnitude[quantity] gives the amount of the specified \
quantity.QuantityMagnitude[quantity, u"|>, <|"label" -> "QuantityQ", 
  "type" -> "keyword", "info" -> "QuantityQ[expr] gives True if expr is a \
Quantity with valid arguments, and False otherwise."|>, 
 <|"label" -> "QuantityUnit", "type" -> "keyword", 
  "info" -> "QuantityUnit[quantity] returns the unit associated with the \
specified quantity."|>, <|"label" -> "QuantityVariable", "type" -> "keyword", 
  "info" -> "QuantityVariable[var, \"pq\"] represents a variable with the \
label var and the corresponding physical "|>, 
 <|"label" -> "QuantityVariableCanonicalUnit", "type" -> "keyword", 
  "info" -> "QuantityVariableCanonicalUnit[quantityvariable] returns the \
canonical unit associated with the speci"|>, 
 <|"label" -> "QuantityVariableDimensions", "type" -> "keyword", 
  "info" -> "QuantityVariableDimensions[quantityvariable] returns a list of \
base dimensions associated with the s"|>, 
 <|"label" -> "QuantityVariableIdentifier", "type" -> "keyword", 
  "info" -> "QuantityVariableIdentifier[quantityvariable] returns the \
identifier associated with the specified qu"|>, 
 <|"label" -> "QuantityVariablePhysicalQuantity", "type" -> "keyword", 
  "info" -> "QuantityVariablePhysicalQuantity[var] returns the physical \
quantity associated with the quantity var"|>, 
 <|"label" -> "Quartics", "type" -> "keyword", "info" -> "Quartics is an \
option for functions that involve solving algebraic equations that specifies \
whether "|>, <|"label" -> "QuartileDeviation", "type" -> "keyword", 
  "info" -> "QuartileDeviation[list] gives the quartile deviation or \
semi-interquartile range of the elements in "|>, 
 <|"label" -> "Quartiles", "type" -> "keyword", 
  "info" -> "Quartiles[list] gives a list of the 1/4, 1/2 and 3/4 quantiles \
of the elements in list.Quartiles[dis"|>, <|"label" -> "QuartileSkewness", 
  "type" -> "keyword", "info" -> "QuartileSkewness[list] gives the \
coefficient of quartile skewness for the elements in list.QuartileS"|>, 
 <|"label" -> "Query", "type" -> "keyword", "info" -> "Query[operator , \
operator , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] \
represents a query that can be applied to a Dataset object, in which "|>, 
 <|"label" -> "QuestionInterface", "type" -> "keyword", 
  "info" -> "QuestionInterface[type, \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 p  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] s , p  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246|>] defines an \
interface for a QuestionObject using the"|>, <|"label" -> "QuestionObject", 
  "type" -> "keyword", "info" -> "QuestionObject[q, assess] represents the \
question q and the corresponding assessment assess.Question"|>, 
 <|"label" -> "QueueingNetworkProcess", "type" -> "keyword", 
  "info" -> "QueueingNetworkProcess[\[CapitalATilde]\216b3, r, \
\[CapitalATilde]\216\[CapitalAHat]\274, c] represents an open (Jackson) \
queueing network process with arriva"|>, <|"label" -> "QueueingProcess", 
  "type" -> "keyword", "info" -> "QueueingProcess[\[CapitalATilde]\216\
\[CapitalAHat]\[RightGuillemet], \[CapitalATilde]\216\[CapitalAHat]\274] \
represents an M/M/1 queue with arrival rate \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] and service rate \
\[CapitalATilde]\216\[CapitalAHat]\274.QueueingProce"|>, 
 <|"label" -> "Quiet", "type" -> "keyword", "info" -> "Quiet[expr] evaluates \
expr \"quietly\", without actually outputting any messages \
generated.Quiet[expr,"|>, <|"label" -> "QuietEcho", "type" -> "keyword", 
  "info" -> "QuietEcho[expr] evaluates expr without letting Echo and related \
functions inside expr print any resu"|>, <|"label" -> "Quit", 
  "type" -> "keyword", "info" -> 
   "Quit[] terminates a Wolfram Language kernel session. "|>, 
 <|"label" -> "Quotient", "type" -> "keyword", "info" -> "Quotient[m, n] \
gives the integer quotient of m and n. Quotient[m, n, d] uses an offset d. \
\n"|>, <|"label" -> "QuotientRemainder", "type" -> "keyword", 
  "info" -> "QuotientRemainder[m, n] gives a list of the quotient and \
remainder from division of m by n."|>, <|"label" -> "RadialAxisPlot", 
  "type" -> "keyword", "info" -> "RadialAxisPlot[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }] generates a \
radial axis plot where the y  are displayed on radial ax"|>, 
 <|"label" -> "RadialGradientFilling", "type" -> "keyword", 
  "info" -> "RadialGradientFilling[{col , col , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, col }] is a \
two-dimensional graphics directive specifying that"|>, 
 <|"label" -> "RadialGradientImage", "type" -> "keyword", 
  "info" -> "RadialGradientImage[gcol] returns an image with values radially \
changing from center to corners base"|>, <|"label" -> "RadialityCentrality", 
  "type" -> "keyword", "info" -> "RadialityCentrality[g] gives a list of \
radiality centralities for the vertices in the graph g.Radial"|>, 
 <|"label" -> "Radon", "type" -> "keyword", "info" -> "Radon[image] gives an \
image representing the discrete Radon transform of image.Radon[image, {w, h}] \
"|>, <|"label" -> "RadonTransform", "type" -> "keyword", 
  "info" -> "RadonTransform[expr, {x, y}, {p, \
\[CapitalATilde]\217\[CapitalAHat]\225}] gives the Radon transform of expr."|>\
, <|"label" -> "RamanujanTau", "type" -> "keyword", 
  "info" -> "RamanujanTau[n] gives the Ramanujan \
\[CapitalATilde]\217\[CapitalAHat]\204 function \
\[CapitalATilde]\217\[CapitalAHat]\204(n)."|>, 
 <|"label" -> "RamanujanTauL", "type" -> "keyword", 
  "info" -> 
   "RamanujanTauL[s] gives the Ramanujan tau Dirichlet L-function L(s)."|>, 
 <|"label" -> "RamanujanTauTheta", "type" -> "keyword", 
  "info" -> "RamanujanTauTheta[t] gives the Ramanujan tau theta function \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla](t)."|>, 
 <|"label" -> "RamanujanTauZ", "type" -> "keyword", 
  "info" -> "RamanujanTauZ[t] gives the Ramanujan tau Z-function Z(t)."|>, 
 <|"label" -> "Ramp", "type" -> "keyword", "info" -> "Ramp[x] gives x if x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] 0 and 0 \
otherwise."|>, <|"label" -> "Random", "type" -> "keyword", 
  "info" -> "Random[] gives a uniformly distributed pseudorandom Real in the \
range 0 to 1. Random[type, range] gi"|>, <|"label" -> "RandomArrayLayer", 
  "type" -> "keyword", "info" -> "RandomArrayLayer[dist] represents a net \
layer that has no input and produces a random array from the"|>, 
 <|"label" -> "RandomChoice", "type" -> "keyword", 
  "info" -> "RandomChoice[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
pseudorandom choice of one of the e . RandomChoice[list, n] gives "|>, 
 <|"label" -> "RandomColor", "type" -> "keyword", 
  "info" -> "RandomColor[] gives a pseudorandom color directive in the \
RGBColor space.RandomColor[n] gives n pseu"|>, 
 <|"label" -> "RandomComplex", "type" -> "keyword", 
  "info" -> "RandomComplex[] gives a pseudorandom complex number with real \
and imaginary parts in the range 0 to "|>, <|"label" -> "RandomEntity", 
  "type" -> "keyword", "info" -> "RandomEntity[spec] gives a pseudorandom \
entity with a type determined by the specification spec.Rand"|>, 
 <|"label" -> "RandomFunction", "type" -> "keyword", 
  "info" -> "RandomFunction[proc, {t   , t   }] generates a pseudorandom \
function from the process proc from t   "|>, 
 <|"label" -> "RandomGeneratorState", "type" -> "keyword", 
  "info" -> "RandomGeneratorState[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] gives a representation of the internal state of a \
pseudorandom generator."|>, <|"label" -> "RandomGeoPosition", 
  "type" -> "keyword", "info" -> "RandomGeoPosition[] gives a pseudorandom \
geo position uniformly distributed on the surface of the Ea"|>, 
 <|"label" -> "RandomGraph", "type" -> "keyword", 
  "info" -> "RandomGraph[{n, m}] gives a pseudorandom graph with n vertices \
and m edges.RandomGraph[{n, m}, k] gi"|>, <|"label" -> "RandomImage", 
  "type" -> "keyword", "info" -> "RandomImage[max] gives an image with \
pseudorandom pixel values in the range 0 to max.RandomImage[{mi"|>, 
 <|"label" -> "RandomInstance", "type" -> "keyword", 
  "info" -> "RandomInstance[expr] finds a random instance of an expression \
such as a geometric scene.RandomInstan"|>, <|"label" -> "RandomInteger", 
  "type" -> "keyword", "info" -> "RandomInteger[{i   , i   }] gives a \
pseudorandom integer in the range {i   , i   }. RandomInteger[i "|>, 
 <|"label" -> "RandomPermutation", "type" -> "keyword", 
  "info" -> "RandomPermutation[gr] gives a pseudorandom permutation in the \
permutation group gr.RandomPermutation"|>, <|"label" -> "RandomPoint", 
  "type" -> "keyword", "info" -> "RandomPoint[reg] gives a pseudorandom point \
uniformly distributed in the region reg.RandomPoint[reg,"|>, 
 <|"label" -> "RandomPointConfiguration", "type" -> "keyword", 
  "info" -> "RandomPointConfiguration[pproc, reg] generates a pseudorandom \
spatial point configuration from the s"|>, <|"label" -> "RandomPolygon", 
  "type" -> "keyword", "info" -> "RandomPolygon[n] gives a pseudorandom \
simple polygon with n vertex points.RandomPolygon[spec] gives "|>, 
 <|"label" -> "RandomPolyhedron", "type" -> "keyword", 
  "info" -> "RandomPolyhedron[spec] gives a pseudorandom polyhedron with the \
specified specification spec.RandomP"|>, <|"label" -> "RandomPrime", 
  "type" -> "keyword", "info" -> "RandomPrime[{i   , i   }] gives a \
pseudorandom prime number in the range i    to i   .RandomPrime[i "|>, 
 <|"label" -> "RandomReal", "type" -> "keyword", 
  "info" -> "RandomReal[] gives a pseudorandom real number in the range 0 to \
1. RandomReal[{x   , x   }] gives a "|>, <|"label" -> "RandomSample", 
  "type" -> "keyword", "info" -> "RandomSample[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, n] gives a \
pseudorandom sample of n of the e .RandomSample[{w , w , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {"|>, 
 <|"label" -> "RandomSeeding", "type" -> "keyword", 
  "info" -> "RandomSeeding is an option that specifies what seeding of \
pseudorandom generators should be done ins"|>, 
 <|"label" -> "RandomTree", "type" -> "keyword", 
  "info" -> "RandomTree[n] gives a pseudorandom tree with n \
nodes.RandomTree[n, k] gives a list of k pseudorandom"|>, 
 <|"label" -> "RandomVariate", "type" -> "keyword", 
  "info" -> "RandomVariate[dist] gives a pseudorandom variate from the \
symbolic distribution dist.RandomVariate[d"|>, 
 <|"label" -> "RandomWalkProcess", "type" -> "keyword", 
  "info" -> "RandomWalkProcess[p] represents a random walk on a line with the \
probability of a positive unit step"|>, <|"label" -> "RandomWord", 
  "type" -> "keyword", "info" -> "RandomWord[] gives a pseudorandom commonly \
used word.RandomWord[n] gives a list of n pseudorandom wo"|>, 
 <|"label" -> "Range", "type" -> "keyword", "info" -> "Range[i   ] generates \
the list {1, 2, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
i   }. Range[i   , i   ] generates the list {i   , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, i   }"|>, 
 <|"label" -> "RankedMax", "type" -> "keyword", 
  "info" -> "                               th                                \
                         th\nRankedM"|>, <|"label" -> "RankedMin", 
  "type" -> "keyword", "info" -> "                               th           \
                                               th\nRanked"|>, 
 <|"label" -> "RarerProbability", "type" -> "keyword", 
  "info" -> "RarerProbability[dist, example] computes the probability for \
distribution dist to generate a sample "|>, <|"label" -> "Raster", 
  "type" -> "keyword", "info" -> "Raster[{{a  , a  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a \
two-dimensional graphics primitive which represents a rectangular ar"|>, 
 <|"label" -> "Raster3D", "type" -> "keyword", "info" -> "Raster3D[{{{a  , a  \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a \
three-dimensional graphics primitive that represents a cubica"|>, 
 <|"label" -> "RasterArray", "type" -> "keyword", 
  "info" -> "RasterArray[{{g  , g  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is a \
two-dimensional graphics primitive that represents a rectangula"|>, 
 <|"label" -> "Rasterize", "type" -> "keyword", 
  "info" -> "Rasterize[expr] returns a rasterized version of the displayed \
form of expr.Rasterize[expr, elem] giv"|>, <|"label" -> "RasterSize", 
  "type" -> "keyword", "info" -> "RasterSize is an option for Rasterize and \
related functions that determines the absolute pixel size "|>, 
 <|"label" -> "Rational", "type" -> "keyword", 
  "info" -> "Rational is the head used for rational numbers. "|>, 
 <|"label" -> "RationalExpressionQ", "type" -> "keyword", 
  "info" -> "RationalExpressionQ[expr, x] gives True if expr is structurally \
a rational expression in x, and Fals"|>, <|"label" -> "Rationalize", 
  "type" -> "keyword", "info" -> "Rationalize[x] converts an approximate \
number x to a nearby rational with small denominator. Rationa"|>, 
 <|"label" -> "Rationals", "type" -> "keyword", 
  "info" -> "Rationals represents the domain of rational numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Rationals. "|>, 
 <|"label" -> "Ratios", "type" -> "keyword", "info" -> "                      \
                                                                    th        \
"|>, <|"label" -> "RawMedium", "type" -> "keyword", 
  "info" -> "RawMedium is an internal symbol."|>, 
 <|"label" -> "RayleighDistribution", "type" -> "keyword", 
  "info" -> "RayleighDistribution[\[CapitalATilde]\217\[CapitalAHat]\203] \
represents the Rayleigh distribution with scale parameter \
\[CapitalATilde]\217\[CapitalAHat]\203."|>, 
 <|"label" -> "Re", "type" -> "keyword", 
  "info" -> "Re[z] gives the real part of the complex number z. "|>, 
 <|"label" -> "ReactionBalance", "type" -> "keyword", 
  "info" -> "ReactionBalance[rxn] returns a version of the reaction rxn in \
which the stoichiometric coefficients "|>, <|"label" -> "ReactionBalancedQ", 
  "type" -> "keyword", "info" -> "ReactionBalancedQ[rxn] returns True if the \
given chemical reaction is balanced, and False otherwise."|>, 
 <|"label" -> "ReactionPDETerm", "type" -> "keyword", 
  "info" -> "ReactionPDETerm[vars, a] represents a reaction term a u with \
reaction coefficient a and with model v"|>, 
 <|"label" -> "Read", "type" -> "keyword", "info" -> "Read[stream] reads one \
expression from an input stream and returns the expression. Read[stream, \
type"|>, <|"label" -> "ReadByteArray", "type" -> "keyword", 
  "info" -> "ReadByteArray[src] gives the contents of src as a ByteArray \
object.ReadByteArray[src, n] reads the f"|>, <|"label" -> "ReadLine", 
  "type" -> "keyword", "info" -> "ReadLine[stream] reads a line of text from \
a stream and returns it as a string.\nReadLine[proc] reads"|>, 
 <|"label" -> "ReadList", "type" -> "keyword", "info" -> "ReadList[\"file\"] \
reads all the remaining expressions in a file and returns a list of them. \
ReadList["|>, <|"label" -> "ReadProtected", "type" -> "keyword", 
  "info" -> "ReadProtected is an attribute that prevents values associated \
with a symbol from being seen. "|>, <|"label" -> "ReadString", 
  "type" -> "keyword", "info" -> "ReadString[\"file\"] reads the complete \
contents of a file and returns it as a string.\nReadString[stre"|>, 
 <|"label" -> "Real", "type" -> "keyword", "info" -> "Real is the head used \
for real \
(floating\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220point) \
numbers. "|>, <|"label" -> "RealAbs", "type" -> "keyword", 
  "info" -> "RealAbs[x] gives the absolute value of the real number x. "|>, 
 <|"label" -> "RealBlockDiagonalForm", "type" -> "keyword", 
  "info" -> "RealBlockDiagonalForm is an option for SchurDecomposition and \
related functions which specifies whet"|>, <|"label" -> "RealExponent", 
  "type" -> "keyword", "info" -> "RealExponent[x] gives log  \
(\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\203 x \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\204).RealExponent[x, b] \
gives log (\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\203 x \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\204).\n                  \
       10"|>, <|"label" -> "Reals", "type" -> "keyword", 
  "info" -> "Reals represents the domain of real numbers, as in x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 Reals. "|>, 
 <|"label" -> "RealSign", "type" -> "keyword", "info" -> "RealSign[x] gives \
-1, 0 or 1 depending on whether x is negative, zero or positive. "|>, 
 <|"label" -> "Reap", "type" -> "keyword", "info" -> "Reap[expr] gives the \
value of expr together with all expressions to which Sow has been applied \
durin"|>, <|"label" -> "RebuildPacletData", "type" -> "keyword", 
  "info" -> "The experimental function RebuildPacletData is now obsolete and \
is superseded by PacletDataRebuild."|>, <|"label" -> "RecalibrationFunction", 
  "type" -> "keyword", "info" -> "RecalibrationFunction is an option for \
Classify, Predict and related functions that specifies how to"|>, 
 <|"label" -> "RecognitionPrior", "type" -> "keyword", 
  "info" -> "RecognitionPrior is an option for recognition functions that \
specifies the prior probability or clas"|>, 
 <|"label" -> "RecognitionThreshold", "type" -> "keyword", 
  "info" -> "RecognitionThreshold is an option for ImageInstanceQ and related \
functions that specifies the minimu"|>, <|"label" -> "Record", 
  "type" -> "keyword", "info" -> 
   "Record represents a record in Read, Find, and related functions. "|>, 
 <|"label" -> "RecordLists", "type" -> "keyword", 
  "info" -> "RecordLists is an option for ReadList that specifies whether \
objects from separate records should be"|>, <|"label" -> "RecordSeparators", 
  "type" -> "keyword", "info" -> "RecordSeparators is an option for Read, \
Find, and related functions that specifies the list of strin"|>, 
 <|"label" -> "Rectangle", "type" -> "keyword", 
  "info" -> "Rectangle[{x   , y   }, {x   , y   }] represents an axis-aligned \
filled rectangle from {x   , y   } "|>, <|"label" -> "RectangleChart", 
  "type" -> "keyword", "info" -> "RectangleChart[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a \
rectangle chart with bars of width x  and height y ."|>, 
 <|"label" -> "RectangleChart3D", "type" -> "keyword", 
  "info" -> "RectangleChart3D[{{x , y , z }, {x , y , z }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a 3D \
rectangle chart with bars of width x , "|>, 
 <|"label" -> "RectangularRepeatingElement", "type" -> "keyword", 
  "info" -> "RectangularRepeatingElement[elem] represents a rectangular array \
of elements of type spec in an inte"|>, <|"label" -> "RecurrenceFilter", 
  "type" -> "keyword", "info" -> "RecurrenceFilter[{\[CapitalATilde]\216\\[Pl\
usMinus], \[CapitalATilde]\216b2}, x] filters x using a linear recurrence \
equation with coefficients \[CapitalATilde]\216\\[PlusMinus] and \
\[CapitalATilde]\216b2.R"|>, <|"label" -> "RecurrenceTable", 
  "type" -> "keyword", "info" -> "RecurrenceTable[eqns, expr, {n, n   }] \
generates a list of values of expr for successive n based on "|>, 
 <|"label" -> "Red", "type" -> "keyword", 
  "info" -> 
   "Red represents the color red in graphics or style specifications. "|>, 
 <|"label" -> "Reduce", "type" -> "keyword", "info" -> "Reduce[expr, vars] \
reduces the statement expr by solving equations or inequalities for vars and \
elim"|>, <|"label" -> "ReferenceLineStyle", "type" -> "keyword", 
  "info" -> "ReferenceLineStyle is an option for QuantilePlot and similar \
functions that specifies the style used"|>, <|"label" -> "Refine", 
  "type" -> "keyword", "info" -> "Refine[expr, assum] gives the form of expr \
that would be obtained if symbols in it were replaced by "|>, 
 <|"label" -> "ReflectionMatrix", "type" -> "keyword", 
  "info" -> "ReflectionMatrix[v] gives the matrix that represents reflection \
of points in a mirror normal to the "|>, <|"label" -> "ReflectionTransform", 
  "type" -> "keyword", "info" -> "ReflectionTransform[v] gives a \
TransformationFunction that represents a reflection in a mirror throu"|>, 
 <|"label" -> "Refresh", "type" -> "keyword", "info" -> "Refresh[expr_, UpdateInterval->interval] creates a dynamic widget, which reevalues expr every UpdateInterval (in seconds or Quantity[]). Refresh[expr_, ev_EventObject] is updated by external event object ev"|>, <|"label" -> "RefreshRate", "type" -> "keyword", 
  "info" -> "RefreshRate is an option to Animate and related functions which \
specifies the refresh rate for frame"|>, <|"label" -> "Region", 
  "type" -> "keyword", "info" -> "Region[reg] represents a geometric \
region.Region[reg, options] gives a region that uses the specifie"|>, 
 <|"label" -> "RegionBinarize", "type" -> "keyword", 
  "info" -> "RegionBinarize[image, marker, d] gives a binary version of image \
that includes the foreground pixels"|>, <|"label" -> "RegionBoundary", 
  "type" -> "keyword", "info" -> 
   "RegionBoundary[reg] represents the boundary of the region reg."|>, 
 <|"label" -> "RegionBoundaryStyle", "type" -> "keyword", 
  "info" -> "RegionBoundaryStyle is an option for plotting functions that \
specifies the boundary style for the re"|>, <|"label" -> "RegionBounds", 
  "type" -> "keyword", "info" -> "RegionBounds[reg] gives the bounds for the \
region reg.RegionBounds[reg, \"type\"] gives region bounds "|>, 
 <|"label" -> "RegionCentroid", "type" -> "keyword", 
  "info" -> "RegionCentroid[reg] gives the centroid of the region reg."|>, 
 <|"label" -> "RegionCongruent", "type" -> "keyword", 
  "info" -> "RegionCongruent[reg , reg ] tests whether the regions reg  and \
reg  are congruent.\n                 "|>, <|"label" -> "RegionConvert", 
  "type" -> "keyword", "info" -> "RegionConvert[reg, form] converts the \
region representation reg to the specified form."|>, 
 <|"label" -> "RegionDifference", "type" -> "keyword", 
  "info" -> "RegionDifference[reg , reg ] gives the difference of the regions \
reg  and reg .\n                    "|>, <|"label" -> "RegionDilation", 
  "type" -> "keyword", "info" -> "RegionDilation[reg, r] gives the dilation \
of the region reg by a disk of radius r centered at the or"|>, 
 <|"label" -> "RegionDimension", "type" -> "keyword", 
  "info" -> 
   "RegionDimension[reg] gives the geometric dimension of the region reg. "|>\
, <|"label" -> "RegionDisjoint", "type" -> "keyword", 
  "info" -> "RegionDisjoint[reg , reg ] returns True if the regions reg  and \
reg  are disjoint. RegionDisjoint[re"|>, <|"label" -> "RegionDistance", 
  "type" -> "keyword", "info" -> "RegionDistance[reg, p] gives the minimum \
distance from the point p to the region reg.RegionDistance["|>, 
 <|"label" -> "RegionDistanceFunction", "type" -> "keyword", 
  "info" -> "RegionDistanceFunction[reg, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]  represents a \
function whose values give the distance from a point to"|>, 
 <|"label" -> "RegionEmbeddingDimension", "type" -> "keyword", 
  "info" -> "RegionEmbeddingDimension[reg] gives the dimension of the space \
in which the region reg is embedded. "|>, <|"label" -> "RegionEqual", 
  "type" -> "keyword", "info" -> "RegionEqual[reg , reg ] returns True if the \
regions reg  and reg  are equal.RegionEqual[reg , reg , "|>, 
 <|"label" -> "RegionErosion", "type" -> "keyword", 
  "info" -> "RegionErosion[reg, r] gives the erosion of the region reg by a \
disk of radius r centered at the orig"|>, <|"label" -> "RegionFillingStyle", 
  "type" -> "keyword", "info" -> "RegionFillingStyle is an option for \
plotting functions that specifies the style for the filled regio"|>, 
 <|"label" -> "RegionFit", "type" -> "keyword", 
  "info" -> "RegionFit[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \"model\"] \
finds a geometric region \"model\" that best fits the points p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "RegionFunction", "type" -> "keyword", 
  "info" -> "RegionFunction is an option for plotting functions that \
specifies the region to include in the plot "|>, 
 <|"label" -> "RegionImage", "type" -> "keyword", 
  "info" -> "RegionImage[reg] returns a rasterized grayscale 2D or 3D image \
of reg.RegionImage[reg, {{x   , x   }"|>, <|"label" -> "RegionIntersection", 
  "type" -> "keyword", "info" -> "RegionIntersection[reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the \
intersection of the regions reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n             "|>\
, <|"label" -> "RegionMeasure", "type" -> "keyword", 
  "info" -> "RegionMeasure[reg] gives the measure of the region \
reg.RegionMeasure[reg, d] gives the d-dimensional"|>, 
 <|"label" -> "RegionMember", "type" -> "keyword", 
  "info" -> "RegionMember[reg, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives True if \
the numeric point {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} is a member of \
the constant r"|>, <|"label" -> "RegionMemberFunction", "type" -> "keyword", 
  "info" -> "RegionMemberFunction[reg, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]  represents a \
function whose values give whether a point is in a region"|>, 
 <|"label" -> "RegionMoment", "type" -> "keyword", 
  "info" -> "                                                                 \
           i   i     i\nRegionMoment"|>, <|"label" -> "RegionNearest", 
  "type" -> "keyword", "info" -> "RegionNearest[reg, p] gives a point in the \
region reg that is nearest the point p. RegionNearest[reg"|>, 
 <|"label" -> "RegionNearestFunction", "type" -> "keyword", 
  "info" -> "RegionNearestFunction[reg, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]  represents a \
function whose values give the nearest point in the regi"|>, 
 <|"label" -> "RegionPlot", "type" -> "keyword", 
  "info" -> "RegionPlot[pred, {x, x   , x   }, {y, y   , y   }] makes a plot \
showing the region in which pred is "|>, <|"label" -> "RegionPlot3D", 
  "type" -> "keyword", "info" -> "RegionPlot3D[pred, {x, x   , x   }, {y, y   \
, y   }, {z, z   , z   }] makes a plot showing the three"|>, 
 <|"label" -> "RegionProduct", "type" -> "keyword", 
  "info" -> "RegionProduct[reg , reg ] represents the Cartesian product of \
the regions reg  and reg .RegionProduc"|>, <|"label" -> "RegionQ", 
  "type" -> "keyword", "info" -> 
   "RegionQ[reg] gives True if reg is a valid region and False otherwise. "|>\
, <|"label" -> "RegionResize", "type" -> "keyword", 
  "info" -> "RegionResize[reg, l] resize the region reg to have the first \
side length l preserving side length ra"|>, <|"label" -> "RegionSimilar", 
  "type" -> "keyword", "info" -> "RegionSimilar[reg , reg ] tests whether the \
regions reg  and reg  are similar.\n                 1   "|>, 
 <|"label" -> "RegionSize", "type" -> "keyword", 
  "info" -> "RegionSize is an option used by Printout3D to specify the \
overall size of an object to print for a r"|>, 
 <|"label" -> "RegionSymmetricDifference", "type" -> "keyword", 
  "info" -> "RegionSymmetricDifference[reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents the \
symmetric difference of the regions reg , re"|>, 
 <|"label" -> "RegionUnion", "type" -> "keyword", 
  "info" -> "RegionUnion[reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives the union \
of the regions reg , reg , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n               \
1     2     "|>, <|"label" -> "RegionWithin", "type" -> "keyword", 
  "info" -> "RegionWithin[reg , reg ] returns True if reg  is contained \
within reg .\n                1     2     "|>, 
 <|"label" -> "RegisterExternalEvaluator", "type" -> "keyword", 
  "info" -> "RegisterExternalEvaluator[sys, target] registers the target for \
use as an external evaluator with th"|>, <|"label" -> "RegularExpression", 
  "type" -> "keyword", "info" -> "RegularExpression[\"regex\"] represents the \
generalized regular expression specified by the string \"re"|>, 
 <|"label" -> "Regularization", "type" -> "keyword", 
  "info" -> "Regularization is an option for Sum and Product that specifies \
what type of regularization to use."|>, <|"label" -> "RegularlySampledQ", 
  "type" -> "keyword", "info" -> "RegularlySampledQ[tseries] gives True if \
tseries is a regular time series, and False otherwise."|>, 
 <|"label" -> "RegularPolygon", "type" -> "keyword", 
  "info" -> "RegularPolygon[n] gives the regular polygon with n vertices \
equally spaced around the unit circle.Re"|>, 
 <|"label" -> "ReIm", "type" -> "keyword", 
  "info" -> "ReIm[z] gives the list {Re[z], Im[z]} of the number z."|>, 
 <|"label" -> "ReImLabels", "type" -> "keyword", 
  "info" -> "ReImLabels is an option for ReImPlot that specifies labels to \
use for the real and imaginary compone"|>, <|"label" -> "ReImPlot", 
  "type" -> "keyword", "info" -> "ReImPlot[f, {x, x   , x   }] generates a \
plot of Re[f] and Im[f] as functions of x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 \
\[CapitalATilde]\257\[CapitalAHat]\236\\[Micro] from x    to "|>, 
 <|"label" -> "ReImStyle", "type" -> "keyword", 
  "info" -> "ReImStyle is an option for ReImPlot that specifies styles to use \
for the real and imaginary componen"|>, <|"label" -> "Reinstall", 
  "type" -> "keyword", "info" -> "Reinstall[link] un-installs the specified \
external package and installs it again."|>, 
 <|"label" -> "RelationalDatabase", "type" -> "keyword", 
  "info" -> "RelationalDatabase[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents schema information about a relational \
database.RelationalDatabase[d"|>, <|"label" -> "RelationGraph", 
  "type" -> "keyword", "info" -> "RelationGraph[f, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the graph \
with vertices v  and edges from v  to v  whenever f[v "|>, 
 <|"label" -> "ReleaseHold", "type" -> "keyword", 
  "info" -> "ReleaseHold[expr] removes Hold, HoldForm, HoldPattern, and \
HoldComplete in expr. "|>, <|"label" -> "ReliabilityDistribution", 
  "type" -> "keyword", "info" -> "ReliabilityDistribution[bexpr, {{x , dist \
}, {x , dist }, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
represents the reliability distributio"|>, <|"label" -> "ReliefImage", 
  "type" -> "keyword", "info" -> "ReliefImage[array] generates a relief image \
of an array of height values. "|>, <|"label" -> "ReliefPlot", 
  "type" -> "keyword", "info" -> 
   "ReliefPlot[array] generates a relief plot of an array of height values. "\
|>, <|"label" -> "RemoteAuthorizationCaching", "type" -> "keyword", 
  "info" -> "RemoteAuthorizationCaching is an option for RemoteConnect and \
related functions that determines whet"|>, 
 <|"label" -> "RemoteBatchJobAbort", "type" -> "keyword", 
  "info" -> "RemoteBatchJobAbort[job] aborts a remote batch job."|>, 
 <|"label" -> "RemoteBatchJobObject", "type" -> "keyword", 
  "info" -> "RemoteBatchJobObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a remote batch job submitted by \
RemoteBatchSubmit or RemoteBatchM"|>, <|"label" -> "RemoteBatchJobs", 
  "type" -> "keyword", "info" -> "RemoteBatchJobs[env] gives a list of \
RemoteBatchJobObject expressions representing batch jobs submit"|>, 
 <|"label" -> "RemoteBatchMapSubmit", "type" -> "keyword", 
  "info" -> "RemoteBatchMapSubmit[env, f, list] submits an array batch job in \
which f is applied to each element "|>, 
 <|"label" -> "RemoteBatchSubmissionEnvironment", "type" -> "keyword", 
  "info" -> "RemoteBatchSubmissionEnvironment[\"provider\", assoc] represents \
a remote batch job submission environ"|>, <|"label" -> "RemoteBatchSubmit", 
  "type" -> "keyword", "info" -> "RemoteBatchSubmit[env, expr] submits expr \
for evaluation using the remote batch submission environme"|>, 
 <|"label" -> "RemoteConnect", "type" -> "keyword", 
  "info" -> "RemoteConnect[\"host\"] connects to the specified remote \
host.RemoteConnect[IPAddress[\"address\"]] conn"|>, 
 <|"label" -> "RemoteConnectionObject", "type" -> "keyword", 
  "info" -> "RemoteConnectionObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] is an object that represents a remote connection."|>, 
 <|"label" -> "RemoteEvaluate", "type" -> "keyword", 
  "info" -> "RemoteEvaluate[expr] gives the result of evaluating expr using \
your current default remote Wolfram L"|>, <|"label" -> "RemoteFile", 
  "type" -> "keyword", "info" -> "RemoteFile[URL[\"uri\"]] is a symbolic \
representation of a file on a remote machine."|>, 
 <|"label" -> "RemoteInputFiles", "type" -> "keyword", 
  "info" -> "RemoteInputFiles is an option for RemoteBatchSubmit and \
RemoteBatchMapSubmit that specifies local fi"|>, 
 <|"label" -> "RemoteKernelObject", "type" -> "keyword", 
  "info" -> "RemoteKernelObject[spec] specifies a remote kernel that can be \
used for RemoteEvaluate or LaunchKern"|>, 
 <|"label" -> "RemoteProviderSettings", "type" -> "keyword", 
  "info" -> "RemoteProviderSettings is an option for RemoteBatchSubmit and \
RemoteBatchMapSubmit that specifies pr"|>, <|"label" -> "RemoteRun", 
  "type" -> "keyword", "info" -> "RemoteRun[\"host\", \"command\"] runs the \
specified operating system command on the remote host, returni"|>, 
 <|"label" -> "RemoteRunProcess", "type" -> "keyword", 
  "info" -> "RemoteRunProcess[\"host\", \"command\"] runs the specified \
system command on the remote host, returning "|>, 
 <|"label" -> "RemovalConditions", "type" -> "keyword", 
  "info" -> "RemovalConditions is an option for AttachCell that specifies \
conditions under which to remove the at"|>, <|"label" -> "Remove", 
  "type" -> "keyword", "info" -> "Remove[symbol , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] removes symbols \
completely, so that their names are no longer recognized by the W"|>, 
 <|"label" -> "RemoveAlphaChannel", "type" -> "keyword", 
  "info" -> "RemoveAlphaChannel[color] removes opacity from \
color.RemoveAlphaChannel[color, bg] removes opacity b"|>, 
 <|"label" -> "RemoveAsynchronousTask", "type" -> "keyword", 
  "info" -> "RemoveAsynchronousTask[asyncTask] stops asynchronous evaluations \
and removes asyncTask from the syst"|>, <|"label" -> "RemoveAudioStream", 
  "type" -> "keyword", "info" -> "RemoveAudioStream[] deletes all AudioStream \
objects.RemoveAudioStream[stream] deletes the AudioStrea"|>, 
 <|"label" -> "RemoveBackground", "type" -> "keyword", 
  "info" -> "RemoveBackground[image] returns an image with an alpha channel \
where the background is transparent. "|>, 
 <|"label" -> "RemoveChannelListener", "type" -> "keyword", 
  "info" -> "RemoveChannelListener[obj] removes obj from the list of \
currently active channel listeners.RemoveCha"|>, 
 <|"label" -> "RemoveChannelSubscribers", "type" -> "keyword", 
  "info" -> "RemoveChannelSubscribers[channel] removes all subscribers from \
the specified channel.RemoveChannelSu"|>, <|"label" -> "Removed", 
  "type" -> "keyword", "info" -> 
   "Removed[string] is printed to indicate a symbol that has been removed."|>\
, <|"label" -> "RemoveDiacritics", "type" -> "keyword", 
  "info" -> "RemoveDiacritics[string] replaces characters in string that have \
diacritics by their base ASCII char"|>, 
 <|"label" -> "RemoveInputStreamMethod", "type" -> "keyword", 
  "info" -> 
   "RemoveInputStreamMethod[\"name\"] removes a custom input stream method."|>\
, <|"label" -> "RemoveOutputStreamMethod", "type" -> "keyword", 
  "info" -> 
   "RemoveOutputStreamMethod[\"name\"] removes a custom output stream \
method."|>, <|"label" -> "RemoveProperty", "type" -> "keyword", 
  "info" -> "RemoveProperty[{obj, itemspec}] removes all properties \
associated with itemspec in obj.RemovePropert"|>, 
 <|"label" -> "RemoveUsers", "type" -> "keyword", 
  "info" -> "RemoveUsers[group, {user , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] removes the \
users user  from the permissions group group.\n           "|>, 
 <|"label" -> "RemoveVideoStream", "type" -> "keyword", 
  "info" -> "RemoveVideoStream[] deletes all VideoStream \
objects.RemoveVideoStream[stream] deletes the VideoStrea"|>, 
 <|"label" -> "RenameDirectory", "type" -> "keyword", 
  "info" -> "RenameDirectory[dir , dir ] renames the directory dir  to dir . \
\n                   1     2         "|>, <|"label" -> "RenameFile", 
  "type" -> "keyword", "info" -> "RenameFile[file , file ] renames file  to \
file . \n               1      2              1        2"|>, 
 <|"label" -> "RenderAll", "type" -> "keyword", 
  "info" -> "RenderAll is an option for Graphics3D that specifies whether or \
not PostScript should be generated f"|>, <|"label" -> "RenderingOptions", 
  "type" -> "keyword", "info" -> "RenderingOptions is an option for Style, \
Cell and related constructs that specifies options related "|>, 
 <|"label" -> "RenewalProcess", "type" -> "keyword", 
  "info" -> "RenewalProcess[rdist] represents a renewal process with \
interarrival times distributed according to "|>, 
 <|"label" -> "RenkoChart", "type" -> "keyword", 
  "info" -> "RenkoChart[{{date , p }, {date , p }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a Renko \
chart with prices p  at date date .RenkoChar"|>, 
 <|"label" -> "RepairMesh", "type" -> "keyword", 
  "info" -> "RepairMesh[mreg] repairs defects in the mesh region \
mreg.RepairMesh[mreg, {def , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] repairs only \
th"|>, <|"label" -> "Repeated", "type" -> "keyword", 
  "info" -> "p .. or Repeated[p] is a pattern object that represents a \
sequence of one or more expressions, each "|>, 
 <|"label" -> "RepeatedNull", "type" -> "keyword", 
  "info" -> "p ... or RepeatedNull[p] is a pattern object that represents a \
sequence of zero or more expressions,"|>, <|"label" -> "RepeatedTiming", 
  "type" -> "keyword", "info" -> "RepeatedTiming[expr] evaluates expr \
repeatedly and returns a list of the average time in seconds use"|>, 
 <|"label" -> "RepeatingElement", "type" -> "keyword", 
  "info" -> "RepeatingElement[spec] represents an arbitrarily repeated type \
of element in an interpreter, API or "|>, <|"label" -> "Replace", 
  "type" -> "keyword", "info" -> "Replace[expr, rules] applies a rule or list \
of rules in an attempt to transform the entire expressio"|>, 
 <|"label" -> "ReplaceAll", "type" -> "keyword", 
  "info" -> "expr/.rules or ReplaceAll[expr, rules] applies a rule or list of \
rules in an attempt to transform ea"|>, <|"label" -> "ReplaceImageValue", 
  "type" -> "keyword", "info" -> "ReplaceImageValue[image, pos \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val] changes the \
pixel values at position pos in image to val.Replace"|>, 
 <|"label" -> "ReplaceList", "type" -> "keyword", 
  "info" -> "ReplaceList[expr, rules] attempts to transform the entire \
expression expr by applying a rule or list"|>, 
 <|"label" -> "ReplacePart", "type" -> "keyword", 
  "info" -> "                                                                \
th\nReplacePart[expr, i \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] yields"|>, 
 <|"label" -> "ReplacePixelValue", "type" -> "keyword", 
  "info" -> "ReplacePixelValue[image, ppos \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val] changes the \
pixel values at pixel position ppos in image to val"|>, 
 <|"label" -> "ReplaceRepeated", "type" -> "keyword", 
  "info" -> "expr//.rules repeatedly performs replacements until expr no \
longer changes. ReplaceRepeated[rules] r"|>, <|"label" -> "ReplicateLayer", 
  "type" -> "keyword", "info" -> "ReplicateLayer[n] represents a net layer \
that takes an input of dimensions {d , d , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} and replicate"|>\
, <|"label" -> "RequiredPhysicalQuantities", "type" -> "keyword", 
  "info" -> "RequiredPhysicalQuantities is an option for FormulaLookup that \
specifies physical quantities that mu"|>, <|"label" -> "Resampling", 
  "type" -> "keyword", "info" -> "Resampling is an option that specifies the \
method to be used for resampling images or arrays."|>, 
 <|"label" -> "ResamplingAlgorithmData", "type" -> "keyword", 
  "info" -> "ResamplingAlgorithmData[rs, \"prop\"] gives the specified \
property \"prop\" for the resampling rs."|>, <|"label" -> "ResamplingMethod", 
  "type" -> "keyword", "info" -> "ResamplingMethod is an option for functions \
such as TemporalData and MovingMap that specifies how va"|>, 
 <|"label" -> "Rescale", "type" -> "keyword", "info" -> "Rescale[x, {min, \
max}] gives x rescaled to run from 0 to 1 over the range min to max. \
Rescale[x, {mi"|>, <|"label" -> "RescalingTransform", "type" -> "keyword", 
  "info" -> "RescalingTransform[{{x   , x   }, {y   , y   }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {{xp   , xp   \
}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
TransformationFunct"|>, <|"label" -> "ResetDirectory", "type" -> "keyword", 
  "info" -> "ResetDirectory[] resets the current working directory to its \
previous value. "|>, <|"label" -> "ResetScheduledTask", "type" -> "keyword", 
  "info" -> "ResetScheduledTask[obj, timespec]  resets the timing for a \
scheduled task to timespec.ResetScheduled"|>, <|"label" -> "ReshapeLayer", 
  "type" -> "keyword", "info" -> "ReshapeLayer[dims] represents a net layer \
that reinterprets the input to be an array of dimensions d"|>, 
 <|"label" -> "Residue", "type" -> "keyword", "info" -> "Residue[expr, {z, z \
}] finds the residue of expr at the point z = z . \n                   0      \
   "|>, <|"label" -> "ResizeLayer", "type" -> "keyword", 
  "info" -> "ResizeLayer[{d}] represents a layer performing one-dimensional \
resizing of a two-dimensional array.R"|>, <|"label" -> "Resolve", 
  "type" -> "keyword", "info" -> "Resolve[expr] attempts to resolve expr into \
a form that eliminates ForAll and Exists quantifiers. Re"|>, 
 <|"label" -> "ResolveContextAliases", "type" -> "keyword", 
  "info" -> "ResolveContextAliases is an option for Names, Contexts and \
related functions to control whether to r"|>, <|"label" -> "ResourceData", 
  "type" -> "keyword", "info" -> "ResourceData[resource] gives the primary \
content of the specified resource.ResourceData[resource, el"|>, 
 <|"label" -> "ResourceFunction", "type" -> "keyword", 
  "info" -> "ResourceFunction[resource] represents the function associated \
with the specified resource.ResourceFu"|>, <|"label" -> "ResourceObject", 
  "type" -> "keyword", "info" -> "ResourceObject[\"name\"] represents a \
resource with the specified name.ResourceObject[\"uuid\"] represen"|>, 
 <|"label" -> "ResourceRegister", "type" -> "keyword", 
  "info" -> "ResourceRegister[resource] creates a persistent cache of a \
resource object that can be referenced by"|>, <|"label" -> "ResourceRemove", 
  "type" -> "keyword", "info" -> "ResourceRemove[resource] removes the \
specified resource from the system on which it is run."|>, 
 <|"label" -> "ResourceSearch", "type" -> "keyword", 
  "info" -> "ResourceSearch[form] gives a dataset of resources that contain \
text matching form.ResourceSearch[for"|>, <|"label" -> "ResourceSubmit", 
  "type" -> "keyword", "info" -> "ResourceSubmit[resource] submits the \
specified resource object to be reviewed for publication.Resour"|>, 
 <|"label" -> "ResourceUpdate", "type" -> "keyword", 
  "info" -> "ResourceUpdate[resource] updates to the latest version of the \
specified resource object.ResourceUpda"|>, <|"label" -> "ResourceVersion", 
  "type" -> "keyword", "info" -> "ResourceVersion is an option for \
ResourceObject, ResourceFunction and related functions for specifyi"|>, 
 <|"label" -> "ResponseForm", "type" -> "keyword", 
  "info" -> "ResponseForm[expr, \"fmt\"] represents a response record to be \
given in a specified format when reques"|>, 
 <|"label" -> "Rest", "type" -> "keyword", 
  "info" -> "Rest[expr] gives expr with the first element removed. "|>, 
 <|"label" -> "RestartInterval", "type" -> "keyword", 
  "info" -> "RestartInterval is an option controlling the restart behavior of \
functions such as ContinuousTask."|>, <|"label" -> "Restricted", 
  "type" -> "keyword", "info" -> "Restricted[form, cond, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
form for Interpreter and related functions restricted accordi"|>, 
 <|"label" -> "Resultant", "type" -> "keyword", 
  "info" -> "Resultant[poly , poly , var] computes the resultant of the \
polynomials poly  and poly  with respect "|>, <|"label" -> "ResumePacket", 
  "type" -> "keyword", "info" -> "ResumePacket[] is a WSTP packet used for \
synchronization with the Wolfram Language kernel."|>, 
 <|"label" -> "Return", "type" -> "keyword", "info" -> "Return[expr] returns \
the value expr from a function. Return[] returns the value Null. \n"|>, 
 <|"label" -> "ReturnExpressionPacket", "type" -> "keyword", 
  "info" -> "ReturnExpressionPacket[expr] is a WSTP packet that contains the \
expression expr, the result of an En"|>, <|"label" -> "ReturnPacket", 
  "type" -> "keyword", "info" -> "ReturnPacket[expr] is a WSTP packet that \
contains the expression expr, the result of an EvaluatePack"|>, 
 <|"label" -> "ReturnReceiptFunction", "type" -> "keyword", 
  "info" -> "ReturnReceiptFunction is an option for MailReceiverFunction that \
specifies what function to apply if"|>, <|"label" -> "ReturnTextPacket", 
  "type" -> "keyword", "info" -> "ReturnTextPacket[string] is a WSTP packet \
containing string, the result of an EnterTextPacket evalua"|>, 
 <|"label" -> "Reverse", "type" -> "keyword", "info" -> "Reverse[expr] \
reverses the order of the elements in expr. Reverse[expr, n] reverses \
elements at leve"|>, <|"label" -> "ReverseApplied", "type" -> "keyword", 
  "info" -> "ReverseApplied[f] represents a form of f that takes arguments in \
reverse order so that ReverseApplie"|>, <|"label" -> "ReverseElement", 
  "type" -> "keyword", "info" -> "ReverseElement[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\213 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\213 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ReverseEquilibrium", "type" -> "keyword", 
  "info" -> "ReverseEquilibrium[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\213 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\213 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ReverseGraph", "type" -> "keyword", 
  "info" -> "ReverseGraph[g] gives the reverse graph of the directed graph \
g.ReverseGraph[{v \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
w, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules "\
|>, <|"label" -> "ReverseSort", "type" -> "keyword", 
  "info" -> "ReverseSort[list] sorts the elements of list into reverse \
canonical order. ReverseSort[list, p] sort"|>, 
 <|"label" -> "ReverseSortBy", "type" -> "keyword", 
  "info" -> "ReverseSortBy[list, f] sorts the elements of list using the \
reverse canonical order defined by apply"|>, 
 <|"label" -> "ReverseUpEquilibrium", "type" -> "keyword", 
  "info" -> "ReverseUpEquilibrium[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\257 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\257 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RevolutionAxis", "type" -> "keyword", 
  "info" -> "RevolutionAxis is an option for RevolutionPlot3D which specifies \
the revolution axis around which th"|>, <|"label" -> "RevolutionPlot3D", 
  "type" -> "keyword", "info" -> "RevolutionPlot3D[f , {t, t   , t   }] \
generates a plot of the surface of revolution with height f  a"|>, 
 <|"label" -> "RGBColor", "type" -> "keyword", "info" -> "RGBColor[r, g, b] \
represents a color in the RGB color space with red, blue and green \
components. RGB"|>, <|"label" -> "RiceDistribution", "type" -> "keyword", 
  "info" -> "RiceDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents a Rice distribution with shape parameters \
\[CapitalATilde]\216\\[PlusMinus] and \
\[CapitalATilde]\216b2.RiceDistribution"|>, <|"label" -> "RidgeFilter", 
  "type" -> "keyword", "info" -> "RidgeFilter[data] computes a measure for \
the presence of a ridge at every position of data.RidgeFilt"|>, 
 <|"label" -> "RiemannR", "type" -> "keyword", 
  "info" -> "RiemannR[x] gives the Riemann prime counting function R(x)."|>, 
 <|"label" -> "RiemannSiegelTheta", "type" -> "keyword", 
  "info" -> "RiemannSiegelTheta[t] gives the \
Riemann\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Siegel \
function \[CapitalATilde]\217\[CapitalAHat]\221(t). "|>, 
 <|"label" -> "RiemannSiegelZ", "type" -> "keyword", 
  "info" -> "RiemannSiegelZ[t] gives the \
Riemann\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Siegel \
function Z(t). "|>, <|"label" -> "RiemannXi", "type" -> "keyword", 
  "info" -> "RiemannXi[s] gives the Riemann xi function \
\[CapitalATilde]\216\[CapitalAHat]\276(s)."|>, 
 <|"label" -> "Right", "type" -> "keyword", "info" -> "Right is a symbol that \
represents the right-hand side for purposes of alignment and positioning. "|>\
, <|"label" -> "RightArrow", "type" -> "keyword", 
  "info" -> "RightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\222 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\222 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightArrowBar", "type" -> "keyword", 
  "info" -> "RightArrowBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\[Yen] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\[Yen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightArrowLeftArrow", "type" -> "keyword", 
  "info" -> "RightArrowLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\204 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\204 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightComposition", "type" -> "keyword", 
  "info" -> "RightComposition[f , f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
composition on the right of the functions f , f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "RightCosetRepresentative", "type" -> "keyword", 
  "info" -> "RightCosetRepresentative[group, g] returns the smallest element \
in the right coset of products of th"|>, <|"label" -> "RightDownTeeVector", 
  "type" -> "keyword", "info" -> "RightDownTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\235 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\235 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightDownVector", "type" -> "keyword", 
  "info" -> "RightDownVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\202 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\202 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightDownVectorBar", "type" -> "keyword", 
  "info" -> "RightDownVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\225 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\225 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightTee", "type" -> "keyword", "info" -> "RightTee[x, y] \
displays as x \[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\[Cent] \
y."|>, <|"label" -> "RightTeeArrow", "type" -> "keyword", 
  "info" -> "RightTeeArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\246 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\246 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightTeeVector", "type" -> "keyword", 
  "info" -> "RightTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\233 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\233 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightTriangle", "type" -> "keyword", 
  "info" -> "RightTriangle[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212b3 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212b3 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightTriangleBar", "type" -> "keyword", 
  "info" -> "RightTriangleBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Section]\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Section]\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightTriangleEqual", "type" -> "keyword", 
  "info" -> "RightTriangleEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\\[Micro] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\\[Micro] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightUpDownVector", "type" -> "keyword", 
  "info" -> "RightUpDownVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\217 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\217 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightUpTeeVector", "type" -> "keyword", 
  "info" -> "RightUpTeeVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\234 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\234 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightUpVector", "type" -> "keyword", 
  "info" -> "RightUpVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\276 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\276 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightUpVectorBar", "type" -> "keyword", 
  "info" -> "RightUpVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\224 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\224 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightVector", "type" -> "keyword", 
  "info" -> "RightVector[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\200 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\200 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RightVectorBar", "type" -> "keyword", 
  "info" -> "RightVectorBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\223 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\223 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "RipleyK", "type" -> "keyword", "info" -> "RipleyK[pdata, r] \
estimates Ripley's K function K(r) at radius r for point data \
pdata.RipleyK[pproc,"|>, <|"label" -> "RipleyRassonRegion", 
  "type" -> "keyword", "info" -> "RipleyRassonRegion[pdata] gives an \
estimated observation based on the point data pdata. "|>, 
 <|"label" -> "RiskAchievementImportance", "type" -> "keyword", 
  "info" -> "RiskAchievementImportance[rdist, t] gives the risk achievement \
importances for all components in the"|>, 
 <|"label" -> "RiskReductionImportance", "type" -> "keyword", 
  "info" -> "RiskReductionImportance[rdist, t] gives the risk reduction \
importances for all components in the Rel"|>, 
 <|"label" -> "RobustConvexOptimization", "type" -> "keyword", 
  "info" -> "RobustConvexOptimization[f, ForAll[pars, pcons, vcons], vars] \
finds values of vars that give the min"|>, 
 <|"label" -> "RogersTanimotoDissimilarity", "type" -> "keyword", 
  "info" -> "RogersTanimotoDissimilarity[u, v] gives the \
Rogers\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Tanimoto \
dissimilarity between Boolean vectors u "|>, 
 <|"label" -> "RollPitchYawAngles", "type" -> "keyword", 
  "info" -> "RollPitchYawAngles[r] gives the roll-pitch-yaw angles \
{\[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b2, \
\[CapitalATilde]\216b3} corresponding to the rotation matrix"|>, 
 <|"label" -> "RollPitchYawMatrix", "type" -> "keyword", 
  "info" -> "RollPitchYawMatrix[{\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216b3}] gives the 3D rotation matrix \
formed by rotating by \[CapitalATilde]\216\\[PlusMinus] around the initia"|>, 
 <|"label" -> "RomanNumeral", "type" -> "keyword", 
  "info" -> "RomanNumeral[n] gives a string corresponding to the Roman \
numeral form of the integer n."|>, <|"label" -> "RootApproximant", 
  "type" -> "keyword", "info" -> "RootApproximant[x] converts the number x to \
one of the \"simplest\" algebraic numbers that approximate"|>, 
 <|"label" -> "RootIntervals", "type" -> "keyword", 
  "info" -> "RootIntervals[{poly , poly , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a list of \
isolating intervals for the real roots of any of th"|>, 
 <|"label" -> "RootLocusPlot", "type" -> "keyword", 
  "info" -> "RootLocusPlot[lsys, {k, k   , k   }] generates a root locus plot \
of a linear time-invariant system l"|>, <|"label" -> "RootMeanSquare", 
  "type" -> "keyword", "info" -> "RootMeanSquare[list] gives the root mean \
square of values in list.RootMeanSquare[dist] gives the roo"|>, 
 <|"label" -> "RootOfUnityQ", "type" -> "keyword", 
  "info" -> "RootOfUnityQ[a] yields True if a is a root of unity, and yields \
False otherwise."|>, <|"label" -> "RootReduce", "type" -> "keyword", 
  "info" -> 
   "RootReduce[expr] attempts to reduce expr to a single Root object. "|>, 
 <|"label" -> "Roots", "type" -> "keyword", "info" -> "Roots[lhs == rhs, var] \
yields a disjunction of equations which represent the roots of a polynomial \
e"|>, <|"label" -> "RootSum", "type" -> "keyword", 
  "info" -> "RootSum[f, form] represents the sum of form[x] for all x that \
satisfy the polynomial equation f[x] ="|>, <|"label" -> "Rotate", 
  "type" -> "keyword", "info" -> "Rotate[g, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] represents 2D graphics \
primitives or any other objects g rotated counterclockwise by \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] "|>, 
 <|"label" -> "RotateLabel", "type" -> "keyword", 
  "info" -> "RotateLabel is an option for graphics and related functions that \
specifies whether labels on vertica"|>, <|"label" -> "RotateLeft", 
  "type" -> "keyword", "info" -> "RotateLeft[expr, n] cycles the elements in \
expr n positions to the left. RotateLeft[expr] cycles one"|>, 
 <|"label" -> "RotateRight", "type" -> "keyword", 
  "info" -> "RotateRight[expr, n] cycles the elements in expr n positions to \
the right. RotateRight[expr] cycles "|>, <|"label" -> "RotationAction", 
  "type" -> "keyword", "info" -> "RotationAction is an option for \
three-dimensional graphics functions that specifies how to render 3D"|>, 
 <|"label" -> "RotationMatrix", "type" -> "keyword", 
  "info" -> "RotationMatrix[\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] \
gives the 2D rotation matrix that rotates 2D vectors counterclockwise by \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] radians"|>, 
 <|"label" -> "RotationTransform", "type" -> "keyword", 
  "info" -> "RotationTransform[\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] \
gives a TransformationFunction that represents a rotation in 2D by \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] radians ab"|>, 
 <|"label" -> "Round", "type" -> "keyword", "info" -> "Round[x] gives the \
integer closest to x. Round[x, a] rounds to the nearest multiple of a. \n"|>, 
 <|"label" -> "RoundingRadius", "type" -> "keyword", 
  "info" -> "RoundingRadius is an option for Rectangle, Framed, and related \
functions that specifies the radius o"|>, <|"label" -> "Row", 
  "type" -> "keyword", "info" -> "Row[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is an object \
that formats with the expr  arranged in a row, potentially exten"|>, 
 <|"label" -> "RowReduce", "type" -> "keyword", 
  "info" -> "RowReduce[m] gives the \
row\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220reduced form of \
the matrix m. "|>, <|"label" -> "RSolve", "type" -> "keyword", 
  "info" -> "RSolve[eqn, a[n], n] solves a recurrence equation for a[n]. \
RSolve[{eqn , eqn , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {a [n], a [n], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246"|>, 
 <|"label" -> "RSolveValue", "type" -> "keyword", 
  "info" -> "RSolveValue[eqn, expr, n] gives the value of expr determined by \
a symbolic solution to the ordinary "|>, <|"label" -> "RudinShapiro", 
  "type" -> "keyword", "info" -> "                            \
th\nRudinShapiro[n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    term in the \
Rudin\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Shapiro \
sequence."|>, <|"label" -> "RudvalisGroupRu", "type" -> "keyword", 
  "info" -> 
   "RudvalisGroupRu[] represents the sporadic simple Rudvalis group Ru."|>, 
 <|"label" -> "Rule", "type" -> "keyword", "info" -> "lhs -> rhs or lhs \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] rhs represents a \
rule that transforms lhs to rhs. "|>, <|"label" -> "RuleCondition", 
  "type" -> "keyword", "info" -> "RuleCondition is an internal symbol."|>, 
 <|"label" -> "RuleDelayed", "type" -> "keyword", 
  "info" -> "lhs :> rhs or lhs \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\237 rhs represents a \
rule that transforms lhs to rhs, evaluating rhs only after the "|>, 
 <|"label" -> "RulePlot", "type" -> "keyword", "info" -> "RulePlot[sys] \
generates a plot representing the rule for the computational system \
sys.RulePlot[sys, "|>, <|"label" -> "RulerUnits", "type" -> "keyword", 
  "info" -> "RulerUnits is an option for notebooks that specifies the units \
in the ruler toolbar."|>, <|"label" -> "RulesTree", "type" -> "keyword", 
  "info" -> "RulesTree[data \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {rule , rule , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a tree \
whose root contains data and that has children spec"|>, 
 <|"label" -> "Run", "type" -> "keyword", "info" -> "Run[\"command\"] runs \
command as an external operating system command, returning the exit code \
obtaine"|>, <|"label" -> "RunProcess", "type" -> "keyword", 
  "info" -> "RunProcess[\"command\"] runs the specified external command, \
returning information on the outcome.\nRun"|>, 
 <|"label" -> "RunScheduledTask", "type" -> "keyword", 
  "info" -> "RunScheduledTask[expr] schedules and starts a local scheduled \
task that will repeatedly evaluate exp"|>, <|"label" -> "RunThrough", 
  "type" -> "keyword", "info" -> "RunThrough[\"command\", expr] executes an \
external command, giving the printed form of expr as input a"|>, 
 <|"label" -> "RuntimeAttributes", "type" -> "keyword", 
  "info" -> "RuntimeAttributes is an option for Compile that specifies \
attributes for the compiled function it cr"|>, 
 <|"label" -> "RuntimeOptions", "type" -> "keyword", 
  "info" -> "RuntimeOptions is an option for Compile that specifies runtime \
settings for the compiled function it"|>, 
 <|"label" -> "RussellRaoDissimilarity", "type" -> "keyword", 
  "info" -> "RussellRaoDissimilarity[u, v] gives the \
Russell\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Rao \
dissimilarity between Boolean vectors u and v."|>, 
 <|"label" -> "SameQ", "type" -> "keyword", "info" -> "lhs === rhs yields \
True if the expression lhs is identical to rhs, and yields False otherwise. "\
|>, <|"label" -> "SameTest", "type" -> "keyword", 
  "info" -> "SameTest is an option whose setting gives a pairwise comparison \
function to determine whether expres"|>, <|"label" -> "SameTestProperties", 
  "type" -> "keyword", "info" -> "SameTestProperties is an option for set \
operations on entity classes whose setting gives the propert"|>, 
 <|"label" -> "SampledEntityClass", "type" -> "keyword", 
  "info" -> "SampledEntityClass[class, n] represents an entity class \
containing n entities from class.SampledEnti"|>, 
 <|"label" -> "SampleDepth", "type" -> "keyword", 
  "info" -> "SampleDepth is an option for sound primitives that specifies how \
many bits should be used to encode "|>, <|"label" -> "SampledSoundFunction", 
  "type" -> "keyword", "info" -> "SampledSoundFunction[f, n, r] is a sound \
primitive that represents a sound whose amplitude sampled r"|>, 
 <|"label" -> "SampledSoundList", "type" -> "keyword", 
  "info" -> "SampledSoundList[{a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, r] is a sound \
primitive that represents a sound whose amplitude has le"|>, 
 <|"label" -> "SampleRate", "type" -> "keyword", 
  "info" -> "SampleRate is an option that specifies the number of samples per \
second for sound and signal process"|>, <|"label" -> "SamplingPeriod", 
  "type" -> "keyword", "info" -> "SamplingPeriod is an option to \
StateSpaceModel etc. that specifies the sampling period."|>, 
 <|"label" -> "SARIMAProcess", "type" -> "keyword", 
  "info" -> "SARIMAProcess[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }, d, {b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }, {s, \
{\[CapitalATilde]\216\\[PlusMinus] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus] }, \[CapitalATilde]\216b4, \
{\[CapitalATilde]\216b2 , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216b2 }}, v] represents a seasona"|>, 
 <|"label" -> "SARMAProcess", "type" -> "keyword", 
  "info" -> "SARMAProcess[{a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, a }, {b , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, b }, {s, \
{\[CapitalATilde]\216\\[PlusMinus] , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216\\[PlusMinus] }, {\[CapitalATilde]\216b2 , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
\[CapitalATilde]\216b2 }}, v] represents a weakly station"|>, 
 <|"label" -> "SASTriangle", "type" -> "keyword", 
  "info" -> "SASTriangle[a, \[CapitalATilde]\216b3, b] returns a filled \
triangle with sides of length a and b and angle \[CapitalATilde]\216b3 \
between them"|>, <|"label" -> "SatelliteData", "type" -> "keyword", 
  "info" -> "SatelliteData[entity, property] gives the value of the specified \
property for the satellite entity.S"|>, <|"label" -> "SatisfiabilityCount", 
  "type" -> "keyword", "info" -> "SatisfiabilityCount[bf] counts the number \
of possible combinations of variable values that yield Tru"|>, 
 <|"label" -> "SatisfiabilityInstances", "type" -> "keyword", 
  "info" -> "SatisfiabilityInstances[bf] attempts to find a choice of \
variables that makes the Boolean function b"|>, 
 <|"label" -> "SatisfiableQ", "type" -> "keyword", 
  "info" -> "SatisfiableQ[bf] gives True if a combination of values of \
variables exists that makes the Boolean fu"|>, 
 <|"label" -> "Saturday", "type" -> "keyword", 
  "info" -> "Saturday is a day of the week."|>, 
 <|"label" -> "Save", "type" -> "keyword", "info" -> "Save[\"filename\", \
symbol] appends definitions associated with the specified symbol to a file. \
Save[\"f"|>, <|"label" -> "Saveable", "type" -> "keyword", 
  "info" -> "Saveable is an option for notebooks that specifies whether a \
notebook can be saved."|>, <|"label" -> "SaveConnection", 
  "type" -> "keyword", "info" -> "SaveConnection is an option for \
ServiceConnect that determines whether the connection should be save"|>, 
 <|"label" -> "SaveDefinitions", "type" -> "keyword", 
  "info" -> "SaveDefinitions is an option to Manipulate and related functions \
that specifies whether current defi"|>, <|"label" -> "SawtoothWave", 
  "type" -> "keyword", "info" -> "SawtoothWave[x] gives a sawtooth wave that \
varies from 0 to 1 with unit period.SawtoothWave[{min, ma"|>, 
 <|"label" -> "Scale", "type" -> "keyword", "info" -> "Scale[g, s] represents \
graphics primitives g scaled by a factor s. Scale[g, s, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] scales wit"|>, 
 <|"label" -> "Scaled", "type" -> "keyword", "info" -> "Scaled[{x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
position of a graphical object in terms of coordinates scaled to run fro"|>, 
 <|"label" -> "ScaleDivisions", "type" -> "keyword", 
  "info" -> "ScaleDivisions is an option for gauge functions that specifies \
how many tick marks should be drawn o"|>, <|"label" -> "ScaleOrigin", 
  "type" -> "keyword", "info" -> "ScaleOrigin is an option for gauge \
functions that describes how to position the scale on the gauge."|>, 
 <|"label" -> "ScalePadding", "type" -> "keyword", 
  "info" -> "ScalePadding is an option for gauge functions that specifies how \
much space to leave around the scal"|>, <|"label" -> "ScaleRanges", 
  "type" -> "keyword", "info" -> "ScaleRanges is an option for gauge \
functions that describes how to draw sections of the scale."|>, 
 <|"label" -> "ScaleRangeStyle", "type" -> "keyword", 
  "info" -> "ScaleRangeStyle is an option for gauge functions to describe how \
to style different sections of the "|>, <|"label" -> "ScalingFunctions", 
  "type" -> "keyword", "info" -> "ScalingFunctions is an option for ListPlot, \
BarChart, Histogram, and other plotting functions that s"|>, 
 <|"label" -> "ScalingMatrix", "type" -> "keyword", 
  "info" -> "ScalingMatrix[{s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
matrix corresponding to scaling by a factor s  along each coord"|>, 
 <|"label" -> "ScalingTransform", "type" -> "keyword", 
  "info" -> "ScalingTransform[{s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a \
TransformationFunction that represents scaling by a factor s  "|>, 
 <|"label" -> "Scan", "type" -> "keyword", "info" -> "Scan[f, expr] evaluates \
f applied to each element of expr in turn. Scan[f, expr, levelspec] applies "\
|>, <|"label" -> "ScheduledTask", "type" -> "keyword", 
  "info" -> "ScheduledTask[expr, timespec] represents a scheduled task to be \
evaluated on the schedule defined by"|>, <|"label" -> "ScheduledTaskActiveQ", 
  "type" -> "keyword", "info" -> "ScheduledTaskActiveQ[obj] yields True if \
obj represents an active task, and False otherwise."|>, 
 <|"label" -> "ScheduledTaskInformation", "type" -> "keyword", 
  "info" -> "ScheduledTaskInformation[CloudObject] returns information about \
a task.\nScheduledTaskInformation[Clo"|>, <|"label" -> "ScheduledTaskObject", 
  "type" -> "keyword", "info" -> "ScheduledTaskObject[id, expr, spec, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is a task object \
specifying future evaluation of expr accordi"|>, 
 <|"label" -> "ScheduledTasks", "type" -> "keyword", 
  "info" -> "ScheduledTasks[] returns a list of ScheduledTaskObject and \
CloudObject expressions that represent cu"|>, 
 <|"label" -> "SchurDecomposition", "type" -> "keyword", 
  "info" -> "SchurDecomposition[m] yields the Schur decomposition for a \
numerical matrix m, given as a list {q, t"|>, <|"label" -> "ScientificForm", 
  "type" -> "keyword", "info" -> "ScientificForm[expr] prints with all real \
numbers in expr given in scientific notation. ScientificFo"|>, 
 <|"label" -> "ScientificNotationThreshold", "type" -> "keyword", 
  "info" -> "ScientificNotationThreshold is an option for NumberForm and \
related functions that specifies the thr"|>, <|"label" -> "ScorerGi", 
  "type" -> "keyword", "info" -> 
   "ScorerGi[z] gives the Scorer function Gi(z)."|>, 
 <|"label" -> "ScorerGiPrime", "type" -> "keyword", 
  "info" -> "                                                               \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200b2\nScorerGiPrime[z] gives the \
derivati"|>, <|"label" -> "ScorerHi", "type" -> "keyword", 
  "info" -> "ScorerHi[z] gives the Scorer function Hi(z)."|>, 
 <|"label" -> "ScorerHiPrime", "type" -> "keyword", 
  "info" -> "                                                               \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200b2\nScorerHiPrime[z] gives the \
derivati"|>, <|"label" -> "ScreenRectangle", "type" -> "keyword", 
  "info" -> "ScreenRectangle is a global option that specifies the position \
of the primary screen by giving the c"|>, 
 <|"label" -> "ScreenStyleEnvironment", "type" -> "keyword", 
  "info" -> "ScreenStyleEnvironment is an option for notebooks that specifies \
the style environment to be used in"|>, <|"label" -> "ScriptBaselineShifts", 
  "type" -> "keyword", "info" -> "ScriptBaselineShifts is an option for Style \
that specifies the minimum distance in \
x\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220heights to shif"|>\
, <|"label" -> "ScriptLevel", "type" -> "keyword", 
  "info" -> "ScriptLevel is an option for selections that is used in \
determining the font size of modifiers such "|>, 
 <|"label" -> "ScriptMinSize", "type" -> "keyword", 
  "info" -> "ScriptMinSize is an option for Style which specifies the minimum \
font size to use in rendering subsc"|>, <|"label" -> "ScriptSizeMultipliers", 
  "type" -> "keyword", "info" -> "ScriptSizeMultipliers is an option for \
Style that specifies how much smaller to render each successi"|>, 
 <|"label" -> "Scrollbars", "type" -> "keyword", 
  "info" -> "Scrollbars is an option for Pane that specifies whether \
scrollbars should be displayed."|>, <|"label" -> "ScrollingOptions", 
  "type" -> "keyword", "info" -> "ScrollingOptions is an option for notebooks \
that specifies settings for scrolling."|>, <|"label" -> "ScrollPosition", 
  "type" -> "keyword", "info" -> "ScrollPosition is an option for Pane that \
specifies the scroll position of the contents of the pane."|>, 
 <|"label" -> "SearchAdjustment", "type" -> "keyword", 
  "info" -> "SearchAdjustment[query, w] represents a component of a search \
query that is to be treated as having "|>, <|"label" -> "SearchIndexObject", 
  "type" -> "keyword", "info" -> "SearchIndexObject[loc] represents a search \
index object, as created by CreateSearchIndex.SearchIndex"|>, 
 <|"label" -> "SearchIndices", "type" -> "keyword", 
  "info" -> "SearchIndices[] returns a list with all the locally stored \
instances of SearchIndexObject."|>, <|"label" -> "SearchQueryString", 
  "type" -> "keyword", "info" -> "SearchQueryString[\"query\"] represents a \
search engine-style query in TextSearch and related function"|>, 
 <|"label" -> "SearchResultObject", "type" -> "keyword", 
  "info" -> "SearchResultObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a result from \
TextSearch[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] and \
related functions."|>, <|"label" -> "Sec", "type" -> "keyword", 
  "info" -> "Sec[z] gives the secant of z. "|>, 
 <|"label" -> "Sech", "type" -> "keyword", 
  "info" -> "Sech[z] gives the hyperbolic secant of z. "|>, 
 <|"label" -> "SechDistribution", "type" -> "keyword", 
  "info" -> "SechDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents the hyperbolic secant \
distribution with location parameter \[CapitalATilde]\216\[CapitalAHat]\274 \
and s"|>, <|"label" -> "SecondOrderConeOptimization", "type" -> "keyword", 
  "info" -> "SecondOrderConeOptimization[f, cons, vars] finds values of \
variables vars that minimize the linear o"|>, <|"label" -> "SectorChart", 
  "type" -> "keyword", "info" -> "SectorChart[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a sector \
chart with sector angles proportional to x  and "|>, 
 <|"label" -> "SectorChart3D", "type" -> "keyword", 
  "info" -> "SectorChart3D[{{x , y , z }, {x , y , z }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a 3D \
sector chart with sector angle proportiona"|>, 
 <|"label" -> "SectorOrigin", "type" -> "keyword", 
  "info" -> "SectorOrigin is an option to PieChart and related functions that \
specifies where sectors should star"|>, <|"label" -> "SectorSpacing", 
  "type" -> "keyword", "info" -> "SectorSpacing is an option to PieChart and \
related functions that specifies radial spacing of sector"|>, 
 <|"label" -> "SecuredAuthenticationKey", "type" -> "keyword", 
  "info" -> "SecuredAuthenticationKey[assoc] represents a secured \
authentication key with credentials and detail"|>, 
 <|"label" -> "SecuredAuthenticationKeys", "type" -> "keyword", 
  "info" -> "SecuredAuthenticationKeys[] retrieves a list of all instances of \
SecuredAuthenticationKey owned by t"|>, <|"label" -> "SecurityCertificate", 
  "type" -> "keyword", "info" -> "SecurityCertificate[assoc] represents the \
security certificate issued for a public key."|>, 
 <|"label" -> "SeedRandom", "type" -> "keyword", 
  "info" -> "SeedRandom[s] resets the pseudorandom generator, using s as a \
seed. SeedRandom[] resets the generato"|>, <|"label" -> "Select", 
  "type" -> "keyword", "info" -> "Select[list, crit] picks out all elements e \
 of list for which crit[e ] is True. Select[list, crit, "|>, 
 <|"label" -> "SelectComponents", "type" -> "keyword", 
  "info" -> "SelectComponents[{image, lmat}, crit] selects components of \
image indicated by the label matrix lmat"|>, <|"label" -> "SelectedCells", 
  "type" -> "keyword", "info" -> "SelectedCells[notebook] returns a list of \
CellObject expressions corresponding to the currently sele"|>, 
 <|"label" -> "SelectFirst", "type" -> "keyword", 
  "info" -> "SelectFirst[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, crit] gives the \
first e  for which crit[e ] is True, or Missing[\"NotFound\"]"|>, 
 <|"label" -> "SelectionAnimate", "type" -> "keyword", 
  "info" -> "SelectionAnimate[notebook] animates graphics in the current \
selection in a notebook. SelectionAnimat"|>, 
 <|"label" -> "SelectionCreateCell", "type" -> "keyword", 
  "info" -> "SelectionCreateCell[notebook] copies the contents of the current \
selection in a notebook into a new "|>, <|"label" -> "SelectionEvaluate", 
  "type" -> "keyword", "info" -> "SelectionEvaluate[notebook] replaces the \
current selection in a notebook with the result obtained by"|>, 
 <|"label" -> "SelectionEvaluateCreateCell", "type" -> "keyword", 
  "info" -> "SelectionEvaluateCreateCell[notebook] takes the current \
selection in a notebook and creates a new ce"|>, 
 <|"label" -> "SelfLoopStyle", "type" -> "keyword", 
  "info" -> "SelfLoopStyle is an option for GraphPlot and related functions \
that specifies how to draw self-loops"|>, <|"label" -> "SemanticImport", 
  "type" -> "keyword", "info" -> "SemanticImport[file] attempts to import a \
file semantically to give a Dataset object.SemanticImport["|>, 
 <|"label" -> "SemanticImportString", "type" -> "keyword", 
  "info" -> "SemanticImportString[\"string\"] attempts to import a string \
semantically to give a Dataset object.Sem"|>, 
 <|"label" -> "SemanticInterpretation", "type" -> "keyword", 
  "info" -> "SemanticInterpretation[\"string\"] attempts to give the best \
semantic interpretation of the specified "|>, 
 <|"label" -> "SemialgebraicComponentInstances", "type" -> "keyword", 
  "info" -> "SemialgebraicComponentInstances[ineqs, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives at least \
one sample point in each connecte"|>, <|"label" -> "SendMail", 
  "type" -> "keyword", "info" -> "SendMail[body] sends mail consisting of \
body to the address specified by ECCloudUserID.SendMail[{\"sub"|>, 
 <|"label" -> "SendMessage", "type" -> "keyword", 
  "info" -> "SendMessage[channel, message] sends a message to the specified \
channel.SendMessage[channel \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] dest, m"|>, 
 <|"label" -> "Sequence", "type" -> "keyword", "info" -> "Sequence[expr , \
expr , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] \
represents a sequence of arguments to be spliced automatically into any fu"|>\
, <|"label" -> "SequenceAlignment", "type" -> "keyword", 
  "info" -> "SequenceAlignment[s , s ] finds an optimal alignment of \
sequences of elements in the strings or list"|>, 
 <|"label" -> "SequenceAttentionLayer", "type" -> "keyword", 
  "info" -> "SequenceAttentionLayer[] is equivalent to AttentionLayer[] with \
a single \"Input\" port instead of por"|>, <|"label" -> "SequenceCases", 
  "type" -> "keyword", "info" -> "SequenceCases[list, patt] gives a list of \
the sublists in list that match the sequence pattern patt."|>, 
 <|"label" -> "SequenceCount", "type" -> "keyword", 
  "info" -> "SequenceCount[list, sub] gives a count of the number of times \
sub appears as a sublist of list.Seque"|>, <|"label" -> "SequenceFold", 
  "type" -> "keyword", "info" -> "SequenceFold[f, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the last \
element of SequenceFoldList[f, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x },"|>, 
 <|"label" -> "SequenceFoldList", "type" -> "keyword", 
  "info" -> "SequenceFoldList[f, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x , f[x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x , a ], f[x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x , f[x ,"|>, 
 <|"label" -> "SequenceForm", "type" -> "keyword", 
  "info" -> "SequenceForm[expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] prints as the \
textual concatenation of the printed forms of the expr ."|>, 
 <|"label" -> "SequenceHold", "type" -> "keyword", 
  "info" -> "SequenceHold is an attribute that specifies that Sequence \
objects appearing in the arguments of a fu"|>, 
 <|"label" -> "SequenceIndicesLayer", "type" -> "keyword", 
  "info" -> "SequenceIndicesLayer[] represents a net layer that produces a \
list of indices for an input sequence."|>, <|"label" -> "SequenceLastLayer", 
  "type" -> "keyword", "info" -> "SequenceLastLayer[] represents a net that \
takes a sequence of inputs and returns the last element of"|>, 
 <|"label" -> "SequenceMostLayer", "type" -> "keyword", 
  "info" -> "SequenceMostLayer[] represents a net that takes a sequence of \
inputs and removes its last element."|>, <|"label" -> "SequencePosition", 
  "type" -> "keyword", "info" -> "SequencePosition[list, sublist] gives a \
list of the starting and ending positions at which sublist a"|>, 
 <|"label" -> "SequencePredict", "type" -> "keyword", 
  "info" -> "SequencePredict[{seq , seq , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
SequencePredictorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] based on the sequences giv"|>, 
 <|"label" -> "SequencePredictorFunction", "type" -> "keyword", 
  "info" -> "SequencePredictorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246] represents a function generated by SequencePredict \
that predicts the ne"|>, <|"label" -> "SequenceReplace", "type" -> "keyword", 
  "info" -> "SequenceReplace[list, rules] replaces sequences in list \
according to the specified rule or list of r"|>, 
 <|"label" -> "SequenceRestLayer", "type" -> "keyword", 
  "info" -> "SequenceRestLayer[] represents a net that takes a sequence of \
inputs and removes its first element."|>, 
 <|"label" -> "SequenceReverseLayer", "type" -> "keyword", 
  "info" -> "SequenceReverseLayer[] represents a net that reverses the order \
of an input sequence."|>, <|"label" -> "SequenceSplit", "type" -> "keyword", 
  "info" -> "SequenceSplit[list, patt] splits list into sublists separated by \
sequences that match the sequence p"|>, <|"label" -> "SeriesCoefficient", 
  "type" -> "keyword", "info" -> "                                            \
                 th                                     "|>, 
 <|"label" -> "SeriesData", "type" -> "keyword", 
  "info" -> "SeriesData[x, x , {a , a , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, n   , n   , \
den] represents a power series in the variable x about th"|>, 
 <|"label" -> "SeriesTermGoal", "type" -> "keyword", 
  "info" -> "SeriesTermGoal is an option for Asymptotic, DiscreteAsymptotic \
and similar functions that specifies "|>, <|"label" -> "ServiceConnect", 
  "type" -> "keyword", "info" -> "ServiceConnect[\"service\"] creates a \
connection to an external service.ServiceConnect[\"service\", id] "|>, 
 <|"label" -> "ServiceDisconnect", "type" -> "keyword", 
  "info" -> "ServiceDisconnect[service] disconnects from an external service \
specified by a ServiceObject."|>, <|"label" -> "ServiceExecute", 
  "type" -> "keyword", "info" -> "ServiceExecute[service, \"req\"] executes \
\"req\" on an external service.ServiceExecute[service, \"req\", "|>, 
 <|"label" -> "ServiceObject", "type" -> "keyword", 
  "info" -> "ServiceObject[\"service\", \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an \
open connection to an external service."|>, <|"label" -> "ServiceRequest", 
  "type" -> "keyword", "info" -> "ServiceRequest[service, \"req\"] represents \
a service request built from service, which might be a con"|>, 
 <|"label" -> "ServiceSubmit", "type" -> "keyword", 
  "info" -> "ServiceSubmit[ServiceRequest[assoc]] submits a request to be \
executed by an external service specifi"|>, <|"label" -> "SessionSubmit", 
  "type" -> "keyword", "info" -> "SessionSubmit[expr] submits an asynchronous \
task to evaluate expr in the current session.SessionSubm"|>, 
 <|"label" -> "SessionTime", "type" -> "keyword", 
  "info" -> "SessionTime[] gives the total number of seconds of real time \
that have elapsed since the beginning o"|>, 
 <|"label" -> "Set", "type" -> "keyword", "info" -> "lhs = rhs evaluates rhs \
and assigns the result to be the value of lhs. From then on, lhs is replaced"\
|>, <|"label" -> "SetAccuracy", "type" -> "keyword", 
  "info" -> "SetAccuracy[expr, a] yields a version of expr in which all \
numbers have been set to have accuracy a."|>, <|"label" -> "SetAlphaChannel", 
  "type" -> "keyword", "info" -> "SetAlphaChannel[color] adds full opacity to \
color.SetAlphaChannel[color, a] adds opacity a to color."|>, 
 <|"label" -> "SetAttributes", "type" -> "keyword", 
  "info" -> "SetAttributes[symbol, attr] adds attr to the list of attributes \
of the symbol symbol. SetAttributes["|>, <|"label" -> "SetCookies", 
  "type" -> "keyword", "info" -> "SetCookies[assoc] sets cookies with \
attributes specified by the association assoc, to be used by fun"|>, 
 <|"label" -> "SetDelayed", "type" -> "keyword", 
  "info" -> "lhs := rhs assigns rhs to be the delayed value of lhs. rhs is \
maintained in an unevaluated form. Whe"|>, <|"label" -> "SetDirectory", 
  "type" -> "keyword", "info" -> "SetDirectory[\"dir\"] sets the current \
working directory to dir. SetDirectory[] sets the current worki"|>, 
 <|"label" -> "SetEnvironment", "type" -> "keyword", 
  "info" -> "SetEnvironment[\"var\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value] sets the \
value of an operating system environment variable.SetEnvironm"|>, 
 <|"label" -> "SetFileDate", "type" -> "keyword", 
  "info" -> "SetFileDate[\"file\"] sets the modification and access dates for \
a file to be the current date. "|>, <|"label" -> "SetFileFormatProperties", 
  "type" -> "keyword", "info" -> "SetFileFormatProperties[\"fmt\", \"prop\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val] sets the \
value of a property \"prop\" for the specified f"|>, 
 <|"label" -> "SetOptions", "type" -> "keyword", 
  "info" -> "SetOptions[s, name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value , name  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] sets the \
specified default options for a symbol s. "|>, 
 <|"label" -> "SetPrecision", "type" -> "keyword", 
  "info" -> "SetPrecision[expr, p] yields a version of expr in which all \
numbers have been set to have precision "|>, <|"label" -> "SetProperty", 
  "type" -> "keyword", "info" -> "SetProperty[{obj, itemspec}, name \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value] sets the \
property name \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
value for itemspec in obj."|>, <|"label" -> "SetSharedFunction", 
  "type" -> "keyword", "info" -> "SetSharedFunction[f , f , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] declares the \
symbols f  as shared functions whose downvalues are synchr"|>, 
 <|"label" -> "SetSharedVariable", "type" -> "keyword", 
  "info" -> "SetSharedVariable[s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] declares the \
symbols s  as shared variables whose values are synchroniz"|>, 
 <|"label" -> "SetStreamPosition", "type" -> "keyword", 
  "info" -> 
   "SetStreamPosition[stream, n] sets the current point in an open stream. "|>\
, <|"label" -> "Setter", "type" -> "keyword", "info" -> "Setter[x, val] \
represents a setter button whose setting x is set to val when the button is \
clicked. "|>, <|"label" -> "SetterBar", "type" -> "keyword", 
  "info" -> "SetterBar[x, {val , val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
setter bar with setting x and with setter buttons for val"|>, 
 <|"label" -> "SetUsers", "type" -> "keyword", "info" -> "SetUsers[group, \
{user , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] sets \
the members of the permissions group group to be {user , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}.\n      "|>, 
 <|"label" -> "Shading", "type" -> "keyword", "info" -> "Shading is an option \
for SurfaceGraphics that specifies whether the surfaces should be shaded. "|>\
, <|"label" -> "Shallow", "type" -> "keyword", "info" -> "Shallow[expr] \
prints as a shallow form of expr. Shallow[expr, depth] prints with all parts \
of expr b"|>, <|"label" -> "ShannonWavelet", "type" -> "keyword", 
  "info" -> "ShannonWavelet[] represents the Shannon wavelet evaluated on the \
equally spaced interval {-10, 10}. "|>, <|"label" -> "ShapiroWilkTest", 
  "type" -> "keyword", "info" -> "ShapiroWilkTest[data] tests whether data is \
normally distributed using the \
Shapiro\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Wilk \
test.Shapiro"|>, <|"label" -> "Share", "type" -> "keyword", 
  "info" -> "Share[expr] changes the way expr is stored internally, to try \
and minimize the amount of memory used"|>, <|"label" -> "SharingList", 
  "type" -> "keyword", "info" -> "SharingList is an option for CloudObject \
and related constructs that specifies with whom the object "|>, 
 <|"label" -> "Sharpen", "type" -> "keyword", "info" -> "Sharpen[image] gives \
a sharpened version of image.Sharpen[image, r] gives a version of image \
sharpen"|>, <|"label" -> "ShearingMatrix", "type" -> "keyword", 
  "info" -> "ShearingMatrix[\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], v, \
n] gives the matrix corresponding to shearing by \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] radians along the direction "|>, 
 <|"label" -> "ShearingTransform", "type" -> "keyword", 
  "info" -> "ShearingTransform[\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
v, n] gives a TransformationFunction that represents a shear by \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla] radians along"|>, 
 <|"label" -> "ShellRegion", "type" -> "keyword", 
  "info" -> "ShellRegion[reg] gives a solid shell of a 3D region \
reg.ShellRegion[reg, t] gives a solid shell of r"|>, 
 <|"label" -> "ShiftedGompertzDistribution", "type" -> "keyword", 
  "info" -> "ShiftedGompertzDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet], \[CapitalATilde]\216\[CapitalAHat]\276] represents a \
shifted Gompertz distribution with scale parameter \
\[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet] "|>, 
 <|"label" -> "ShiftRegisterSequence", "type" -> "keyword", 
  "info" -> "ShiftRegisterSequence[n] gives a complete maximum-length \
sequence for a size n linear-feedback shift"|>, 
 <|"label" -> "Short", "type" -> "keyword", "info" -> "Short[expr] prints as \
a short form of expr, less than about one line long. Short[expr, n] prints as \
"|>, <|"label" -> "ShortDownArrow", "type" -> "keyword", 
  "info" -> "ShortDownArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[LeftGuillemet] y \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[LeftGuillemet] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Shortest", "type" -> "keyword", "info" -> "Shortest[p] is a \
pattern object that matches the shortest sequence consistent with the pattern \
p. "|>, <|"label" -> "ShortestMatch", "type" -> "keyword", 
  "info" -> "ShortestMatch[p] is a string pattern object matching the \
shortest sequence of characters consistent "|>, 
 <|"label" -> "ShortestPathFunction", "type" -> "keyword", 
  "info" -> "ShortestPathFunction[type, data] represents a function that \
gives the shortest path from a source ve"|>, <|"label" -> "ShortLeftArrow", 
  "type" -> "keyword", "info" -> "ShortLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\246 y \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\246 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ShortRightArrow", "type" -> "keyword", 
  "info" -> "ShortRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Yen] y \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Yen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "ShortTimeFourier", "type" -> "keyword", 
  "info" -> "ShortTimeFourier[data] returns the short-time Fourier transform \
(STFT) of data as a ShortTimeFourier"|>, <|"label" -> "ShortTimeFourierData", 
  "type" -> "keyword", "info" -> "ShortTimeFourierData[assoc] represents the \
result and properties of a short-time Fourier transform ("|>, 
 <|"label" -> "ShortUpArrow", "type" -> "keyword", 
  "info" -> "ShortUpArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\252 y \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\252 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Show", "type" -> "keyword", "info" -> "Show[graphics, options] \
shows graphics with the specified options added. Show[g , g , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] shows sever"|>, 
 <|"label" -> "ShowAutoSpellCheck", "type" -> "keyword", 
  "info" -> "ShowAutoSpellCheck is an option for Cell that specifies whether \
to highlight misspelled words."|>, <|"label" -> "ShowAutoStyles", 
  "type" -> "keyword", "info" -> "ShowAutoStyles is an option for Cell that \
specifies whether styles that are specified to be automati"|>, 
 <|"label" -> "ShowCellBracket", "type" -> "keyword", 
  "info" -> "ShowCellBracket is an option for Cell that specifies whether to \
display the bracket that indicates t"|>, <|"label" -> "ShowCursorTracker", 
  "type" -> "keyword", "info" -> "ShowCursorTracker is an option for Cell \
that specifies whether an elliptical spot should appear mome"|>, 
 <|"label" -> "ShowPageBreaks", "type" -> "keyword", 
  "info" -> "ShowPageBreaks is a notebook option that specifies whether to \
indicate in the \
on\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220screen display \
of a"|>, <|"label" -> "ShrinkingDelay", "type" -> "keyword", 
  "info" -> "ShrinkingDelay is an option for dynamic objects that specifies \
how long to delay before shrinking th"|>, <|"label" -> "SiderealTime", 
  "type" -> "keyword", "info" -> "SiderealTime[] gives the right ascension of \
the local meridian for the current date and location.Sid"|>, 
 <|"label" -> "SiegelTheta", "type" -> "keyword", 
  "info" -> "SiegelTheta[\[CapitalATilde]\216\[CapitalAHat]\[Copyright], s] \
gives the Siegel theta function \[CapitalATilde]\216\[CapitalAHat]\230 \
(\[CapitalATilde]\216\[CapitalAHat]\[Copyright], s) with Riemann modular \
matrix \[CapitalATilde]\216\[CapitalAHat]\[Copyright] and vector "|>, 
 <|"label" -> "SierpinskiCurve", "type" -> "keyword", 
  "info" -> "                                                              \
th\nSierpinskiCurve[n] gives the line s"|>, <|"label" -> "SierpinskiMesh", 
  "type" -> "keyword", "info" -> "                                            \
             th                                         "|>, 
 <|"label" -> "Sign", "type" -> "keyword", "info" -> "Sign[x] gives -1, 0, or \
1 depending on whether x is negative, zero, or positive. "|>, 
 <|"label" -> "Signature", "type" -> "keyword", 
  "info" -> "Signature[list] gives the signature of the permutation needed to \
place the elements of list in canon"|>, <|"label" -> "SignedRankTest", 
  "type" -> "keyword", "info" -> "SignedRankTest[data] tests whether the \
median of data is zero. SignedRankTest[{data , data }] tests "|>, 
 <|"label" -> "SignedRegionDistance", "type" -> "keyword", 
  "info" -> "SignedRegionDistance[reg, p] gives the minimum distance from the \
point p to the region reg if p is o"|>, <|"label" -> "SignificanceLevel", 
  "type" -> "keyword", "info" -> "SignificanceLevel is an option to \
VarianceTest and similar functions that controls cutoffs for diagn"|>, 
 <|"label" -> "SignPadding", "type" -> "keyword", 
  "info" -> "SignPadding is an option for NumberForm and related functions \
that specifies whether padding should "|>, <|"label" -> "SignTest", 
  "type" -> "keyword", "info" -> "SignTest[data] tests whether the median of \
data is zero. SignTest[{data , data }] tests whether the "|>, 
 <|"label" -> "SimilarityRules", "type" -> "keyword", 
  "info" -> "SimilarityRules is an option for functions such as \
SequenceAlignment that gives a list of rules for "|>, 
 <|"label" -> "SimpleGraph", "type" -> "keyword", 
  "info" -> "SimpleGraph[g] gives the underlying simple graph from the graph \
g.SimpleGraph[{v \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
w, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] uses rules"|>\
, <|"label" -> "SimpleGraphQ", "type" -> "keyword", 
  "info" -> "SimpleGraphQ[g] yields True if the graph g is a simple graph and \
False otherwise."|>, <|"label" -> "SimplePolygonQ", "type" -> "keyword", 
  "info" -> "SimplePolygonQ[poly] gives True if the polygon poly is simple \
and False otherwise."|>, <|"label" -> "SimplePolyhedronQ", 
  "type" -> "keyword", "info" -> "SimplePolyhedronQ[poly] gives True if the \
polyhedron poly is simple and False otherwise."|>, 
 <|"label" -> "Simplex", "type" -> "keyword", "info" -> "Simplex[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] represents \
the simplex spanned by points p .\n          1      k                "|>, 
 <|"label" -> "Simplify", "type" -> "keyword", "info" -> "Simplify[expr] \
performs a sequence of algebraic and other transformations on expr and \
returns the si"|>, <|"label" -> "Sin", "type" -> "keyword", 
  "info" -> "Sin[z] gives the sine of z. "|>, 
 <|"label" -> "Sinc", "type" -> "keyword", 
  "info" -> "Sinc[z] gives sinc(z). "|>, 
 <|"label" -> "SinghMaddalaDistribution", "type" -> "keyword", 
  "info" -> "SinghMaddalaDistribution[q, a, b] represents the \
Singh\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Maddala \
distribution with shape parameters q "|>, <|"label" -> "SingleLetterItalics", 
  "type" -> "keyword", "info" -> "SingleLetterItalics is an option for Cell \
that specifies whether \
single\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220letter names \
should be displ"|>, <|"label" -> "SingularValueDecomposition", 
  "type" -> "keyword", "info" -> "SingularValueDecomposition[m] gives the \
singular value decomposition for a numerical matrix m as a l"|>, 
 <|"label" -> "SingularValueList", "type" -> "keyword", 
  "info" -> "SingularValueList[m] gives a list of the nonzero singular values \
of a matrix m. SingularValueList[{m"|>, <|"label" -> "SingularValuePlot", 
  "type" -> "keyword", "info" -> "SingularValuePlot[lsys] generates a plot of \
the singular values of the transfer function for the sys"|>, 
 <|"label" -> "SingularValues", "type" -> "keyword", 
  "info" -> "SingularValues[m] gives the singular value decomposition for a \
numerical matrix m. The result is a l"|>, <|"label" -> "Sinh", 
  "type" -> "keyword", "info" -> 
   "Sinh[z] gives the hyperbolic sine of z. "|>, 
 <|"label" -> "SinhIntegral", "type" -> "keyword", 
  "info" -> 
   "SinhIntegral[z] gives the hyperbolic sine integral function Shi(z). "|>, 
 <|"label" -> "SinIntegral", "type" -> "keyword", 
  "info" -> "SinIntegral[z] gives the sine integral function Si (z). "|>, 
 <|"label" -> "SixJSymbol", "type" -> "keyword", 
  "info" -> "SixJSymbol[{j , j , j }, {j , j , j }] gives the values of the \
Racah 6\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220j symbol. \
\n             1   2"|>, <|"label" -> "Skeleton", "type" -> "keyword", 
  "info" -> "Skeleton[n] represents a sequence of n omitted elements in an \
expression printed with Short or Shall"|>, <|"label" -> "SkeletonTransform", 
  "type" -> "keyword", "info" -> "SkeletonTransform[image] gives the skeleton \
transform of image, in which the value of each skeleton "|>, 
 <|"label" -> "SkellamDistribution", "type" -> "keyword", 
  "info" -> "SkellamDistribution[\[CapitalATilde]\216\[CapitalAHat]\274 , \
\[CapitalATilde]\216\[CapitalAHat]\274 ] represents a Skellam distribution \
with shape parameters \[CapitalATilde]\216\[CapitalAHat]\274  and \
\[CapitalATilde]\216\[CapitalAHat]\274 .\n     "|>, 
 <|"label" -> "Skewness", "type" -> "keyword", "info" -> "Skewness[list] \
gives the coefficient of skewness for the elements in list.Skewness[dist] \
gives the c"|>, <|"label" -> "SkewNormalDistribution", "type" -> "keyword", 
  "info" -> "SkewNormalDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203, \[CapitalATilde]\216\\[PlusMinus]] \
represents a skew-normal distribution with shape parameter \
\[CapitalATilde]\216\\[PlusMinus], locati"|>, 
 <|"label" -> "SkinStyle", "type" -> "keyword", 
  "info" -> "SkinStyle is an option of AnatomyPlot3D that specifies what \
style to use for automatically included "|>, 
 <|"label" -> "Skip", "type" -> "keyword", "info" -> "Skip[stream, type] \
skips one object of the specified type in an input stream. Skip[stream, type, \
n] "|>, <|"label" -> "SliceContourPlot3D", "type" -> "keyword", 
  "info" -> "SliceContourPlot3D[f, surf, {x, x   , x   }, {y, y   , y   }, \
{z, z   , z   }] generates a contour p"|>, <|"label" -> "SliceDensityPlot3D", 
  "type" -> "keyword", "info" -> "SliceDensityPlot3D[f, surf, {x, x   , x   \
}, {y, y   , y   }, {z, z   , z   }] generates a density p"|>, 
 <|"label" -> "SliceDistribution", "type" -> "keyword", 
  "info" -> "SliceDistribution[proc, t] represents the distribution of the \
process state at time t.SliceDistribut"|>, <|"label" -> "SliceVectorPlot3D", 
  "type" -> "keyword", "info" -> "SliceVectorPlot3D[{v , v , v }, surf, {x, x \
  , x   }, {y, y   , y   }, {z, z   , z   }] generates a"|>, 
 <|"label" -> "Slot", "type" -> "keyword", "info" -> "                        \
                                                          th\n# represents \
th"|>, <|"label" -> "Small", "type" -> "keyword", 
  "info" -> "Small is a style or option setting that specifies that objects \
should be small."|>, <|"label" -> "SmallCircle", "type" -> "keyword", 
  "info" -> "SmallCircle[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\230 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\230 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Smaller", "type" -> "keyword", "info" -> "Smaller is a style \
or option setting that specifies that objects should be smaller."|>, 
 <|"label" -> "SmithDecomposition", "type" -> "keyword", 
  "info" -> "SmithDecomposition[m] gives the Smith normal form decomposition \
of an integer matrix m."|>, <|"label" -> "SmithDelayCompensator", 
  "type" -> "keyword", "info" -> "SmithDelayCompensator[sys, con] gives the \
Smith compensator for the time-delay system sys and the de"|>, 
 <|"label" -> "SmithWatermanSimilarity", "type" -> "keyword", 
  "info" -> "SmithWatermanSimilarity[u, v] gives a number representing the \
Smith\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Waterman \
similarity between stri"|>, <|"label" -> "SmoothDensityHistogram", 
  "type" -> "keyword", "info" -> "SmoothDensityHistogram[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a smooth \
kernel histogram of the values {x , y"|>, <|"label" -> "SmoothHistogram", 
  "type" -> "keyword", "info" -> "SmoothHistogram[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a smooth \
kernel histogram for the PDF of the values x .SmoothHist"|>, 
 <|"label" -> "SmoothHistogram3D", "type" -> "keyword", 
  "info" -> "SmoothHistogram3D[{{x , y }, {x , y }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots a 3D \
smooth kernel histogram of the values {x , y }"|>, 
 <|"label" -> "SmoothKernelDistribution", "type" -> "keyword", 
  "info" -> "SmoothKernelDistribution[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
smooth kernel distribution based on the data valu"|>, 
 <|"label" -> "SmoothPointDensity", "type" -> "keyword", 
  "info" -> "SmoothPointDensity[pdata] estimates the point density function \
\[CapitalATilde]\216\[CapitalAHat]\274(x) for point data pdata.SmoothPoint"|>\
, <|"label" -> "SnDispersion", "type" -> "keyword", 
  "info" -> "SnDispersion[list] gives the S  statistic of the elements in \
list.SnDispersion[list, c] gives the S "|>, <|"label" -> "Snippet", 
  "type" -> "keyword", "info" -> "Snippet[doc] gives a snippet of text from a \
document or other content object.Snippet[doc, n] gives a"|>, 
 <|"label" -> "SnippetsVideo", "type" -> "keyword", 
  "info" -> "SnippetsVideo[video, n] returns a summary video based on n \
snippets from video.SnippetsVideo[video, "|>, <|"label" -> "SnubPolyhedron", 
  "type" -> "keyword", "info" -> "SnubPolyhedron[poly] gives the snub \
polyhedron of poly by truncating some corners."|>, 
 <|"label" -> "SocialMediaData", "type" -> "keyword", 
  "info" -> "SocialMediaData[\"name\"] gives information about the social \
media entity \"name\".SocialMediaData[\"name"|>, 
 <|"label" -> "Socket", "type" -> "keyword", 
  "info" -> 
   "Socket is a possible value returned by FileType and related functions."|>\
, <|"label" -> "SocketConnect", "type" -> "keyword", 
  "info" -> "SocketConnect[address] makes a socket connection to the TCP host \
at the specified address and return"|>, <|"label" -> "SocketListen", 
  "type" -> "keyword", "info" -> "SocketListen[socket, fun] starts listening \
on the specified socket, asynchronously applying fun when"|>, 
 <|"label" -> "SocketListener", "type" -> "keyword", 
  "info" -> "SocketListener[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a socket listener created by SocketListen."|>, 
 <|"label" -> "SocketObject", "type" -> "keyword", 
  "info" -> "SocketObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a network socket connection."|>, 
 <|"label" -> "SocketOpen", "type" -> "keyword", 
  "info" -> "SocketOpen[port] opens a socket that accepts TCP connections to \
localhost:port and returns a SocketO"|>, <|"label" -> "SocketReadMessage", 
  "type" -> "keyword", "info" -> "SocketReadMessage[socket] reads the next \
available message on the specified socket, returning it as "|>, 
 <|"label" -> "SocketReadyQ", "type" -> "keyword", 
  "info" -> "SocketReadyQ[socket] tests if there is any data immediately \
available to read from the specified soc"|>, <|"label" -> "Sockets", 
  "type" -> "keyword", "info" -> "Sockets[] returns all active socket \
connections initiated by your current Wolfram Language session.S"|>, 
 <|"label" -> "SocketWaitAll", "type" -> "keyword", 
  "info" -> "SocketWaitAll[{socket , socket , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] waits until \
there is data ready to read on all of the socket .\n"|>, 
 <|"label" -> "SocketWaitNext", "type" -> "keyword", 
  "info" -> "SocketWaitNext[{socket , socket , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] waits until \
there is data ready to read on any of the socket ,"|>, 
 <|"label" -> "SoftmaxLayer", "type" -> "keyword", 
  "info" -> "SoftmaxLayer[] represents a softmax net layer.SoftmaxLayer[n] \
represents a softmax net layer that us"|>, 
 <|"label" -> "SokalSneathDissimilarity", "type" -> "keyword", 
  "info" -> "SokalSneathDissimilarity[u, v] gives the \
Sokal\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Sneath \
dissimilarity between Boolean vectors u and v."|>, 
 <|"label" -> "SolarEclipse", "type" -> "keyword", 
  "info" -> "SolarEclipse[] gives the time of the next solar \
eclipse.SolarEclipse[datespec] gives the time for th"|>, 
 <|"label" -> "SolarTime", "type" -> "keyword", 
  "info" -> "SolarTime[] gives the angle on the celestial equator between the \
Sun and the local antimeridian for "|>, <|"label" -> "SolidAngle", 
  "type" -> "keyword", "info" -> "SolidAngle[p, {u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, u }] gives the \
solid angle at the point p and spanned by the vectors u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, u "|>, 
 <|"label" -> "SolidBoundaryLoadValue", "type" -> "keyword", 
  "info" -> "SolidBoundaryLoadValue[pred, vars, pars] represents a boundary \
load condition for PDEs with predicat"|>, <|"label" -> "SolidData", 
  "type" -> "keyword", "info" -> "SolidData[entity, property] gives the value \
of the specified property for the solid entity.SolidData"|>, 
 <|"label" -> "SolidDisplacementCondition", "type" -> "keyword", 
  "info" -> "SolidDisplacementCondition[pred, vars, pars] represents a \
prescribed displacement on a solid boundar"|>, 
 <|"label" -> "SolidFixedCondition", "type" -> "keyword", 
  "info" -> "SolidFixedCondition[pred, vars, pars] represents a fully \
constrained solid boundary for PDEs with pr"|>, 
 <|"label" -> "SolidMechanicsPDEComponent", "type" -> "keyword", 
  "info" -> "SolidMechanicsPDEComponent[vars, pars] yields solid mechanics \
PDE terms with variables vars and para"|>, 
 <|"label" -> "SolidMechanicsStrain", "type" -> "keyword", 
  "info" -> "SolidMechanicsStrain[vars, pars, displ] yields solid mechanics \
strain with variables vars, parameter"|>, 
 <|"label" -> "SolidMechanicsStress", "type" -> "keyword", 
  "info" -> "SolidMechanicsStress[vars, pars, strain] yields solid mechanics \
stress with variables vars, paramete"|>, <|"label" -> "SolidRegionQ", 
  "type" -> "keyword", "info" -> "SolidRegionQ[reg] gives True if the 3D \
region reg is a solid region and False otherwise."|>, 
 <|"label" -> "Solve", "type" -> "keyword", "info" -> "Solve[expr, vars] \
attempts to solve the system expr of equations or inequalities for the \
variables v"|>, <|"label" -> "SolveAlways", "type" -> "keyword", 
  "info" -> "SolveAlways[eqns, vars] gives the values of parameters that make \
the equations eqns valid for all va"|>, <|"label" -> "SolveDelayed", 
  "type" -> "keyword", "info" -> "SolveDelayed is an option to NDSolve. \
SolveDelayed -> False causes the derivatives to be solved for "|>, 
 <|"label" -> "SolveValues", "type" -> "keyword", 
  "info" -> "SolveValues[expr, vars] gives the values of vars determined by \
the solutions of the system expr.Solv"|>, <|"label" -> "Sort", 
  "type" -> "keyword", "info" -> "Sort[list] sorts the elements of list into \
canonical order. Sort[list, p] sorts using the ordering f"|>, 
 <|"label" -> "SortBy", "type" -> "keyword", "info" -> "SortBy[list, f] sorts \
the elements of list in the order defined by applying f to each of them. \
SortB"|>, <|"label" -> "SortedBy", "type" -> "keyword", 
  "info" -> "SortedBy is an option that specifies a function by which to sort \
the results of a computation."|>, <|"label" -> "SortedEntityClass", 
  "type" -> "keyword", "info" -> "SortedEntityClass[class, prop] represents \
an entity class derived from class by sorting according to"|>, 
 <|"label" -> "Sound", "type" -> "keyword", "info" -> "Sound[primitives] \
represents a sound. Sound[primitives, t] specifies that the sound should have \
dura"|>, <|"label" -> "SoundNote", "type" -> "keyword", 
  "info" -> "SoundNote[pitch] represents a music-like sound note with the \
specified pitch.SoundNote[pitch, t] tak"|>, <|"label" -> "SoundVolume", 
  "type" -> "keyword", "info" -> "SoundVolume is an option to Sound and \
SoundNote and related functions that specifies the relative vo"|>, 
 <|"label" -> "SourcePDETerm", "type" -> "keyword", 
  "info" -> "SourcePDETerm[vars, f] represents a source term f with source \
coefficient f and model variables vars"|>, 
 <|"label" -> "Sow", "type" -> "keyword", "info" -> "Sow[e] specifies that e \
should be collected by the nearest enclosing Reap. Sow[e, tag] specifies tha"\
|>, <|"label" -> "SpaceCurveData", "type" -> "keyword", 
  "info" -> "SpaceCurveData[entity, property] gives the value of the \
specified property for the space curve entit"|>, 
 <|"label" -> "SpaceForm", "type" -> "keyword", 
  "info" -> "SpaceForm[n] prints as n spaces."|>, 
 <|"label" -> "Spacer", "type" -> "keyword", "info" -> "Spacer[w] displays as \
a spacer w printer's points wide.Spacer[{w, h}] displays as a spacer w points \
"|>, <|"label" -> "Spacings", "type" -> "keyword", 
  "info" -> "Spacings is an option to Grid and related constructs that \
specifies the spacings to leave between su"|>, 
 <|"label" -> "Span", "type" -> "keyword", "info" -> "i;;j represents a span \
of elements i through j.i;; represents a span from i to the end.;;j \
represent"|>, <|"label" -> "SpanAdjustments", "type" -> "keyword", 
  "info" -> "SpanAdjustments is an option for selections that specifies the \
height and width of spanning characte"|>, 
 <|"label" -> "SpanCharacterRounding", "type" -> "keyword", 
  "info" -> "SpanCharacterRounding is an option for selections that specifies \
the method used for rounding a span"|>, <|"label" -> "SpanFromAbove", 
  "type" -> "keyword", "info" -> "SpanFromAbove is a symbol that can appear \
at a particular position in a Grid or related construct to"|>, 
 <|"label" -> "SpanFromBoth", "type" -> "keyword", 
  "info" -> "SpanFromBoth is a symbol that can appear at a particular \
position in a Grid or related construct to "|>, 
 <|"label" -> "SpanFromLeft", "type" -> "keyword", 
  "info" -> "SpanFromLeft is a symbol that can appear at a particular \
position in a Grid or related construct to "|>, 
 <|"label" -> "SpanLineThickness", "type" -> "keyword", 
  "info" -> "SpanLineThickness is an option for selections that specifies the \
thickness in printer's points of li"|>, <|"label" -> "SpanMaxSize", 
  "type" -> "keyword", "info" -> "SpanMaxSize is an option for selections \
that specifies the maximum size of spanning characters such "|>, 
 <|"label" -> "SpanMinSize", "type" -> "keyword", 
  "info" -> "SpanMinSize is an option for selections that specifies the \
minimum size of spanning characters such "|>, <|"label" -> "SpanSymmetric", 
  "type" -> "keyword", "info" -> "SpanSymmetric is an option for selections \
that specifies whether vertically expandable characters ar"|>, 
 <|"label" -> "SparseArray", "type" -> "keyword", 
  "info" -> "SparseArray[{pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] v , pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a sparse \
array with all elements zero except for value"|>, 
 <|"label" -> "SparseArrayQ", "type" -> "keyword", 
  "info" -> "SparseArrayQ[s] yields True if s is a valid SparseArray object \
and False otherwise."|>, <|"label" -> "SpatialBinnedPointData", 
  "type" -> "keyword", "info" -> "SpatialBinnedPointData[{reg  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , reg  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents \
values val  associated with disjoin"|>, 
 <|"label" -> "SpatialBoundaryCorrection", "type" -> "keyword", 
  "info" -> "SpatialBoundaryCorrection is an option to various spatial \
statistics functions that control how to c"|>, 
 <|"label" -> "SpatialEstimate", "type" -> "keyword", 
  "info" -> "SpatialEstimate[{loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , loc  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
spatial prediction from values val  given a"|>, 
 <|"label" -> "SpatialEstimatorFunction", "type" -> "keyword", 
  "info" -> "SpatialEstimatorFunction[] represents a function generated by \
SpatialEstimate and predicts spatial f"|>, 
 <|"label" -> "SpatialGraphDistribution", "type" -> "keyword", 
  "info" -> "SpatialGraphDistribution[n, r] represents a spatial distribution \
for graphs with n vertices uniforml"|>, <|"label" -> "SpatialJ", 
  "type" -> "keyword", "info" -> "SpatialJ[pdata, r] estimates the J function \
J(r) for point data pdata at radius r.SpatialJ[pproc, r]"|>, 
 <|"label" -> "SpatialMedian", "type" -> "keyword", 
  "info" -> "SpatialMedian[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
spatial median of the elements x .SpatialMedian[data] gives the"|>, 
 <|"label" -> "SpatialNoiseLevel", "type" -> "keyword", 
  "info" -> "SpatialNoiseLevel is an option to SpatialEstimate and other \
spatial functions that gives the noise v"|>, 
 <|"label" -> "SpatialObservationRegionQ", "type" -> "keyword", 
  "info" -> "SpatialObservationRegionQ[reg] tests whether the geometric or \
geographic region reg can be an observ"|>, <|"label" -> "SpatialPointData", 
  "type" -> "keyword", "info" -> "SpatialPointData[points] represents a \
collection of spatial locations points.SpatialPointData[points"|>, 
 <|"label" -> "SpatialPointSelect", "type" -> "keyword", 
  "info" -> "SpatialPointSelect[spdata, crit] selects a subset of the \
SpatialPointData spdata according to crit."|>, 
 <|"label" -> "SpatialRandomnessTest", "type" -> "keyword", 
  "info" -> "SpatialRandomnessTest[pdata] tests whether the point collection \
pdata is distributed uniformly over "|>, 
 <|"label" -> "SpatialTransformationLayer", "type" -> "keyword", 
  "info" -> "SpatialTransformationLayer[{h, w}] represents a net layer that \
applies an affine transformation to a"|>, 
 <|"label" -> "SpatialTrendFunction", "type" -> "keyword", 
  "info" -> "SpatialTrendFunction is an option to SpatialEstimate that \
specifies what global trend model to use f"|>, 
 <|"label" -> "Speak", "type" -> "keyword", 
  "info" -> 
   "Speak[expr] speaks a spoken representation of the expression expr."|>, 
 <|"label" -> "SpeakerMatchQ", "type" -> "keyword", 
  "info" -> "SpeakerMatchQ[audio, ref] gives True if speaker features in \
audio match the one from reference ref a"|>, <|"label" -> "SpearmanRankTest", 
  "type" -> "keyword", "info" -> "SpearmanRankTest[v , v ] tests whether the \
vectors v  and v  are independent.SpearmanRankTest[m , m "|>, 
 <|"label" -> "SpeciesData", "type" -> "keyword", 
  "info" -> "SpeciesData[name, property] gives the value of the specified \
property for the species entity.Species"|>, <|"label" -> "SpecificityGoal", 
  "type" -> "keyword", "info" -> "SpecificityGoal is an option for \
ImageIdentify and related functions that defines what specificity o"|>, 
 <|"label" -> "SpectralLineData", "type" -> "keyword", 
  "info" -> "SpectralLineData[entity] gives the values of all known \
properties for an atomic state or state trans"|>, 
 <|"label" -> "Spectrogram", "type" -> "keyword", 
  "info" -> "Spectrogram[list] plots the spectrogram of \
list.Spectrogram[list, n] uses partitions of length n.Spe"|>, 
 <|"label" -> "SpectrogramArray", "type" -> "keyword", 
  "info" -> "SpectrogramArray[list] returns the spectrogram data of \
list.SpectrogramArray[list, n] uses partition"|>, 
 <|"label" -> "Specularity", "type" -> "keyword", 
  "info" -> "Specularity[s] is a graphics directive which specifies that \
surfaces of 3D graphics objects which fo"|>, <|"label" -> "SpeechCases", 
  "type" -> "keyword", "info" -> "SpeechCases[audio, form] gives a list of \
cases of text identified as being of type form that appear "|>, 
 <|"label" -> "SpeechInterpreter", "type" -> "keyword", 
  "info" -> "SpeechInterpreter[form] represents an interpreter object that \
can be applied to a speech input to tr"|>, <|"label" -> "SpeechRecognize", 
  "type" -> "keyword", "info" -> "SpeechRecognize[audio] recognizes speech in \
audio and returns it as a string."|>, <|"label" -> "SpeechSynthesize", 
  "type" -> "keyword", "info" -> "SpeechSynthesize[expr] synthesizes the \
contents of expr as an Audio object. SpeechSynthesize[expr, v"|>, 
 <|"label" -> "SpellingCorrection", "type" -> "keyword", 
  "info" -> "SpellingCorrection is an option for StringMatchQ, Names, and \
related functions that specifies whethe"|>, 
 <|"label" -> "SpellingCorrectionList", "type" -> "keyword", 
  "info" -> "SpellingCorrectionList[\"word\"] gives a list of possible \
spelling corrections for \"word\"."|>, <|"label" -> "SpellingDictionaries", 
  "type" -> "keyword", "info" -> "SpellingDictionaries is a global option \
that specifies settings for spell checking."|>, 
 <|"label" -> "SpellingDictionariesPath", "type" -> "keyword", 
  "info" -> "SpellingDictionariesPath is a global option that specifies which \
directories are searched for spelli"|>, <|"label" -> "Sphere", 
  "type" -> "keyword", "info" -> "Sphere[p] represents a unit sphere centered \
at the point p.Sphere[p, r] represents a sphere of radiu"|>, 
 <|"label" -> "SpherePoints", "type" -> "keyword", 
  "info" -> "SpherePoints[n] gives the positions of n uniformly distributed \
points on the surface of a unit spher"|>, <|"label" -> "SphericalBesselJ", 
  "type" -> "keyword", "info" -> "SphericalBesselJ[n, z] gives the spherical \
Bessel function of the first kind j (z). \n               "|>, 
 <|"label" -> "SphericalBesselY", "type" -> "keyword", 
  "info" -> "SphericalBesselY[n, z] gives the spherical Bessel function of \
the second kind y (z). \n              "|>, <|"label" -> "SphericalHankelH1", 
  "type" -> "keyword", "info" -> "                                            \
                                   (1)\nSphericalHankelH1"|>, 
 <|"label" -> "SphericalHankelH2", "type" -> "keyword", 
  "info" -> "                                                                 \
               (2)\nSphericalHankelH"|>, <|"label" -> "SphericalHarmonicY", 
  "type" -> "keyword", "info" -> "                                            \
                 m\nSphericalHarmonicY[l, m, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
\[CapitalATilde]\217\[CapitalAHat]\225] gives "|>, 
 <|"label" -> "SphericalPlot3D", "type" -> "keyword", 
  "info" -> "SphericalPlot3D[r, \[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
\[CapitalATilde]\217\[CapitalAHat]\225] generates a 3D plot with a spherical \
radius r as a function of spherical co"|>, <|"label" -> "SphericalRegion", 
  "type" -> "keyword", "info" -> "SphericalRegion is an option for \
three-dimensional graphics functions that specifies whether the fin"|>, 
 <|"label" -> "SphericalShell", "type" -> "keyword", 
  "info" -> "SphericalShell[c, {r     , r     }] represents a filled \
spherical shell centered at c with inner rad"|>, 
 <|"label" -> "SpheroidalEigenvalue", "type" -> "keyword", 
  "info" -> "SpheroidalEigenvalue[n, m, \[CapitalATilde]\216b3] gives the \
spheroidal eigenvalue with degree n and order m."|>, 
 <|"label" -> "SpheroidalJoiningFactor", "type" -> "keyword", 
  "info" -> "SpheroidalJoiningFactor[n, m, \[CapitalATilde]\216b3] gives the \
spheroidal joining factor with degree n and order m."|>, 
 <|"label" -> "SpheroidalPS", "type" -> "keyword", 
  "info" -> "SpheroidalPS[n, m, \[CapitalATilde]\216b3, z] gives the angular \
spheroidal function PS    (\[CapitalATilde]\216b3, z) of the first kind.\n    \
 "|>, <|"label" -> "SpheroidalPSPrime", "type" -> "keyword", 
  "info" -> "SpheroidalPSPrime[n, m, \[CapitalATilde]\216b3, z] gives the \
derivative with respect to z of the angular spheroidal funct"|>, 
 <|"label" -> "SpheroidalQS", "type" -> "keyword", 
  "info" -> "SpheroidalQS[n, m, \[CapitalATilde]\216b3, z] gives the angular \
spheroidal function QS    (\[CapitalATilde]\216b3, z) of the second kind.\n   \
 "|>, <|"label" -> "SpheroidalQSPrime", "type" -> "keyword", 
  "info" -> "SpheroidalQSPrime[n, m, \[CapitalATilde]\216b3, z] gives the \
derivative with respect to z of the angular spheroidal funct"|>, 
 <|"label" -> "SpheroidalRadialFactor", "type" -> "keyword", 
  "info" -> "SpheroidalRadialFactor[n, m, c] gives the spheroidal radial \
factor with degree n and order m."|>, <|"label" -> "SpheroidalS1", 
  "type" -> "keyword", "info" -> "                                            \
                   (1)\nSpheroidalS1[n, m, \[CapitalATilde]\216b3, z] gives \
th"|>, <|"label" -> "SpheroidalS2", "type" -> "keyword", 
  "info" -> "                                                               \
(2)\nSpheroidalS2[n, m, \[CapitalATilde]\216b3, z] gives th"|>, 
 <|"label" -> "Splice", "type" -> "keyword", "info" -> "Splice[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
expression that will automatically be spliced into any list in whi"|>, 
 <|"label" -> "SplicedDistribution", "type" -> "keyword", 
  "info" -> "SplicedDistribution[{w , w , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, w }, {c , c , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, c }, {dist   \
dist , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, dist }] \
represents the distr"|>, <|"label" -> "SplineClosed", "type" -> "keyword", 
  "info" -> "SplineClosed is an option for B-spline functions and graphics \
primitives that specifies whether spli"|>, <|"label" -> "SplineDegree", 
  "type" -> "keyword", "info" -> "SplineDegree is an option for spline \
functions and graphics primitives that specifies the degree of "|>, 
 <|"label" -> "SplineKnots", "type" -> "keyword", 
  "info" -> "SplineKnots is an option for B-spline functions and graphics \
primitives that specifies the positions"|>, <|"label" -> "SplineWeights", 
  "type" -> "keyword", "info" -> "SplineWeights is an option for B-spline \
functions and graphics primitives that specifies weights of "|>, 
 <|"label" -> "Split", "type" -> "keyword", "info" -> "Split[list] splits \
list into sublists consisting of runs of identical elements. Split[list, \
test] tr"|>, <|"label" -> "SplitBy", "type" -> "keyword", 
  "info" -> "SplitBy[list, f] splits list into sublists consisting of runs of \
successive elements that give the s"|>, <|"label" -> "SpokenString", 
  "type" -> "keyword", "info" -> "SpokenString[expr] gives a string of text \
corresponding to a spoken representation of the expression"|>, 
 <|"label" -> "SpotLight", "type" -> "keyword", 
  "info" -> "SpotLight[col, pt, \[CapitalATilde]\216\\[PlusMinus]] is a \
three-dimensional graphics directive to use in coloring 3D surfaces that "|>, 
 <|"label" -> "Sqrt", "type" -> "keyword", 
  "info" -> "Sqrt[z] or Sqrt[z] gives the square root of z. "|>, 
 <|"label" -> "Square", "type" -> "keyword", "info" -> "Square[x] displays as \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]  x."|>, 
 <|"label" -> "SquaredEuclideanDistance", "type" -> "keyword", 
  "info" -> "SquaredEuclideanDistance[u, v] gives the squared Euclidean \
distance between vectors u and v."|>, <|"label" -> "SquareFreeQ", 
  "type" -> "keyword", "info" -> "SquareFreeQ[expr] gives True if expr is a \
square-free polynomial or number, and False otherwise.Squa"|>, 
 <|"label" -> "SquareIntersection", "type" -> "keyword", 
  "info" -> "SquareIntersection[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\223 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\223 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SquareMatrixQ", "type" -> "keyword", 
  "info" -> 
   "SquareMatrixQ[m] gives True if m is a square matrix, and False \
otherwise."|>, <|"label" -> "SquareRepeatingElement", "type" -> "keyword", 
  "info" -> "SquareRepeatingElement[spec] represents a square array of \
elements of type spec in an interpreter, A"|>, 
 <|"label" -> "SquaresR", "type" -> "keyword", "info" -> "SquaresR[d, n] \
gives the number of ways r (n) to represent the integer n as a sum of d \
squares.\n    "|>, <|"label" -> "SquareSubset", "type" -> "keyword", 
  "info" -> "SquareSubset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\217 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\217 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SquareSubsetEqual", "type" -> "keyword", 
  "info" -> "SquareSubsetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\221 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\221 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SquareSuperset", "type" -> "keyword", 
  "info" -> "SquareSuperset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\220 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SquareSupersetEqual", "type" -> "keyword", 
  "info" -> "SquareSupersetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\222 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\222 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SquareUnion", "type" -> "keyword", 
  "info" -> "SquareUnion[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\224 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\224 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SquareWave", "type" -> "keyword", 
  "info" -> "SquareWave[x] gives a square wave that alternates between +1 and \
-1 with unit period.SquareWave[{y ,"|>, <|"label" -> "SSSTriangle", 
  "type" -> "keyword", "info" -> "SSSTriangle[a, b, c] returns a filled \
triangle with sides of lengths a, b, and c."|>, 
 <|"label" -> "StabilityMargins", "type" -> "keyword", 
  "info" -> "StabilityMargins is an option to frequency response plots such \
as BodePlot, NyquistPlot, and Nichols"|>, 
 <|"label" -> "StabilityMarginsStyle", "type" -> "keyword", 
  "info" -> "StabilityMarginsStyle is an option to frequency response plots \
such as BodePlot, NyquistPlot, and Ni"|>, <|"label" -> "StableDistribution", 
  "type" -> "keyword", "info" -> "StableDistribution[type, \
\[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b2, \
\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents the stable distribution S  \
   with index of stabilit"|>, <|"label" -> "Stack", "type" -> "keyword", 
  "info" -> "Stack[] shows the current evaluation stack, giving a list of the \
tags associated with evaluations th"|>, <|"label" -> "StackBegin", 
  "type" -> "keyword", "info" -> 
   "StackBegin[expr] evaluates expr, starting a fresh evaluation stack. "|>, 
 <|"label" -> "StackComplete", "type" -> "keyword", 
  "info" -> "StackComplete[expr] evaluates expr with intermediate expressions \
in evaluation chains included on th"|>, <|"label" -> "StackedDateListPlot", 
  "type" -> "keyword", "info" -> "StackedDateListPlot[{{date , v }, {date , v \
}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] plots points \
with values v  at a sequence of date"|>, <|"label" -> "StackedListPlot", 
  "type" -> "keyword", "info" -> "                                            \
                                     th\nStackedListPlot["|>, 
 <|"label" -> "StackInhibit", "type" -> "keyword", 
  "info" -> "StackInhibit[expr] evaluates expr without modifying the \
evaluation stack. "|>, <|"label" -> "StadiumShape", "type" -> "keyword", 
  "info" -> "StadiumShape[{{x , y }, {x , y }}, r] represents a stadium of \
radius r between the points {x , y } a"|>, 
 <|"label" -> "StandardAtmosphereData", "type" -> "keyword", 
  "info" -> "StandardAtmosphereData[altitude, property] returns the value of \
the property at the specified geomet"|>, <|"label" -> "StandardDeviation", 
  "type" -> "keyword", "info" -> "StandardDeviation[list] gives the sample \
standard deviation of the elements in list. StandardDeviati"|>, 
 <|"label" -> "StandardForm", "type" -> "keyword", 
  "info" -> "StandardForm[expr] prints as the standard Wolfram Language \
two-dimensional representation of expr. "|>, <|"label" -> "Standardize", 
  "type" -> "keyword", "info" -> "Standardize[list] shifts and rescales the \
elements of list to have zero mean and unit sample varianc"|>, 
 <|"label" -> "Standardized", "type" -> "keyword", 
  "info" -> "Standardized is an option that determines whether to standardize \
the data."|>, <|"label" -> "StandardOceanData", "type" -> "keyword", 
  "info" -> "StandardOceanData[spec] returns the thermodynamic properties of \
seawater for the specified parameter"|>, <|"label" -> "Star", 
  "type" -> "keyword", "info" -> "Star[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\206 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\206 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "StarClusterData", "type" -> "keyword", 
  "info" -> "StarClusterData[entity, property] gives the value of the \
specified property for the star cluster ent"|>, 
 <|"label" -> "StarData", "type" -> "keyword", "info" -> "StarData[entity, \
property] gives the value of the specified property for the star \
entity.StarData[{e"|>, <|"label" -> "StarGraph", "type" -> "keyword", 
  "info" -> "StarGraph[n] gives the star graph with n vertices S .\n          \
                                    "|>, 
 <|"label" -> "StartAsynchronousTask", "type" -> "keyword", 
  "info" -> "StartAsynchronousTask[task] allows asynchronous evaluations from \
task after it has been stopped."|>, <|"label" -> "StartExternalSession", 
  "type" -> "keyword", "info" -> "StartExternalSession[\"sys\"] starts an \
external session using the external evaluator sys, returning a"|>, 
 <|"label" -> "StartingStepSize", "type" -> "keyword", 
  "info" -> "StartingStepSize is an option to NDSolve and related functions \
that specifies the initial step size "|>, <|"label" -> "StartOfLine", 
  "type" -> "keyword", "info" -> "StartOfLine represents the start of a line \
in a string for purposes of matching in StringExpression."|>, 
 <|"label" -> "StartOfString", "type" -> "keyword", 
  "info" -> "StartOfString represents the start of a string for purposes of \
matching in StringExpression."|>, <|"label" -> "StartProcess", 
  "type" -> "keyword", "info" -> "StartProcess[\"executable\"] executes an \
external program, yielding a ProcessObject to represent the r"|>, 
 <|"label" -> "StartWebSession", "type" -> "keyword", 
  "info" -> "StartWebSession[] starts a web session and returns a web session \
object.StartWebSession[\"browser\"] s"|>, <|"label" -> "StateDimensions", 
  "type" -> "keyword", "info" -> "StateDimensions is an option to \
TemporalData that specifies the dimensions of the state space. "|>, 
 <|"label" -> "StateFeedbackGains", "type" -> "keyword", 
  "info" -> "StateFeedbackGains[sspec, {p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] gives the \
state feedback gains for the system specification s"|>, 
 <|"label" -> "StateOutputEstimator", "type" -> "keyword", 
  "info" -> "StateOutputEstimator[ssm, l] constructs an estimator for the \
StateSpaceModel ssm, with estimator gai"|>, <|"label" -> "StateResponse", 
  "type" -> "keyword", "info" -> "StateResponse[sys, u, {t, t   , t   }] \
gives the numeric state response of the state-space model sys"|>, 
 <|"label" -> "StateSpaceModel", "type" -> "keyword", 
  "info" -> "StateSpaceModel[{a, b, c, d}] represents the standard \
state-space model with state matrix a, input m"|>, 
 <|"label" -> "StateSpaceRealization", "type" -> "keyword", 
  "info" -> "StateSpaceRealization is an option to StateSpaceModel that \
specifies its canonical representation."|>, 
 <|"label" -> "StateSpaceTransform", "type" -> "keyword", 
  "info" -> "StateSpaceTransform[sys, {p, q}] transforms the state-space \
model sys using the matrices p and q. St"|>, 
 <|"label" -> "StateTransformationLinearize", "type" -> "keyword", 
  "info" -> "StateTransformationLinearize[asys] linearizes the \
AffineStateSpaceModel asys by state transformation"|>, 
 <|"label" -> "StationaryDistribution", "type" -> "keyword", 
  "info" -> "StationaryDistribution[proc] represents the stationary \
distribution of the process proc, when it exi"|>, 
 <|"label" -> "StationaryWaveletPacketTransform", "type" -> "keyword", 
  "info" -> "StationaryWaveletPacketTransform[data] gives the stationary \
wavelet packet transform (SWPT) of an ar"|>, 
 <|"label" -> "StationaryWaveletTransform", "type" -> "keyword", 
  "info" -> "StationaryWaveletTransform[data] gives the stationary wavelet \
transform (SWT) of an array of data.St"|>, <|"label" -> "StatusCentrality", 
  "type" -> "keyword", "info" -> "StatusCentrality[g] gives a list of status \
centralities for the vertices in the graph g.StatusCentra"|>, 
 <|"label" -> "StepMonitor", "type" -> "keyword", 
  "info" -> "StepMonitor is an option for iterative numerical computation \
functions that gives an expression to e"|>, 
 <|"label" -> "StereochemistryElements", "type" -> "keyword", 
  "info" -> "StereochemistryElements is an option for Molecule that specifies \
the local stereochemical arrangemen"|>, <|"label" -> "StieltjesGamma", 
  "type" -> "keyword", "info" -> "StieltjesGamma[n] gives the Stieltjes \
constant \[CapitalATilde]\216b3 . StieltjesGamma[n, a] gives the generalized \
Stielt"|>, <|"label" -> "StippleShading", "type" -> "keyword", 
  "info" -> "StippleShading[] is a three-dimensional graphics directive \
specifying that objects that follow are t"|>, 
 <|"label" -> "StirlingS1", "type" -> "keyword", 
  "info" -> "                                                              \
(m)\nStirlingS1[n, m] gives the Stirlin"|>, <|"label" -> "StirlingS2", 
  "type" -> "keyword", "info" -> "                                            \
                   (m)\nStirlingS2[n, m] gives the Stirli"|>, 
 <|"label" -> "StopAsynchronousTask", "type" -> "keyword", 
  "info" -> 
   "StopAsynchronousTask[task] stops asynchronous evaluations from task."|>, 
 <|"label" -> "StoppingPowerData", "type" -> "keyword", 
  "info" -> "StoppingPowerData[entity, {\"Particle\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] particle, \
\"Energy\" \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] \
quantity}, property] gives the value of"|>, <|"label" -> "StrataVariables", 
  "type" -> "keyword", "info" -> "StrataVariables is an option for fitting \
functions such as CoxModelFit that specify the variables on"|>, 
 <|"label" -> "StratonovichProcess", "type" -> "keyword", 
  "info" -> "StratonovichProcess[{a, b}, x, t] represents a Stratonovich \
process x(t), where \[CapitalATilde]\257\[CapitalAHat]\235\[CapitalAHat]\214 \
x(t) \[CapitalATilde]\257\[CapitalAHat]\237\[CapitalAHat]\231 a(t, x(t)) "|>, 
 <|"label" -> "StreamColorFunction", "type" -> "keyword", 
  "info" -> "StreamColorFunction is an option for StreamPlot and related \
functions that specifies a function to a"|>, 
 <|"label" -> "StreamColorFunctionScaling", "type" -> "keyword", 
  "info" -> "StreamColorFunctionScaling is an option for graphics functions \
that specifies whether arguments supp"|>, <|"label" -> "StreamDensityPlot", 
  "type" -> "keyword", "info" -> "StreamDensityPlot[{{v , v }, s}, {x, x   , \
x   }, {y, y   , y   }] generates a stream plot of the ve"|>, 
 <|"label" -> "StreamMarkers", "type" -> "keyword", 
  "info" -> "StreamMarkers is an option for StreamPlot, ListStreamPlot and \
related functions that specifies what "|>, <|"label" -> "StreamPlot", 
  "type" -> "keyword", "info" -> "StreamPlot[{v , v }, {x, x   , x   }, {y, y \
  , y   }] generates a stream plot of the vector field {"|>, 
 <|"label" -> "StreamPlot3D", "type" -> "keyword", 
  "info" -> "StreamPlot3D[{v , v , v }, {x, x   , x   }, {y, y   , y   }, {z, \
z   , z   }] plots streamlines for "|>, <|"label" -> "StreamPoints", 
  "type" -> "keyword", "info" -> "StreamPoints is an option to StreamPlot, \
ListStreamPlot, and related functions that determines how m"|>, 
 <|"label" -> "StreamPosition", "type" -> "keyword", 
  "info" -> "StreamPosition[stream] returns an integer that specifies the \
position of the current point in an ope"|>, <|"label" -> "Streams", 
  "type" -> "keyword", "info" -> "Streams[] gives a list of all streams that \
are currently open. Streams[\"name\"] lists only streams wi"|>, 
 <|"label" -> "StreamScale", "type" -> "keyword", 
  "info" -> "StreamScale is an option to StreamPlot, ListStreamPlot, and \
related functions that determines the le"|>, <|"label" -> "StreamStyle", 
  "type" -> "keyword", "info" -> "StreamStyle is an option to StreamPlot, \
StreamDensityPlot, and related functions that determines the"|>, 
 <|"label" -> "StrictInequalities", "type" -> "keyword", 
  "info" -> "StrictInequalities is an option to FunctionSign and \
FunctionMonotonicity, etc. that determines wheth"|>, 
 <|"label" -> "String", "type" -> "keyword", 
  "info" -> "String is the head of a character string \"text\". "|>, 
 <|"label" -> "StringByteCount", "type" -> "keyword", 
  "info" -> "StringByteCount[\"string\"] gives the total number of bytes used \
to store the characters in a string."|>, <|"label" -> "StringCases", 
  "type" -> "keyword", "info" -> "StringCases[\"string\", patt] gives a list \
of the substrings in \"string\" that match the string express"|>, 
 <|"label" -> "StringContainsQ", "type" -> "keyword", 
  "info" -> "StringContainsQ[\"string\", patt] yields True if any part of \
string matches the string pattern patt, a"|>, <|"label" -> "StringCount", 
  "type" -> "keyword", "info" -> "StringCount[\"string\", \"sub\"] gives a \
count of the number of times \"sub\" appears as a substring of \"s"|>, 
 <|"label" -> "StringDelete", "type" -> "keyword", 
  "info" -> "StringDelete[\"string\", patt] yields the string obtained by \
deleting from string all occurrences of a"|>, <|"label" -> "StringEndsQ", 
  "type" -> "keyword", "info" -> "StringEndsQ[\"string\", patt] yields True \
if the end of string matches the string pattern patt, and yi"|>, 
 <|"label" -> "StringExpression", "type" -> "keyword", 
  "info" -> "s  ~~ s  ~~ \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 or \
StringExpression[s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents a \
sequence of strings and symbolic string ob"|>, 
 <|"label" -> "StringExtract", "type" -> "keyword", 
  "info" -> "                                          \
th\nStringExtract[\"string\", n] extracts the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    block of c"|>, 
 <|"label" -> "StringForm", "type" -> "keyword", 
  "info" -> "StringForm[\"controlstring\", expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] prints as the \
text of the controlstring, with the printed form"|>, 
 <|"label" -> "StringFormat", "type" -> "keyword", 
  "info" -> "StringFormat[\"string\"] attempts to determine what ImportString \
format could be used to import the st"|>, <|"label" -> "StringFormatQ", 
  "type" -> "keyword", "info" -> "StringFormatQ[\"string\", \"fmt\"] gives \
True if the string \"string\" might be imported as format \"fmt\" a"|>, 
 <|"label" -> "StringFreeQ", "type" -> "keyword", 
  "info" -> "StringFreeQ[\"string\", patt] yields True if no substring in \
\"string\" matches the string expression pa"|>, 
 <|"label" -> "StringInsert", "type" -> "keyword", 
  "info" -> "StringInsert[\"string\", \"snew\", n] yields a string with \
\"snew\" inserted starting at position n in \"st"|>, 
 <|"label" -> "StringJoin", "type" -> "keyword", 
  "info" -> "\"s \" <> \"s \" <> \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, StringJoin[\"s \
\", \"s \", \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246], or \
StringJoin[{\"s \", \"s \", \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a string \
consist"|>, <|"label" -> "StringLength", "type" -> "keyword", 
  "info" -> 
   "StringLength[\"string\"] gives the number of characters in a string. "|>, 
 <|"label" -> "StringMatchQ", "type" -> "keyword", 
  "info" -> "StringMatchQ[\"string\", patt] tests whether \"string\" matches \
the string pattern patt. StringMatchQ[\"s"|>, <|"label" -> "StringPadLeft", 
  "type" -> "keyword", "info" -> "StringPadLeft[\"string\", n] makes string \
be of length n, padding it on the left with spaces or trunca"|>, 
 <|"label" -> "StringPadRight", "type" -> "keyword", 
  "info" -> "StringPadRight[\"string\", n] makes string be of length n, \
padding it on the right with spaces or trun"|>, 
 <|"label" -> "StringPart", "type" -> "keyword", 
  "info" -> "                                    th                           \
                                   "|>, <|"label" -> "StringPartition", 
  "type" -> "keyword", "info" -> "StringPartition[\"string\", n] partitions \
string into nonoverlapping substrings of length n.StringPart"|>, 
 <|"label" -> "StringPosition", "type" -> "keyword", 
  "info" -> "StringPosition[\"string\", \"sub\"] gives a list of the starting \
and ending character positions at which"|>, <|"label" -> "StringQ", 
  "type" -> "keyword", "info" -> 
   "StringQ[expr] gives True if expr is a string, and False otherwise."|>, 
 <|"label" -> "StringRepeat", "type" -> "keyword", 
  "info" -> "StringRepeat[\"str\", n] creates a string consisting of \"str\" \
repeated n times.StringRepeat[\"str\", n, "|>, 
 <|"label" -> "StringReplace", "type" -> "keyword", 
  "info" -> "StringReplace[\"string\", s \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] sp] replaces the \
string expression s by sp wherever it appears in \"strin"|>, 
 <|"label" -> "StringReplaceList", "type" -> "keyword", 
  "info" -> "StringReplaceList[\"string\", s \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] sp] or \
StringReplaceList[\"string\", {s  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] sp , s  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] sp , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives a "|>, 
 <|"label" -> "StringReplacePart", "type" -> "keyword", 
  "info" -> "StringReplacePart[\"string\", \"snew\", {m, n}] replaces the \
characters at positions m through n in \"str"|>, 
 <|"label" -> "StringReverse", "type" -> "keyword", 
  "info" -> "StringReverse[\"string\"] reverses the order of the characters \
in \"string\"."|>, <|"label" -> "StringRiffle", "type" -> "keyword", 
  "info" -> "StringRiffle[{s , s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
string by concatenating all the s , with spaces inserted bet"|>, 
 <|"label" -> "StringRotateLeft", "type" -> "keyword", 
  "info" -> "StringRotateLeft[string, n] cycles the characters in string n \
positions to the left.StringRotateLeft"|>, <|"label" -> "StringRotateRight", 
  "type" -> "keyword", "info" -> "StringRotateRight[string, n] cycles the \
characters in string n positions to the right.StringRotateRi"|>, 
 <|"label" -> "StringSkeleton", "type" -> "keyword", 
  "info" -> "StringSkeleton[n] represents a sequence of n omitted characters \
in a string printed with Short. The "|>, <|"label" -> "StringSplit", 
  "type" -> "keyword", "info" -> "StringSplit[\"string\"] splits \"string\" \
into a list of substrings separated by whitespace. StringSplit"|>, 
 <|"label" -> "StringStartsQ", "type" -> "keyword", 
  "info" -> "StringStartsQ[\"string\", patt] yields True if the beginning of \
string matches the string pattern patt"|>, <|"label" -> "StringTakeDrop", 
  "type" -> "keyword", "info" -> "StringTakeDrop[\"string\", n] gives a pair \
of strings containing the first n characters in \"string\" an"|>, 
 <|"label" -> "StringTemplate", "type" -> "keyword", 
  "info" -> "StringTemplate[\"string\"] yields a TemplateObject expression \
that represents a string template to be "|>, 
 <|"label" -> "StringToByteArray", "type" -> "keyword", 
  "info" -> "StringToByteArray[\"string\"] returns a byte array corresponding \
to the UTF-8 encoding of the specifie"|>, <|"label" -> "StringToStream", 
  "type" -> "keyword", "info" -> "StringToStream[\"string\"] opens an input \
stream for reading from a string. "|>, <|"label" -> "StringTrim", 
  "type" -> "keyword", "info" -> "StringTrim[\"string\"] trims whitespace \
from the beginning and end of \"string\".StringTrim[\"string\", pa"|>, 
 <|"label" -> "StructuralImportance", "type" -> "keyword", 
  "info" -> "StructuralImportance[rdist] gives the structural importances for \
all components in the ReliabilityDi"|>, <|"label" -> "StructuredArray", 
  "type" -> "keyword", "info" -> "StructuredArray[st, {d , d , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, data] \
represents a d \[CapitalATilde]\203\[CapitalAHat]\227d \
\[CapitalATilde]\203\[CapitalAHat]\227\[CapitalATilde]\[Cent]\[CapitalAHat]\
\200\[CapitalAHat]\246 array with structure type st and specifi"|>, 
 <|"label" -> "StructuredSelection", "type" -> "keyword", 
  "info" -> "StructuredSelection is an option for Cell that specifies whether \
to allow only complete subexpressio"|>, <|"label" -> "StruveH", 
  "type" -> "keyword", "info" -> "StruveH[n, z] gives the Struve function H \
(z). \n                                         n"|>, 
 <|"label" -> "StruveL", "type" -> "keyword", "info" -> "StruveL[n, z] gives \
the modified Struve function L (z). \n                                        \
   "|>, <|"label" -> "Stub", "type" -> "keyword", 
  "info" -> "Stub is an attribute which specifies that if a symbol is ever \
used, Needs should automatically be ca"|>, 
 <|"label" -> "StudentTDistribution", "type" -> "keyword", 
  "info" -> "StudentTDistribution[\[CapitalATilde]\216\[CapitalAHat]\275] \
represents a Student t distribution with \
\[CapitalATilde]\216\[CapitalAHat]\275 degrees of freedom.StudentTDistri"|>, 
 <|"label" -> "Style", "type" -> "keyword", "info" -> "Style[expr, options] \
displays with expr formatted using the specified option settings. Style[expr, \
\""|>, <|"label" -> "Subdivide", "type" -> "keyword", 
  "info" -> "Subdivide[n] generates the list {0, 1/n, 2/n, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, 1}.Subdivide[x   \
, n] generates the list of values "|>, <|"label" -> "Subfactorial", 
  "type" -> "keyword", "info" -> "Subfactorial[n] gives the number of \
permutations of n objects that leave no object fixed."|>, 
 <|"label" -> "Subgraph", "type" -> "keyword", "info" -> "Subgraph[g, {v , v \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
subgraph of the graph g generated by the vertices v .Subgraph[g, "|>, 
 <|"label" -> "SubMinus", "type" -> "keyword", 
  "info" -> 
   "SubMinus[expr] displays as expr .\n                               -"|>, 
 <|"label" -> "SubPlus", "type" -> "keyword", 
  "info" -> 
   "SubPlus[expr] displays as expr .\n                              +"|>, 
 <|"label" -> "SubresultantPolynomialRemainders", "type" -> "keyword", 
  "info" -> "SubresultantPolynomialRemainders[poly , poly , var] gives the \
subresultant polynomial remainder sequ"|>, 
 <|"label" -> "SubresultantPolynomials", "type" -> "keyword", 
  "info" -> "SubresultantPolynomials[poly , poly , var] generates a list of \
subresultant polynomials of the polyn"|>, <|"label" -> "Subresultants", 
  "type" -> "keyword", "info" -> "Subresultants[poly , poly , var] generates \
a list of the principal subresultant coefficients of the "|>, 
 <|"label" -> "Subscript", "type" -> "keyword", 
  "info" -> "Subscript[x, y] is an object that formats as x . Subscript[x, y \
, y , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] formats as \
x         .\n    "|>, <|"label" -> "Subset", "type" -> "keyword", 
  "info" -> "Subset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\202 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\202 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SubsetCases", "type" -> "keyword", 
  "info" -> "SubsetCases[list, patt] gives a list of the sublists in list \
that match the pattern patt in any orde"|>, <|"label" -> "SubsetCount", 
  "type" -> "keyword", "info" -> "SubsetCount[list, sub] gives a count of the \
number of times sub appears in any order as a sublist of"|>, 
 <|"label" -> "SubsetEqual", "type" -> "keyword", 
  "info" -> "SubsetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\206 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\206 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SubsetMap", "type" -> "keyword", 
  "info" -> "SubsetMap[f, {e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {i, j, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields an \
expression in which the elements e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 in the lis"|>, 
 <|"label" -> "SubsetPosition", "type" -> "keyword", 
  "info" -> "SubsetPosition[list, sublist] gives a list of positions at which \
sublist appears in list in any orde"|>, <|"label" -> "SubsetQ", 
  "type" -> "keyword", "info" -> "SubsetQ[list , list ] yields True if list  \
is a subset of list , and False otherwise.\n            1 "|>, 
 <|"label" -> "SubsetReplace", "type" -> "keyword", 
  "info" -> "SubsetReplace[list, rules] replaces sublists in list according \
to the specified rule or list of rule"|>, <|"label" -> "SubStar", 
  "type" -> "keyword", "info" -> 
   "SubStar[expr] displays as expr .\n                              *"|>, 
 <|"label" -> "Subsuperscript", "type" -> "keyword", 
  "info" -> "                                                      \
z\nSubsuperscript[x, y, z] is an object that fo"|>, 
 <|"label" -> "SubtitleEncoding", "type" -> "keyword", 
  "info" -> "SubtitleEncoding is an option for Export and other functions \
that specifies the subtitle encoding to"|>, 
 <|"label" -> "SubtitleTrackSelection", "type" -> "keyword", 
  "info" -> "SubtitleTrackSelection is an option that specifies the subtitle \
tracks of interest."|>, <|"label" -> "Subtract", "type" -> "keyword", 
  "info" -> "x - y is equivalent to x + (-1 * y). "|>, 
 <|"label" -> "SubtractFrom", "type" -> "keyword", 
  "info" -> "x -= dx subtracts dx from x and returns the new value of x. "|>, 
 <|"label" -> "SubtractSides", "type" -> "keyword", 
  "info" -> "SubtractSides[rel, x] subtracts x from each side of the equation \
or inequality rel.SubtractSides[rel"|>, <|"label" -> "SubValues", 
  "type" -> "keyword", "info" -> "SubValues[f] gives a list of transformation \
rules corresponding to all subvalues (values for \
f[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246][\
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]"|>, 
 <|"label" -> "Succeeds", "type" -> "keyword", "info" -> "Succeeds[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[RightGuillemet] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[RightGuillemet] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SucceedsEqual", "type" -> "keyword", 
  "info" -> "SucceedsEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\\[Degree] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\252\\[Degree] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SucceedsSlantEqual", "type" -> "keyword", 
  "info" -> "SucceedsSlantEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\275 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\275 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SucceedsTilde", "type" -> "keyword", 
  "info" -> "SucceedsTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DownQuestion] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[DownQuestion] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Success", "type" -> "keyword", "info" -> "Success[\"tag\", \
assoc] represents a success of a type indicated by tag, with details given by \
the ass"|>, <|"label" -> "SuchThat", "type" -> "keyword", 
  "info" -> "SuchThat[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\215 y."|>, 
 <|"label" -> "SumConvergence", "type" -> "keyword", 
  "info" -> "                                                  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\236                   \
                              "|>, <|"label" -> "SummationLayer", 
  "type" -> "keyword", "info" -> "SummationLayer[] represents a net layer \
that sums all of its input elements."|>, <|"label" -> "Sunday", 
  "type" -> "keyword", "info" -> "Sunday is a day of the week."|>, 
 <|"label" -> "SunPosition", "type" -> "keyword", 
  "info" -> "SunPosition[] gives the position of the Sun for the current date \
and location.SunPosition[datespec] "|>, <|"label" -> "Sunrise", 
  "type" -> "keyword", "info" -> "Sunrise[] gives the time of the next \
sunrise for the current date and location.Sunrise[datespec] giv"|>, 
 <|"label" -> "Sunset", "type" -> "keyword", "info" -> "Sunset[] gives the \
time of the next sunset for the current date and location.Sunset[datespec] \
gives "|>, <|"label" -> "SuperDagger", "type" -> "keyword", 
  "info" -> "                                  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat] \nSuperDagger[expr] \
displays as expr ."|>, <|"label" -> "SuperMinus", "type" -> "keyword", 
  "info" -> 
   "                                 -\nSuperMinus[expr] displays as expr ."|>\
, <|"label" -> "SupernovaData", "type" -> "keyword", 
  "info" -> "SupernovaData[entity, property] gives the value of the specified \
property for the supernova entity.S"|>, <|"label" -> "SuperPlus", 
  "type" -> "keyword", "info" -> 
   "                                +\nSuperPlus[expr] displays as expr ."|>, 
 <|"label" -> "Superscript", "type" -> "keyword", 
  "info" -> "                                                \
y\nSuperscript[x, y] is an object that formats as x ."|>, 
 <|"label" -> "Superset", "type" -> "keyword", "info" -> "Superset[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\203 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\203 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SupersetEqual", "type" -> "keyword", 
  "info" -> "SupersetEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\207 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\207 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "SuperStar", "type" -> "keyword", 
  "info" -> 
   "                                *\nSuperStar[expr] displays as expr ."|>, 
 <|"label" -> "Surd", "type" -> "keyword", "info" -> "                        \
           th\nSurd[x, n] gives the real-valued \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    root of x."|>, 
 <|"label" -> "SurfaceArea", "type" -> "keyword", 
  "info" -> "SurfaceArea[reg] gives the surface area of the three-dimensional \
region reg.SurfaceArea[{x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x },"|>, 
 <|"label" -> "SurfaceColor", "type" -> "keyword", 
  "info" -> "SurfaceColor[dcol] is a three-dimensional graphics directive \
which specifies that the surfaces which"|>, <|"label" -> "SurfaceData", 
  "type" -> "keyword", "info" -> "SurfaceData[entity, property] gives the \
value of the specified property for the surface entity.Surfa"|>, 
 <|"label" -> "SurfaceGraphics", "type" -> "keyword", 
  "info" -> "SurfaceGraphics[array] is a representation of a \
three-dimensional plot of a surface, with heights of"|>, 
 <|"label" -> "SurvivalDistribution", "type" -> "keyword", 
  "info" -> "SurvivalDistribution[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
survival distribution with event times e .SurvivalDis"|>, 
 <|"label" -> "SurvivalFunction", "type" -> "keyword", 
  "info" -> "SurvivalFunction[dist, x] gives the survival function for the \
distribution dist evaluated at x.Survi"|>, <|"label" -> "SurvivalModel", 
  "type" -> "keyword", "info" -> "SurvivalModel[\[CapitalATilde]\[Cent]\
\[CapitalAHat]\200\[CapitalAHat]\246] represents the symbolic survival model \
obtained from functions like SurvivalModelFi"|>, 
 <|"label" -> "SurvivalModelFit", "type" -> "keyword", 
  "info" -> "SurvivalModelFit[{e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
survival model for event times e .\n                   1   2 "|>, 
 <|"label" -> "SuspendPacket", "type" -> "keyword", 
  "info" -> "SuspendPacket[] is a WSTP packet used for synchronization with \
the Wolfram Language kernel."|>, <|"label" -> "SuzukiDistribution", 
  "type" -> "keyword", "info" -> "SuzukiDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\274, \[CapitalATilde]\216\[CapitalAHat]\275] represents the \
Suzuki distribution with shape parameters \
\[CapitalATilde]\216\[CapitalAHat]\274 and \
\[CapitalATilde]\216\[CapitalAHat]\275."|>, <|"label" -> "SuzukiGroupSuz", 
  "type" -> "keyword", "info" -> 
   "SuzukiGroupSuz[] represents the sporadic simple Suzuki group Suz."|>, 
 <|"label" -> "SwatchLegend", "type" -> "keyword", 
  "info" -> "SwatchLegend[{col , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {lbl , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
legend that associates swatches of colors col  with l"|>, 
 <|"label" -> "Switch", "type" -> "keyword", "info" -> "Switch[expr, form , \
value , form , value , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] evaluates expr, \
then compares it with each of the form"|>, <|"label" -> "Symbol", 
  "type" -> "keyword", "info" -> 
   "Symbol[\"name\"] refers to a symbol with the specified name. "|>, 
 <|"label" -> "SymbolName", "type" -> "keyword", 
  "info" -> "SymbolName[symbol] gives the name of the specified symbol. "|>, 
 <|"label" -> "SymletWavelet", "type" -> "keyword", 
  "info" -> "SymletWavelet[] represents the Symlet wavelet of order \
4.SymletWavelet[n] represents the Symlet wave"|>, 
 <|"label" -> "Symmetric", "type" -> "keyword", 
  "info" -> "Symmetric[{s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, s }] represents \
the symmetry of a tensor that is symmetric in the slots s .\n      "|>, 
 <|"label" -> "SymmetricGroup", "type" -> "keyword", 
  "info" -> 
   "SymmetricGroup[n] represents the symmetric group of degree n."|>, 
 <|"label" -> "SymmetricKey", "type" -> "keyword", 
  "info" -> "SymmetricKey[assoc] represents all the information needed for \
encryption, decryption, and other oper"|>, <|"label" -> "SymmetricMatrixQ", 
  "type" -> "keyword", "info" -> "SymmetricMatrixQ[m] gives True if m is \
explicitly symmetric, and False otherwise. "|>, 
 <|"label" -> "SymmetricPolynomial", "type" -> "keyword", 
  "info" -> "                                                \
th\nSymmetricPolynomial[k, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] gives the \
k\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]  "|>, 
 <|"label" -> "SymmetricReduction", "type" -> "keyword", 
  "info" -> "SymmetricReduction[f, {x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }] gives a \
pair of polynomials {p, q} in x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x  such that f \
== p "|>, <|"label" -> "Symmetrize", "type" -> "keyword", 
  "info" -> "Symmetrize[tensor, sym] returns the symmetrization of tensor \
under the symmetry sym."|>, <|"label" -> "SymmetrizedArray", 
  "type" -> "keyword", "info" -> "SymmetrizedArray[{pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, dims, sym] \
yields an array of dimensions dims whose "|>, 
 <|"label" -> "SymmetrizedArrayRules", "type" -> "keyword", 
  "info" -> "SymmetrizedArrayRules[sa] returns a list of rules pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val  of the \
symmetrized array sa.Symmetrize"|>, 
 <|"label" -> "SymmetrizedDependentComponents", "type" -> "keyword", 
  "info" -> "SymmetrizedDependentComponents[comp, sym] gives the list of \
components that are equivalent to the co"|>, 
 <|"label" -> "SymmetrizedIndependentComponents", "type" -> "keyword", 
  "info" -> "SymmetrizedIndependentComponents[dims, sym] gives the list of \
independent components of an array of "|>, 
 <|"label" -> "SymmetrizedReplacePart", "type" -> "keyword", 
  "info" -> "SymmetrizedReplacePart[sa, {pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , pos  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] replaces \
independent values of the symmetr"|>, 
 <|"label" -> "SynchronousInitialization", "type" -> "keyword", 
  "info" -> "SynchronousInitialization is an option for Manipulate, \
DynamicModule, and related functions that spe"|>, 
 <|"label" -> "SynchronousUpdating", "type" -> "keyword", 
  "info" -> "SynchronousUpdating is an option for Manipulate, Dynamic, and \
related functions that specifies wheth"|>, <|"label" -> "Synonyms", 
  "type" -> "keyword", "info" -> "Synonyms[\"word\"] returns the synonyms \
associated with the specified word."|>, <|"label" -> "SyntaxInformation", 
  "type" -> "keyword", "info" -> "SyntaxInformation[f] gives information used \
to generate syntax coloring and other advisories when f["|>, 
 <|"label" -> "SyntaxLength", "type" -> "keyword", 
  "info" -> "SyntaxLength[\"string\"] finds the number of characters starting \
at the beginning of a string that cor"|>, <|"label" -> "SyntaxPacket", 
  "type" -> "keyword", "info" -> "SyntaxPacket[integer] is a WSTP packet \
where integer indicates the position at which a syntax error "|>, 
 <|"label" -> "SyntaxQ", "type" -> "keyword", "info" -> "SyntaxQ[\"string\"] \
returns True if the string corresponds to syntactically correct input for a \
single"|>, <|"label" -> "SynthesizeMissingValues", "type" -> "keyword", 
  "info" -> "SynthesizeMissingValues[{example , example , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] replaces \
missing values in each example by generate"|>, 
 <|"label" -> "TabFilling", "type" -> "keyword", 
  "info" -> "TabFilling is an option for character selections that specifies \
how a Tab character is represented o"|>, <|"label" -> "Table", 
  "type" -> "keyword", "info" -> "Table[expr, n] generates a list of n copies \
of expr. Table[expr, {i, i   }] generates a list of the "|>, 
 <|"label" -> "TableAlignments", "type" -> "keyword", 
  "info" -> "TableAlignments is an option for TableForm and MatrixForm which \
specifies how entries in each dimens"|>, <|"label" -> "TableDepth", 
  "type" -> "keyword", "info" -> "TableDepth is an option for TableForm and \
MatrixForm that specifies the maximum number of levels to "|>, 
 <|"label" -> "TableDirections", "type" -> "keyword", 
  "info" -> "TableDirections is an option for TableForm and MatrixForm which \
specifies whether successive dimensi"|>, <|"label" -> "TableHeadings", 
  "type" -> "keyword", "info" -> "TableHeadings is an option for TableForm \
and MatrixForm that gives the labels to be printed for entr"|>, 
 <|"label" -> "TableSpacing", "type" -> "keyword", 
  "info" -> "TableSpacing is an option for TableForm and MatrixForm that \
specifies how many spaces should be left"|>, <|"label" -> "TableView", 
  "type" -> "keyword", "info" -> "TableView[{{expr  , expr  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {expr  , expr  \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] displays as a \
spreadsheet-like table view f"|>, <|"label" -> "TabSpacings", 
  "type" -> "keyword", "info" -> "TabSpacings is an option for character \
selections that specifies the number of spaces in ems that th"|>, 
 <|"label" -> "TaggingRules", "type" -> "keyword", 
  "info" -> "TaggingRules is an option for selections that specifies a list \
of strings to be associated with a se"|>, <|"label" -> "TagSet", 
  "type" -> "keyword", "info" -> "f/:lhs = rhs assigns rhs to be the value of \
lhs, and associates the assignment with the symbol f. "|>, 
 <|"label" -> "TagSetDelayed", "type" -> "keyword", 
  "info" -> "f/:lhs := rhs assigns rhs to be the delayed value of lhs, and \
associates the assignment with the sym"|>, <|"label" -> "TagUnset", 
  "type" -> "keyword", "info" -> "f/:lhs=. removes any rules defined for lhs, \
associated with the symbol f. "|>, <|"label" -> "Take", "type" -> "keyword", 
  "info" -> "Take[list, n] gives the first n elements of list. Take[list, -n] \
gives the last n elements of list. "|>, <|"label" -> "TakeDrop", 
  "type" -> "keyword", "info" -> "TakeDrop[list, n] gives the pair {list , \
list }, where list  contains the first n elements of list a"|>, 
 <|"label" -> "TakeLargest", "type" -> "keyword", 
  "info" -> "TakeLargest[list, n] gives the n numerically largest elements in \
list, sorted in descending order.Ta"|>, <|"label" -> "TakeLargestBy", 
  "type" -> "keyword", "info" -> "TakeLargestBy[list, f, n] gives the n \
elements e  in list for which f[e ] is largest, sorted in d"|>, 
 <|"label" -> "TakeList", "type" -> "keyword", "info" -> "TakeList[list, {n , \
n , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
list of results obtained by successively taking n  elements fr"|>, 
 <|"label" -> "TakeSmallest", "type" -> "keyword", 
  "info" -> "TakeSmallest[list, n] gives the n numerically smallest elements \
in list, sorted in ascending order.T"|>, <|"label" -> "TakeSmallestBy", 
  "type" -> "keyword", "info" -> "TakeSmallestBy[list, f, n] gives the n \
elements e  in list for which f[e ] is smallest, sorted in as"|>, 
 <|"label" -> "TakeWhile", "type" -> "keyword", 
  "info" -> "TakeWhile[list, crit] gives elements e  from the beginning of \
list, continuing so long as crit[e ] i"|>, <|"label" -> "Tally", 
  "type" -> "keyword", "info" -> "Tally[list] tallies the elements in list, \
listing all distinct elements together with their multipli"|>, 
 <|"label" -> "Tan", "type" -> "keyword", 
  "info" -> "Tan[z] gives the tangent of z."|>, 
 <|"label" -> "Tanh", "type" -> "keyword", 
  "info" -> "Tanh[z] gives the hyperbolic tangent of z."|>, 
 <|"label" -> "TargetDevice", "type" -> "keyword", 
  "info" -> "TargetDevice is an option for certain functions that specifies \
whether CPU or GPU computation should"|>, <|"label" -> "TargetFunctions", 
  "type" -> "keyword", "info" -> "TargetFunctions is an option for functions \
such as ComplexExpand and FindDistribution that specifies"|>, 
 <|"label" -> "TargetUnits", "type" -> "keyword", 
  "info" -> "TargetUnits is an option used to specify the desired output \
units for visualization functions operat"|>, <|"label" -> "TaskAbort", 
  "type" -> "keyword", "info" -> "TaskAbort[task] generates an interrupt to \
abort the current execution of a task."|>, <|"label" -> "TaskExecute", 
  "type" -> "keyword", "info" -> "TaskExecute[task] immediately executes an \
instance of the specified task, independently of any sched"|>, 
 <|"label" -> "TaskObject", "type" -> "keyword", 
  "info" -> "TaskObject[spec] is an object that represents a background \
task."|>, <|"label" -> "TaskRemove", "type" -> "keyword", 
  "info" -> "TaskRemove[task] terminates and removes the specified task."|>, 
 <|"label" -> "TaskResume", "type" -> "keyword", 
  "info" -> "TaskResume[task] resumes execution of the specified task."|>, 
 <|"label" -> "Tasks", "type" -> "keyword", "info" -> "Tasks[type] gives a \
list of TaskObject expressions representing currently submitted tasks of \
given t"|>, <|"label" -> "TaskSuspend", "type" -> "keyword", 
  "info" -> 
   "TaskSuspend[task] suspends the execution of the specified task."|>, 
 <|"label" -> "TaskWait", "type" -> "keyword", 
  "info" -> 
   "TaskWait[task] waits for the specified task to be completely finished. "|>\
, <|"label" -> "TautologyQ", "type" -> "keyword", 
  "info" -> "TautologyQ[bf] gives True if all combinations of values of \
variables make the Boolean function bf yi"|>, 
 <|"label" -> "TelegraphProcess", "type" -> "keyword", 
  "info" -> "TelegraphProcess[\[CapitalATilde]\216\[CapitalAHat]\274] \
represents a telegraph process with rate \
\[CapitalATilde]\216\[CapitalAHat]\274."|>, <|"label" -> "TemplateApply", 
  "type" -> "keyword", "info" -> "TemplateApply[template] applies a template, \
evaluating all template elements it contains.TemplateApp"|>, 
 <|"label" -> "TemplateExpression", "type" -> "keyword", 
  "info" -> "TemplateExpression[expr] represents an expression held until a \
template is applied, and then evaluat"|>, <|"label" -> "TemplateIf", 
  "type" -> "keyword", "info" -> "TemplateIf[condition, tclause] represents \
an element of a template object that inserts tclause if th"|>, 
 <|"label" -> "TemplateObject", "type" -> "keyword", 
  "info" -> "TemplateObject[expr] represents a template object to be applied \
using functions like TemplateApply.T"|>, <|"label" -> "TemplateSequence", 
  "type" -> "keyword", "info" -> "TemplateSequence[body, list] represents an \
element of a template object that yields a sequence consi"|>, 
 <|"label" -> "TemplateSlot", "type" -> "keyword", 
  "info" -> "                                                                 \
  th\nTemplateSlot[n] represents a t"|>, <|"label" -> "TemplateWith", 
  "type" -> "keyword", "info" -> "TemplateWith[\"name\" \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] value, expr] \
represents an element of a template object that evaluates expr af"|>, 
 <|"label" -> "TemporalData", "type" -> "keyword", 
  "info" -> "TemporalData[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, tspec] \
represents temporal data with values v  at times specified by tspec"|>, 
 <|"label" -> "TemporalRegularity", "type" -> "keyword", 
  "info" -> "TemporalRegularity is an option for TemporalData, TimeSeries, \
and EventSeries that controls whether "|>, <|"label" -> "Temporary", 
  "type" -> "keyword", "info" -> "Temporary is an attribute assigned to \
symbols which are created as local variables by Module. "|>, 
 <|"label" -> "TensorContract", "type" -> "keyword", 
  "info" -> "TensorContract[tensor, {{s  , s  }, {s  , s  }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields the \
contraction of tensor in the pairs {s"|>, <|"label" -> "TensorDimensions", 
  "type" -> "keyword", "info" -> 
   "TensorDimensions[tensor] gives the list of dimensions of tensor."|>, 
 <|"label" -> "TensorExpand", "type" -> "keyword", 
  "info" -> "TensorExpand[texpr] expands out tensor-related products in the \
symbolic tensor expression texpr."|>, <|"label" -> "TensorProduct", 
  "type" -> "keyword", "info" -> "TensorProduct[tensor , tensor , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents the \
tensor product of the tensor .\n                   "|>, 
 <|"label" -> "TensorRank", "type" -> "keyword", 
  "info" -> "TensorRank[tensor] gives the rank of tensor."|>, 
 <|"label" -> "TensorReduce", "type" -> "keyword", 
  "info" -> "TensorReduce[texpr] attempts to return a canonical form for the \
symbolic tensor expression texpr."|>, <|"label" -> "TensorSymmetry", 
  "type" -> "keyword", "info" -> "TensorSymmetry[tensor] gives the symmetry \
of tensor under permutations of its slots.TensorSymmetry[t"|>, 
 <|"label" -> "TensorTranspose", "type" -> "keyword", 
  "info" -> "TensorTranspose[tensor, perm] represents the tensor obtained by \
transposing the slots of tensor as g"|>, <|"label" -> "TensorWedge", 
  "type" -> "keyword", "info" -> "TensorWedge[tensor , tensor , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents the \
antisymmetrized tensor product of the tensor .\n     "|>, 
 <|"label" -> "TestID", "type" -> "keyword", "info" -> "TestID is an option \
to VerificationTest that specifies a string used as an identifier for the \
test."|>, <|"label" -> "TestReport", "type" -> "keyword", 
  "info" -> "TestReport[\"file\"] runs tests from a file, returning an \
analysis of the completed test run.TestRepor"|>, 
 <|"label" -> "TestReportObject", "type" -> "keyword", 
  "info" -> "TestReportObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] gives an object that represents the results of \
TestReport."|>, <|"label" -> "TestResultObject", "type" -> "keyword", 
  "info" -> "TestResultObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] gives an object that represents the results of a \
VerificationTest."|>, <|"label" -> "Tetrahedron", "type" -> "keyword", 
  "info" -> "Tetrahedron[] represents a regular tetrahedron centered at the \
origin with unit edge length.Tetrahed"|>, <|"label" -> "TeXForm", 
  "type" -> "keyword", "info" -> 
   "TeXForm[expr] prints as a TeX version of expr. "|>, 
 <|"label" -> "Text", "type" -> "keyword", "info" -> "Text[expr] displays \
with expr in plain text format. Text[expr, coords] is a graphics primitive \
that "|>, <|"label" -> "TextAlignment", "type" -> "keyword", 
  "info" -> "TextAlignment is an option for Cell, Style and related \
constructs which specifies how successive lin"|>, 
 <|"label" -> "TextCases", "type" -> "keyword", 
  "info" -> "TextCases[text, form] gives a list of all cases of text \
identified as being of type form that appear"|>, 
 <|"label" -> "TextContents", "type" -> "keyword", 
  "info" -> "TextContents[text] gives a dataset of information about \
entities, dates, quantities and other conten"|>, 
 <|"label" -> "TextElement", "type" -> "keyword", 
  "info" -> "TextElement[text, props] represents an element of text with the \
specified properties.TextElement[{el"|>, <|"label" -> "TextGrid", 
  "type" -> "keyword", "info" -> "TextGrid[{{expr  , expr  , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {expr  , expr  \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] is an object \
that formats expr   textually a"|>, <|"label" -> "TextJustification", 
  "type" -> "keyword", "info" -> "TextJustification is an option for Cell and \
Inset which specifies how much lines of text can be stre"|>, 
 <|"label" -> "TextPosition", "type" -> "keyword", 
  "info" -> "TextPosition[text, form] gives a list of the starting and ending \
positions at which instances of for"|>, <|"label" -> "TextRecognize", 
  "type" -> "keyword", "info" -> "TextRecognize[image] recognizes text in \
image and returns it as a string.TextRecognize[image, level]"|>, 
 <|"label" -> "TextSearch", "type" -> "keyword", 
  "info" -> "TextSearch[source, form] searches for files referenced by source \
that contain text matching form.Tex"|>, <|"label" -> "TextSearchReport", 
  "type" -> "keyword", "info" -> "TextSearchReport[source, form] gives a \
structured report of files referenced by source that contain "|>, 
 <|"label" -> "TextSentences", "type" -> "keyword", 
  "info" -> "TextSentences[\"string\"] gives a list of the runs of characters \
identified as sentences in string.Tex"|>, <|"label" -> "TextString", 
  "type" -> "keyword", "info" -> 
   "TextString[expr] gives a human-readable string representation of expr."|>\
, <|"label" -> "TextStructure", "type" -> "keyword", 
  "info" -> "TextStructure[\"text\"] generates a nested collection of \
TextElement objects representing the grammati"|>, 
 <|"label" -> "TextStyle", "type" -> "keyword", 
  "info" -> "TextStyle is an option for graphics functions and for Text which \
specifies the default style and fon"|>, <|"label" -> "TextTranslation", 
  "type" -> "keyword", "info" -> "TextTranslation[\"text\"] translates text \
into the current default language. TextTranslation[\"text\", l"|>, 
 <|"label" -> "Texture", "type" -> "keyword", "info" -> "Texture[obj] is a \
graphics directive that specifies that obj should be used as a texture on \
faces of"|>, <|"label" -> "TextureCoordinateFunction", "type" -> "keyword", 
  "info" -> "TextureCoordinateFunction is an option to Plot3D and similar \
functions that specifies a function tha"|>, 
 <|"label" -> "TextureCoordinateScaling", "type" -> "keyword", 
  "info" -> "TextureCoordinateScaling is an option to Plot3D and similar \
functions that specifies whether argumen"|>, <|"label" -> "TextWords", 
  "type" -> "keyword", "info" -> "TextWords[\"string\"] gives a list of the \
runs of characters identified as words in string.TextWords[\""|>, 
 <|"label" -> "Therefore", "type" -> "keyword", 
  "info" -> "Therefore[x, y] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210b4 y."|>, 
 <|"label" -> "ThermodynamicData", "type" -> "keyword", 
  "info" -> "ThermodynamicData[\"name\", \"property\"] gives the value of the \
specific property for the substance \"na"|>, <|"label" -> "ThermometerGauge", 
  "type" -> "keyword", "info" -> "ThermometerGauge[value] draws a thermometer \
showing value in a range of 0 to 1.ThermometerGauge[valu"|>, 
 <|"label" -> "Thick", "type" -> "keyword", "info" -> "Thick is a graphics \
directive that specifies that lines which follow should be drawn thick."|>, 
 <|"label" -> "Thickness", "type" -> "keyword", 
  "info" -> "Thickness[r] is a graphics directive which specifies that lines \
which follow are to be drawn with th"|>, <|"label" -> "Thin", 
  "type" -> "keyword", "info" -> "Thin is a graphics directive that specifies \
that lines which follow should be drawn thin."|>, 
 <|"label" -> "Thinning", "type" -> "keyword", "info" -> "Thinning[image] \
finds the skeletons of foreground regions in image by applying morphological \
thinnin"|>, <|"label" -> "ThisLink", "type" -> "keyword", 
  "info" -> "ThisLink is used in patterns for external packages to \
distinguish between several instances of the s"|>, 
 <|"label" -> "ThompsonGroupTh", "type" -> "keyword", 
  "info" -> 
   "ThompsonGroupTh[] represents the sporadic simple Thompson group Th."|>, 
 <|"label" -> "Thread", "type" -> "keyword", "info" -> "Thread[f[args]] \
\"threads\" f over any lists that appear in args. Thread[f[args], h] threads \
f over an"|>, <|"label" -> "ThreadingLayer", "type" -> "keyword", 
  "info" -> "ThreadingLayer[f] represents a net layer that takes several \
input arrays and applies a function f to"|>, <|"label" -> "ThreeJSymbol", 
  "type" -> "keyword", "info" -> "ThreeJSymbol[{j , m }, {j , m }, {j , m }] \
gives the values of the Wigner \
3\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220j symbol. \n      \
       "|>, <|"label" -> "Threshold", "type" -> "keyword", 
  "info" -> "Threshold[data] thresholds data by replacing values close to \
zero by zero.Threshold[data, tspec] thr"|>, <|"label" -> "Through", 
  "type" -> "keyword", "info" -> "Through[p[f , f ][x]] gives p[f [x], f \
[x]]. Through[expr, h] performs the transformation wherever h"|>, 
 <|"label" -> "Throw", "type" -> "keyword", "info" -> "Throw[value] stops \
evaluation and returns value as the value of the nearest enclosing \
Catch.Throw[va"|>, <|"label" -> "ThueMorse", "type" -> "keyword", 
  "info" -> "                         th\nThueMorse[n] gives the \
n\[CapitalATilde]\257\[CapitalAHat]\216\[CapitalAHat]    term in the \
Thue\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Morse \
sequence."|>, <|"label" -> "Thumbnail", "type" -> "keyword", 
  "info" -> "Thumbnail[image] gives a thumbnail version of an \
image.Thumbnail[file] gives a thumbnail of an image"|>, 
 <|"label" -> "Thursday", "type" -> "keyword", 
  "info" -> "Thursday is a day of the week."|>, 
 <|"label" -> "TickDirection", "type" -> "keyword", 
  "info" -> "TickDirection is an option for AxisObject that specifies where \
the ticks are drawn relative to the a"|>, 
 <|"label" -> "TickLabelOrientation", "type" -> "keyword", 
  "info" -> "TickLabelOrientation is an option for AxisObject that specifies \
how the tick labels should be orient"|>, <|"label" -> "TickLabelPositioning", 
  "type" -> "keyword", "info" -> "TickLabelPositioning is an option for \
AxisObject that specifies how the tick labels should be positi"|>, 
 <|"label" -> "TickLabels", "type" -> "keyword", 
  "info" -> "TickLabels is an option for AxisObject that specifies how the \
tick marks should be labeled."|>, <|"label" -> "TickLengths", 
  "type" -> "keyword", "info" -> "TickLengths is an option for AxisObject \
that specifies the lengths of the tick marks."|>, 
 <|"label" -> "TickPositions", "type" -> "keyword", 
  "info" -> "TickPositions is an option for AxisObject that specifies where \
the tick marks should be positioned."|>, <|"label" -> "Ticks", 
  "type" -> "keyword", "info" -> "Ticks is an option for graphics functions \
that specifies tick marks for axes. "|>, <|"label" -> "TicksStyle", 
  "type" -> "keyword", "info" -> "TicksStyle is an option for graphics \
functions which specifies how ticks should be rendered."|>, 
 <|"label" -> "TideData", "type" -> "keyword", "info" -> "TideData[spec] \
returns the tidal properties for a location or a set of tidal \
parameters.TideData[spe"|>, <|"label" -> "Tilde", "type" -> "keyword", 
  "info" -> "Tilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\274 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\274 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "TildeEqual", "type" -> "keyword", 
  "info" -> "TildeEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\203 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "TildeFullEqual", "type" -> "keyword", 
  "info" -> "TildeFullEqual[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\205 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\205 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "TildeTilde", "type" -> "keyword", 
  "info" -> "TildeTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\210 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\210 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "TimeConstrained", "type" -> "keyword", 
  "info" -> "TimeConstrained[expr, t] evaluates expr, stopping after t \
seconds. TimeConstrained[expr, t, failexpr"|>, 
 <|"label" -> "TimeConstraint", "type" -> "keyword", 
  "info" -> "TimeConstraint is an option for various functions that specifies \
the maximum time to spend doing a p"|>, <|"label" -> "TimeDirection", 
  "type" -> "keyword", "info" -> "TimeDirection is an option for Sunrise, \
Sunset, and related functions that specifies whether the nex"|>, 
 <|"label" -> "TimeGoal", "type" -> "keyword", "info" -> "TimeGoal is an \
option for various functions that specifies how long to spend doing a \
particular oper"|>, <|"label" -> "TimelinePlot", "type" -> "keyword", 
  "info" -> "TimelinePlot[{date , date , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a \
timeline plot with dates date , date , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246. \
TimelinePlot[{even"|>, <|"label" -> "TimeObject", "type" -> "keyword", 
  "info" -> "TimeObject[] represents the current time.TimeObject[{h, m, s}] \
represents a time object of standard "|>, <|"label" -> "TimeObjectQ", 
  "type" -> "keyword", "info" -> "TimeObjectQ[expr] gives True if expr is a \
TimeObject with valid arguments, and False otherwise."|>, 
 <|"label" -> "TimeRemaining", "type" -> "keyword", 
  "info" -> "TimeRemaining[] gives the number of seconds remaining until the \
earliest enclosing TimeConstrained w"|>, <|"label" -> "Times", 
  "type" -> "keyword", "info" -> "x * y * z, x \
\[CapitalATilde]\203\[CapitalAHat]\227 y \
\[CapitalATilde]\203\[CapitalAHat]\227 z, or x y z represents a product of \
terms. "|>, <|"label" -> "TimesBy", "type" -> "keyword", 
  "info" -> "x *= c multiplies x by c and returns the new value of x. "|>, 
 <|"label" -> "TimeSeries", "type" -> "keyword", 
  "info" -> "TimeSeries[{{t , v }, {t , v } \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
time series specified by time-value pairs {t , v }.T"|>, 
 <|"label" -> "TimeSeriesAggregate", "type" -> "keyword", 
  "info" -> "TimeSeriesAggregate[tseries, dt] computes the mean value of \
tseries over non-overlapping windows of "|>, 
 <|"label" -> "TimeSeriesForecast", "type" -> "keyword", 
  "info" -> "TimeSeriesForecast[tproc, data, k] gives the k-step-ahead \
forecast beyond data according to the time"|>, 
 <|"label" -> "TimeSeriesInsert", "type" -> "keyword", 
  "info" -> "TimeSeriesInsert[tseries, {t, v}] inserts a value v at time t in \
the time series tseries.TimeSeriesI"|>, 
 <|"label" -> "TimeSeriesInvertibility", "type" -> "keyword", 
  "info" -> "TimeSeriesInvertibility[tproc] gives conditions for the time \
series process tproc to be invertible. "|>, <|"label" -> "TimeSeriesMap", 
  "type" -> "keyword", "info" -> 
   "TimeSeriesMap[f, tseries] applies f to the values in tseries."|>, 
 <|"label" -> "TimeSeriesMapThread", "type" -> "keyword", 
  "info" -> "TimeSeriesMapThread[f, tseries] gives {{t , f[t , x ]}, {t , f[t \
, x ]}, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} for the \
time series tser"|>, <|"label" -> "TimeSeriesModel", "type" -> "keyword", 
  "info" -> "TimeSeriesModel[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents the symbolic time series model obtained from \
TimeSeriesModelFit."|>, <|"label" -> "TimeSeriesModelFit", 
  "type" -> "keyword", "info" -> "TimeSeriesModelFit[data] constructs a time \
series model for data from an automatically selected mode"|>, 
 <|"label" -> "TimeSeriesResample", "type" -> "keyword", 
  "info" -> "TimeSeriesResample[tseries] uniformly resamples tseries \
according to its minimum time increment.Time"|>, 
 <|"label" -> "TimeSeriesRescale", "type" -> "keyword", 
  "info" -> "TimeSeriesRescale[tseries, {t   , t   }] rescales the times in \
time series tseries to run from t    "|>, <|"label" -> "TimeSeriesShift", 
  "type" -> "keyword", "info" -> "TimeSeriesShift[tseries, shift] shifts the \
time series tseries to the left or right according to shi"|>, 
 <|"label" -> "TimeSeriesThread", "type" -> "keyword", 
  "info" -> "TimeSeriesThread[f, {tseries , tseries , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] combines the \
tseries  using the function f.\n           "|>, 
 <|"label" -> "TimeSeriesWindow", "type" -> "keyword", 
  "info" -> "TimeSeriesWindow[tseries, {t   , t   }] gives the elements of \
the time series tseries that fall betw"|>, <|"label" -> "TimeValue", 
  "type" -> "keyword", "info" -> "TimeValue[s, i, t] calculates the time \
value of a security s at time t for an interest specified by "|>, 
 <|"label" -> "TimeWarpingCorrespondence", "type" -> "keyword", 
  "info" -> "TimeWarpingCorrespondence[s , s ] gives the time warping (DTW) \
similarity path between sequences s  "|>, <|"label" -> "TimeWarpingDistance", 
  "type" -> "keyword", "info" -> "TimeWarpingDistance[s , s ] gives the \
dynamic time warping (DTW) distance between sequences s  and s"|>, 
 <|"label" -> "TimeZone", "type" -> "keyword", "info" -> "TimeZone is an \
option for DateObject, DateString, and related functions that specifies the \
time zone"|>, <|"label" -> "TimeZoneConvert", "type" -> "keyword", 
  "info" -> "TimeZoneConvert[time, timezone] converts the date or time object \
time to the specified time zone tim"|>, <|"label" -> "TimeZoneOffset", 
  "type" -> "keyword", "info" -> "TimeZoneOffset[tz] gives the numeric offset \
between the time zone tz and GMT on the current date.Tim"|>, 
 <|"label" -> "Timing", "type" -> "keyword", "info" -> "Timing[expr] \
evaluates expr, and returns a list of the time in seconds used, together with \
the resul"|>, <|"label" -> "Tiny", "type" -> "keyword", 
  "info" -> "Tiny is a style or option setting that specifies that objects \
should be tiny."|>, <|"label" -> "TitsGroupT", "type" -> "keyword", 
  "info" -> "TitsGroupT[] represents the simple Tits group T."|>, 
 <|"label" -> "ToCharacterCode", "type" -> "keyword", 
  "info" -> "ToCharacterCode[\"string\"] gives a list of the integer codes \
corresponding to the characters in a str"|>, <|"label" -> "ToColor", 
  "type" -> "keyword", "info" -> "ToColor[color, form] converts color to form \
if form is GrayLevel, RGBColor or CMYKColor. Otherwise f"|>, 
 <|"label" -> "ToContinuousTimeModel", "type" -> "keyword", 
  "info" -> "ToContinuousTimeModel[lsys] gives the continuous-time \
approximation of the discrete-time systems mod"|>, 
 <|"label" -> "ToDate", "type" -> "keyword", "info" -> "ToDate[time] converts \
an absolute time in seconds since the beginning of January 1, 1900 to a date \
o"|>, <|"label" -> "Today", "type" -> "keyword", 
  "info" -> "Today gives a DateObject representing the current day."|>, 
 <|"label" -> "ToDiscreteTimeModel", "type" -> "keyword", 
  "info" -> "ToDiscreteTimeModel[lsys, \
\[CapitalATilde]\217\[CapitalAHat]\204] gives the discrete-time \
approximation, with sampling period \[CapitalATilde]\217\[CapitalAHat]\204, \
of the c"|>, <|"label" -> "ToEntity", "type" -> "keyword", 
  "info" -> "ToEntity[expr] returns an entity object corresponding to the \
given expression.ToEntity[expr, type] r"|>, <|"label" -> "ToeplitzMatrix", 
  "type" -> "keyword", "info" -> "ToeplitzMatrix[n] gives the \
n\[CapitalATilde]\203\[CapitalAHat]\227n Toeplitz matrix with first row and \
first column being successive int"|>, <|"label" -> "ToFileName", 
  "type" -> "keyword", "info" -> "ToFileName[\"directory\", \"name\"] \
assembles a full file name from a directory name and a file name. To"|>, 
 <|"label" -> "Together", "type" -> "keyword", "info" -> "Together[expr] puts \
terms in a sum over a common denominator, and cancels factors in the result. \
"|>, <|"label" -> "Toggler", "type" -> "keyword", 
  "info" -> "Toggler[x] represents a toggler button with setting x, that \
toggles between True and False. Toggler["|>, <|"label" -> "TogglerBar", 
  "type" -> "keyword", "info" -> "TogglerBar[x, {val , val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
toggler bar with setting x and with toggler buttons for "|>, 
 <|"label" -> "ToInvertibleTimeSeries", "type" -> "keyword", 
  "info" -> "ToInvertibleTimeSeries[tproc] returns an invertible version of a \
time series process tproc."|>, <|"label" -> "TokenWords", 
  "type" -> "keyword", "info" -> "TokenWords is an option for Read and \
related functions which gives a list of token words to be used "|>, 
 <|"label" -> "Tolerance", "type" -> "keyword", 
  "info" -> "Tolerance is an option for various numerical options which \
specifies the tolerance that should be al"|>, <|"label" -> "ToLowerCase", 
  "type" -> "keyword", "info" -> "ToLowerCase[string] yields a string in \
which all letters have been converted to lowercase. "|>, 
 <|"label" -> "Tomorrow", "type" -> "keyword", 
  "info" -> "Tomorrow gives a DateObject representing the following day."|>, 
 <|"label" -> "ToNumberField", "type" -> "keyword", 
  "info" -> "ToNumberField[a, \[CapitalATilde]\216\[CapitalAHat]\[Cedilla]] \
expresses the algebraic number a in the number field generated by \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]. ToNumberFie"|>, 
 <|"label" -> "TooBig", "type" -> "keyword", 
  "info" -> "TooBig is an internal symbol."|>, 
 <|"label" -> "ToonShading", "type" -> "keyword", 
  "info" -> "ToonShading[] is a three-dimensional graphics directive \
specifying that surfaces that follow are to "|>, 
 <|"label" -> "Top", "type" -> "keyword", "info" -> "Top is a symbol that \
represents the top for purposes of alignment and positioning. "|>, 
 <|"label" -> "TopHatTransform", "type" -> "keyword", 
  "info" -> "TopHatTransform[image, ker] gives the morphological top-hat \
transform of image with respect to struc"|>, 
 <|"label" -> "ToPolarCoordinates", "type" -> "keyword", 
  "info" -> "ToPolarCoordinates[{x, y}] gives the {r, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla]} polar coordinates corresponding \
to the Cartesian coordin"|>, <|"label" -> "TopologicalSort", 
  "type" -> "keyword", "info" -> "TopologicalSort[g] gives a list of vertices \
of g in topologically sorted order for a directed acycli"|>, 
 <|"label" -> "ToRadicals", "type" -> "keyword", 
  "info" -> "ToRadicals[expr] attempts to express all Root objects in expr in \
terms of radicals. "|>, <|"label" -> "ToRules", "type" -> "keyword", 
  "info" -> "ToRules[eqns] takes logical combinations of equations, in the \
form generated by Roots and Reduce, an"|>, <|"label" -> "Torus", 
  "type" -> "keyword", "info" -> "Torus[{x, y, z}, {r     , r     }] \
represents a torus centered at {x, y, z} with inner radius r     "|>, 
 <|"label" -> "ToSphericalCoordinates", "type" -> "keyword", 
  "info" -> "ToSphericalCoordinates[{x, y, z}] gives the {r, \
\[CapitalATilde]\216\[CapitalAHat]\[Cedilla], \
\[CapitalATilde]\217\[CapitalAHat]\225} spherical coordinates corresponding \
to the Car"|>, <|"label" -> "ToString", "type" -> "keyword", 
  "info" -> "ToString[expr] gives a string corresponding to the printed form \
of expr in OutputForm. ToString[expr"|>, <|"label" -> "Total", 
  "type" -> "keyword", "info" -> "Total[list] gives the total of the elements \
in list. Total[list, n] totals all elements down to leve"|>, 
 <|"label" -> "TotalLayer", "type" -> "keyword", 
  "info" -> "TotalLayer[] represents a net layer taking a list of input \
arrays and performing elementwise additio"|>, 
 <|"label" -> "TotalVariationFilter", "type" -> "keyword", 
  "info" -> "TotalVariationFilter[data] iteratively reduces noise while \
preserving rapid transitions in data.Tota"|>, 
 <|"label" -> "TotalWidth", "type" -> "keyword", 
  "info" -> "TotalWidth is an option that can be set for output streams to \
specify the maximum total number of ch"|>, 
 <|"label" -> "TouchscreenAutoZoom", "type" -> "keyword", 
  "info" -> "TouchscreenAutoZoom is an option for Manipulate and Graphics3D \
that determines whether the interface"|>, 
 <|"label" -> "TouchscreenControlPlacement", "type" -> "keyword", 
  "info" -> "TouchscreenControlPlacement is an option for Manipulate that \
determines the placement of the slide-o"|>, <|"label" -> "ToUpperCase", 
  "type" -> "keyword", "info" -> "ToUpperCase[string] yields a string in \
which all letters have been converted to uppercase. "|>, 
 <|"label" -> "TourVideo", "type" -> "keyword", 
  "info" -> "TourVideo[graphics, {pt , pt , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
video by taking a tour at points pt  around graphics."|>, 
 <|"label" -> "Tr", "type" -> "keyword", "info" -> "Tr[list] finds the trace \
of the matrix or tensor list. Tr[list, f] finds a generalized trace, combin"|>\
, <|"label" -> "Trace", "type" -> "keyword", "info" -> "Trace[expr] generates \
a list of all expressions used in the evaluation of expr. Trace[expr, form] \
in"|>, <|"label" -> "TraceAbove", "type" -> "keyword", 
  "info" -> "TraceAbove is an option for Trace and related functions which \
specifies whether to include evaluatio"|>, <|"label" -> "TraceAction", 
  "type" -> "keyword", "info" -> "TraceAction is an option for TracePrint and \
TraceDialog that specifies the function to be applied to"|>, 
 <|"label" -> "TraceBackward", "type" -> "keyword", 
  "info" -> "TraceBackward is an option for Trace and related functions that \
specifies whether to include precedi"|>, <|"label" -> "TraceDepth", 
  "type" -> "keyword", "info" -> "TraceDepth is an option for Trace and \
related functions which specifies the maximum nesting of evalu"|>, 
 <|"label" -> "TraceDialog", "type" -> "keyword", 
  "info" -> "TraceDialog[expr] initiates a dialog for every expression used \
in the evaluation of expr. TraceDialo"|>, <|"label" -> "TraceForward", 
  "type" -> "keyword", "info" -> "TraceForward is an option for Trace and \
related functions which specifies whether to include later e"|>, 
 <|"label" -> "TraceInternal", "type" -> "keyword", 
  "info" -> "TraceInternal is an option for Trace and related functions \
which, if True or False, specifies whethe"|>, 
 <|"label" -> "TraceLevel", "type" -> "keyword", 
  "info" -> "TraceLevel[] returns the level currently being traced when it \
appears within Trace and related funct"|>, <|"label" -> "TraceOff", 
  "type" -> "keyword", "info" -> "TraceOff is an option for Trace and related \
functions which specifies forms inside which tracing sho"|>, 
 <|"label" -> "TraceOn", "type" -> "keyword", "info" -> "TraceOn is an option \
for Trace and related functions which specifies when tracing should be \
switched"|>, <|"label" -> "TraceOriginal", "type" -> "keyword", 
  "info" -> "TraceOriginal is an option for Trace and related functions which \
specifies whether to test the form "|>, <|"label" -> "TracePrint", 
  "type" -> "keyword", "info" -> "TracePrint[expr] prints all expressions \
used in the evaluation of expr. TracePrint[expr, form] inclu"|>, 
 <|"label" -> "TraceScan", "type" -> "keyword", 
  "info" -> "TraceScan[f, expr] applies f to all expressions used in the \
evaluation of expr. TraceScan[f, expr, f"|>, <|"label" -> "TrackedSymbols", 
  "type" -> "keyword", "info" -> "TrackedSymbols is an option to Refresh, \
Manipulate, and related functions that specifies which symbo"|>, 
 <|"label" -> "TrackingFunction", "type" -> "keyword", 
  "info" -> "TrackingFunction is an option for Manipulate controls that \
specifies functions to use during interac"|>, 
 <|"label" -> "TracyWidomDistribution", "type" -> "keyword", 
  "info" -> "TracyWidomDistribution[\[CapitalATilde]\216b2] represents a \
Tracy\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Widom \
distribution with Dyson index \[CapitalATilde]\216b2."|>, 
 <|"label" -> "TradingChart", "type" -> "keyword", 
  "info" -> "TradingChart[{{date , {open , high , low , close , volume }}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] makes a chart \
showing prices and v"|>, <|"label" -> "TraditionalForm", "type" -> "keyword", 
  "info" -> "TraditionalForm[expr] prints as an approximation to the \
traditional mathematical notation for expr. "|>, 
 <|"label" -> "TraditionalFunctionNotation", "type" -> "keyword", 
  "info" -> "TraditionalFunctionNotation is an option for selections that \
specifies whether input of the form f(x"|>, 
 <|"label" -> "TrainingProgressCheckpointing", "type" -> "keyword", 
  "info" -> "TrainingProgressCheckpointing is an option for NetTrain that \
specifies how to save copies of the net"|>, 
 <|"label" -> "TrainingProgressFunction", "type" -> "keyword", 
  "info" -> "TrainingProgressFunction is an option for NetTrain that \
specifies a function to run periodically dur"|>, 
 <|"label" -> "TrainingProgressMeasurements", "type" -> "keyword", 
  "info" -> "TrainingProgressMeasurements is an option for NetTrain that \
specifies measurements to make while tra"|>, 
 <|"label" -> "TrainingProgressReporting", "type" -> "keyword", 
  "info" -> "TrainingProgressReporting is an option for NetTrain and related \
functions that specifies how to repo"|>, 
 <|"label" -> "TrainingStoppingCriterion", "type" -> "keyword", 
  "info" -> "TrainingStoppingCriterion is an option for NetTrain that \
specifies a criterion for stopping training"|>, 
 <|"label" -> "TrainingUpdateSchedule", "type" -> "keyword", 
  "info" -> "TrainingUpdateSchedule is an option for NetTrain that specifies \
which arrays of the network can be u"|>, 
 <|"label" -> "TrainTextContentDetector", "type" -> "keyword", 
  "info" -> "TrainTextContentDetector[{text  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {span  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] class , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] trains a \
ContentDetectorFunction[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] based"|>, <|"label" -> "TransferFunctionCancel", 
  "type" -> "keyword", "info" -> "TransferFunctionCancel[tfm] cancels common \
poles and zeros in the TransferFunctionModel tfm.Transfer"|>, 
 <|"label" -> "TransferFunctionExpand", "type" -> "keyword", 
  "info" -> "TransferFunctionExpand[tfm] expands polynomial terms in the \
numerators and denominators of the Trans"|>, 
 <|"label" -> "TransferFunctionFactor", "type" -> "keyword", 
  "info" -> "TransferFunctionFactor[tfm] factors the polynomial terms in the \
numerators and denominators of the T"|>, 
 <|"label" -> "TransferFunctionModel", "type" -> "keyword", 
  "info" -> "TransferFunctionModel[m, s] represents the model of the \
transfer-function matrix m with complex vari"|>, 
 <|"label" -> "TransferFunctionPoles", "type" -> "keyword", 
  "info" -> "TransferFunctionPoles[tfm] gives a matrix of roots of the \
denominators in the TransferFunctionModel "|>, 
 <|"label" -> "TransferFunctionTransform", "type" -> "keyword", 
  "info" -> "TransferFunctionTransform[f, tf] transforms the \
TransferFunctionModel object tf using the transforma"|>, 
 <|"label" -> "TransferFunctionZeros", "type" -> "keyword", 
  "info" -> "TransferFunctionZeros[tfm] gives a matrix of roots of the \
numerators in the TransferFunctionModel tf"|>, 
 <|"label" -> "TransformationClass", "type" -> "keyword", 
  "info" -> "TransformationClass is an option that specifies the class of \
geometric transformations to be used."|>, 
 <|"label" -> "TransformationFunction", "type" -> "keyword", 
  "info" -> "TransformationFunction[data] represents a transformation \
function that applies geometric and other t"|>, 
 <|"label" -> "TransformationFunctions", "type" -> "keyword", 
  "info" -> "TransformationFunctions is an option for Simplify and \
FullSimplify which gives the list of functions"|>, 
 <|"label" -> "TransformationMatrix", "type" -> "keyword", 
  "info" -> "TransformationMatrix[tfun] gives the homogeneous matrix \
associated with a TransformationFunction obj"|>, 
 <|"label" -> "TransformedDistribution", "type" -> "keyword", 
  "info" -> "TransformedDistribution[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 dist] represents the \
transformed distribution of expr where the ra"|>, 
 <|"label" -> "TransformedField", "type" -> "keyword", 
  "info" -> "TransformedField[t, f, {x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x } \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, y }] uses the \
coordinate transformation t to tr"|>, <|"label" -> "TransformedProcess", 
  "type" -> "keyword", "info" -> "TransformedProcess[expr, x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\222 proc, t] represents \
the transformed process of expr where the variable "|>, 
 <|"label" -> "TransformedRegion", "type" -> "keyword", 
  "info" -> "TransformedRegion[reg, f] represents the transformed region \
{f(p) | p \[CapitalATilde]\[Cent]\[CapitalAHat]\210\[CapitalAHat]\210 reg}, \
where reg is a region "|>, <|"label" -> "TransitionDirection", 
  "type" -> "keyword", "info" -> "TransitionDirection is an option for \
PaneSelector that specifies the direction in which a transition"|>, 
 <|"label" -> "TransitionDuration", "type" -> "keyword", 
  "info" -> "TransitionDuration is an option for PaneSelector that specifies \
the duration in seconds that a trans"|>, <|"label" -> "TransitionEffect", 
  "type" -> "keyword", "info" -> "TransitionEffect is an option for \
PaneSelector that specifies the visual effect used when transition"|>, 
 <|"label" -> "TransitiveClosureGraph", "type" -> "keyword", 
  "info" -> "TransitiveClosureGraph[g] gives the transitive closure of the \
graph g.TransitiveClosureGraph[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w,"|>, 
 <|"label" -> "TransitiveReductionGraph", "type" -> "keyword", 
  "info" -> "TransitiveReductionGraph[g] gives a transitive reduction of the \
graph g.TransitiveReductionGraph[{v "|>, <|"label" -> "Translate", 
  "type" -> "keyword", "info" -> "Translate[g, {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents \
graphics primitives g translated by the vector {x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}. Transla"|>, 
 <|"label" -> "TranslationOptions", "type" -> "keyword", 
  "info" -> "TranslationOptions \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] {opt  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , opt  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} is an option for \
Style and Cell that controls how"|>, <|"label" -> "TranslationTransform", 
  "type" -> "keyword", "info" -> "TranslationTransform[v] gives a \
TransformationFunction that represents translation of points by a ve"|>, 
 <|"label" -> "Transliterate", "type" -> "keyword", 
  "info" -> "Transliterate[\"string\"] attempts to transliterate string into \
plain ASCII.Transliterate[\"string\", sc"|>, <|"label" -> "Transparent", 
  "type" -> "keyword", "info" -> "Transparent represents perfect transparency \
in graphics or style specifications. "|>, <|"label" -> "TravelDirections", 
  "type" -> "keyword", "info" -> "TravelDirections[{loc , loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates \
directions for travel from loc  to loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.TravelDirecti"|>, 
 <|"label" -> "TravelDirectionsData", "type" -> "keyword", 
  "info" -> "TravelDirectionsData[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents travel directions generated by \
TravelDirections."|>, <|"label" -> "TravelDistance", "type" -> "keyword", 
  "info" -> "TravelDistance[{loc , loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
estimated distance for travel from loc  to loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n      "|>, 
 <|"label" -> "TravelDistanceList", "type" -> "keyword", 
  "info" -> "TravelDistanceList[{loc , loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, loc }] returns \
the list {TravelDistance[loc , loc ], \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, TravelDis"|>, 
 <|"label" -> "TravelMethod", "type" -> "keyword", 
  "info" -> "TravelMethod is an option for TravelDirections and related \
functions that specifies the mode of tran"|>, 
 <|"label" -> "TravelTime", "type" -> "keyword", 
  "info" -> "TravelTime[{loc , loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
estimated time to travel from loc  to loc , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246.\n               \
"|>, <|"label" -> "Tree", "type" -> "keyword", "info" -> "Tree[{subtree , \
subtree , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] \
represents a tree with a list of child subtrees subtree .Tree[data, su"|>, 
 <|"label" -> "TreeCases", "type" -> "keyword", 
  "info" -> "TreeCases[tree, pattern] gives a list of subtrees of tree with \
data matching pattern.TreeCases[tree,"|>, <|"label" -> "TreeChildren", 
  "type" -> "keyword", "info" -> "TreeChildren[tree] extracts the children of \
the root of the Tree object tree."|>, <|"label" -> "TreeCount", 
  "type" -> "keyword", "info" -> "TreeCount[tree, pattern] gives the number \
of subtrees of tree whose data matches pattern.TreeCount[t"|>, 
 <|"label" -> "TreeData", "type" -> "keyword", 
  "info" -> "TreeData[tree] extracts the data in the root of tree."|>, 
 <|"label" -> "TreeDelete", "type" -> "keyword", 
  "info" -> "TreeDelete[tree, pos] deletes the subtree of tree at the \
position specified by pos.TreeDelete[tree, "|>, 
 <|"label" -> "TreeDepth", "type" -> "keyword", 
  "info" -> "TreeDepth[tree] gives the maximum level of tree.TreeDepth[tree, \
pattern] gives the maximum level of "|>, <|"label" -> "TreeElementLabel", 
  "type" -> "keyword", "info" -> "TreeElementLabel is an option for Tree and \
related functions that specifies what labels should be us"|>, 
 <|"label" -> "TreeElementStyle", "type" -> "keyword", 
  "info" -> "TreeElementStyle is an option for Tree and related functions \
that specifies what style to use for su"|>, <|"label" -> "TreeExpression", 
  "type" -> "keyword", "info" -> "TreeExpression[tree] gives the expression \
corresponding to the tree tree.TreeExpression[tree, struct"|>, 
 <|"label" -> "TreeExtract", "type" -> "keyword", 
  "info" -> "TreeExtract[tree, pos] extracts the subtree of tree at the \
position specified by pos.TreeExtract[tre"|>, 
 <|"label" -> "TreeForm", "type" -> "keyword", "info" -> "TreeForm[expr] \
displays expr as a tree with different levels at different depths. \
TreeForm[expr, n] "|>, <|"label" -> "TreeGraph", "type" -> "keyword", 
  "info" -> "TreeGraph[{v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {u , u , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] yields a tree \
where u  is the predecessor of v .TreeGraph[{e , e"|>, 
 <|"label" -> "TreeGraphQ", "type" -> "keyword", 
  "info" -> 
   "TreeGraphQ[g] yields True if the graph g is a tree and False otherwise."|>\
, <|"label" -> "TreeInsert", "type" -> "keyword", 
  "info" -> "TreeInsert[tree, child, pos] inserts child at the position \
specified by pos in tree.TreeInsert[tree,"|>, 
 <|"label" -> "TreeLayout", "type" -> "keyword", 
  "info" -> "TreeLayout is an option to Tree and related functions that \
specifies what layout to use."|>, <|"label" -> "TreeLeafQ", 
  "type" -> "keyword", "info" -> "TreeLeafQ[tree] gives True if tree is a \
tree with no children, and gives False otherwise."|>, 
 <|"label" -> "TreeLeaves", "type" -> "keyword", 
  "info" -> 
   "TreeLeaves[tree] returns the list of leaves of the tree tree."|>, 
 <|"label" -> "TreeLevel", "type" -> "keyword", 
  "info" -> "TreeLevel[tree, levelspec] gives a list of all subtrees of tree \
on levels specified by levelspec.Tre"|>, <|"label" -> "TreeMap", 
  "type" -> "keyword", "info" -> "TreeMap[f, tree] applies f to the data in \
each subtree of tree.TreeMap[f, tree, levelspec] applies f"|>, 
 <|"label" -> "TreeMapAt", "type" -> "keyword", 
  "info" -> "TreeMapAt[f, tree, pos] applies f to the data at the position \
specified by pos in tree.TreeMapAt[f, "|>, <|"label" -> "TreeOutline", 
  "type" -> "keyword", "info" -> "TreeOutline[tree] gives an outline of the \
data in tree as a nested OpenerView.TreeOutline[tree, pos]"|>, 
 <|"label" -> "TreePlot", "type" -> "keyword", 
  "info" -> "TreePlot[g] generates a tree plot of the graph g.TreePlot[{e , e \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] generates a \
tree plot of the "|>, <|"label" -> "TreePosition", "type" -> "keyword", 
  "info" -> "TreePosition[tree, pattern] gives a list of the positions of \
subtrees of tree whose data matches pat"|>, <|"label" -> "TreeQ", 
  "type" -> "keyword", "info" -> "TreeQ[tree] yields True if tree is a valid \
Tree object and False otherwise."|>, <|"label" -> "TreeReplacePart", 
  "type" -> "keyword", "info" -> "TreeReplacePart[tree, pos \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] gives a tree \
in which the subtree of tree at the position specified"|>, 
 <|"label" -> "TreeRules", "type" -> "keyword", 
  "info" -> 
   "TreeRules[tree] returns the rules associated with the Tree object tree."|>\
, <|"label" -> "TreeScan", "type" -> "keyword", 
  "info" -> "TreeScan[f, tree] evaluates f applied to the data in each \
subtree of tree in turn.TreeScan[f, tree, "|>, 
 <|"label" -> "TreeSelect", "type" -> "keyword", 
  "info" -> "TreeSelect[tree, crit] picks out all subtrees tree  of tree for \
which crit[tree ] is True.TreeSelect"|>, <|"label" -> "TreeSize", 
  "type" -> "keyword", "info" -> 
   "TreeSize[tree] gives the number of subtrees of tree."|>, 
 <|"label" -> "TreeTraversalOrder", "type" -> "keyword", 
  "info" -> "TreeTraversalOrder is an option for TreeMap and related \
functions that specifies the order to visit "|>, 
 <|"label" -> "TrendStyle", "type" -> "keyword", 
  "info" -> "TrendStyle is an option to CandlestickChart, RenkoChart, and \
other financial charting functions that"|>, <|"label" -> "Triangle", 
  "type" -> "keyword", "info" -> "Triangle[{p , p , p }] represents a filled \
triangle with corner points p , p , and p .Triangle[{{p  "|>, 
 <|"label" -> "TriangleCenter", "type" -> "keyword", 
  "info" -> "TriangleCenter[tri, type] gives the specified type of center for \
the triangle tri.TriangleCenter[tri"|>, <|"label" -> "TriangleConstruct", 
  "type" -> "keyword", "info" -> "TriangleConstruct[tri, type] gives the \
specified type of construct for the triangle tri."|>, 
 <|"label" -> "TriangleMeasurement", "type" -> "keyword", 
  "info" -> "TriangleMeasurement[tri, type] gives the specified type of \
measurement for the triangle tri."|>, <|"label" -> "TriangleWave", 
  "type" -> "keyword", "info" -> "TriangleWave[x] gives a triangle wave that \
varies between -1 and +1 with unit period.TriangleWave[{m"|>, 
 <|"label" -> "TriangularDistribution", "type" -> "keyword", 
  "info" -> "TriangularDistribution[{min, max}] represents a symmetric \
triangular statistical distribution giving"|>, 
 <|"label" -> "TriangulateMesh", "type" -> "keyword", 
  "info" -> 
   "TriangulateMesh[mr] generates a triangulation of the mesh region mr."|>, 
 <|"label" -> "Trig", "type" -> "keyword", "info" -> "Trig is an option for \
various polynomial manipulation functions that specifies whether \
trigonometric"|>, <|"label" -> "TrigExpand", "type" -> "keyword", 
  "info" -> 
   "TrigExpand[expr] expands out trigonometric functions in expr. "|>, 
 <|"label" -> "TrigFactor", "type" -> "keyword", 
  "info" -> "TrigFactor[expr] factors trigonometric functions in expr. "|>, 
 <|"label" -> "TrigFactorList", "type" -> "keyword", 
  "info" -> "TrigFactorList[expr] factors trigonometric functions in expr, \
yielding a list of lists containing tr"|>, <|"label" -> "Trigger", 
  "type" -> "keyword", "info" -> "Trigger[Dynamic[u]] represents a trigger \
that can be pressed to make the dynamically updated value o"|>, 
 <|"label" -> "TrigReduce", "type" -> "keyword", 
  "info" -> "TrigReduce[expr] rewrites products and powers of trigonometric \
functions in expr in terms of trigono"|>, <|"label" -> "TrigToExp", 
  "type" -> "keyword", "info" -> "TrigToExp[expr] converts trigonometric \
functions in expr to exponentials. "|>, <|"label" -> "TrimmedMean", 
  "type" -> "keyword", "info" -> "TrimmedMean[list, f] gives the mean of the \
elements in list after dropping a fraction f of the small"|>, 
 <|"label" -> "TrimmedVariance", "type" -> "keyword", 
  "info" -> "TrimmedVariance[list, f] gives the variance of the elements in \
list after dropping a fraction f of t"|>, <|"label" -> "TropicalStormData", 
  "type" -> "keyword", "info" -> "TropicalStormData[entity, property] gives \
the value of the specified property for the tropical storm"|>, 
 <|"label" -> "True", "type" -> "keyword", 
  "info" -> "True is the symbol for the Boolean value true. "|>, 
 <|"label" -> "TrueQ", "type" -> "keyword", 
  "info" -> 
   "TrueQ[expr] yields True if expr is True, and yields False otherwise. "|>, 
 <|"label" -> "TruncatedDistribution", "type" -> "keyword", 
  "info" -> "TruncatedDistribution[{x   , x   }, dist] represents the \
distribution obtained by truncating the val"|>, 
 <|"label" -> "TruncatedPolyhedron", "type" -> "keyword", 
  "info" -> "TruncatedPolyhedron[poly] gives the truncated polyhedron of poly \
by truncating all vertices. Truncat"|>, 
 <|"label" -> "TsallisQExponentialDistribution", "type" -> "keyword", 
  "info" -> "TsallisQExponentialDistribution[\[CapitalATilde]\216\
\[CapitalAHat]\[RightGuillemet], q] represents a Tsallis q-exponential \
distribution with scale inv"|>, <|"label" -> "TsallisQGaussianDistribution", 
  "type" -> "keyword", "info" -> "TsallisQGaussianDistribution[\
\[CapitalATilde]\216\[CapitalAHat]\274, \[CapitalATilde]\216b2, q] represents \
a Tsallis q-Gaussian distribution with mean \
\[CapitalATilde]\216\[CapitalAHat]\274, scal"|>, 
 <|"label" -> "TTest", "type" -> "keyword", "info" -> "TTest[data] tests \
whether the mean of data is zero. TTest[{data , data }] tests whether the \
means of"|>, <|"label" -> "Tube", "type" -> "keyword", 
  "info" -> "Tube[{{x , y , z }, {x , y , z }, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a 3D \
tube around the line joining a sequence of poi"|>, 
 <|"label" -> "Tuesday", "type" -> "keyword", 
  "info" -> "Tuesday is a day of the week."|>, 
 <|"label" -> "TukeyLambdaDistribution", "type" -> "keyword", 
  "info" -> "TukeyLambdaDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet]] represents Tukey's lambda distribution with shape \
parameter \[CapitalATilde]\216\[CapitalAHat]\[RightGuillemet].TukeyLambda"|>, 
 <|"label" -> "TukeyWindow", "type" -> "keyword", 
  "info" -> "TukeyWindow[x] represents a Tukey window function of \
x.TukeyWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the parameter \
\[CapitalATilde]\216\\[PlusMinus].\n"|>, <|"label" -> "TunnelData", 
  "type" -> "keyword", "info" -> "TunnelData[entity, property] gives the \
value of the specified property for the tunnel entity.TunnelD"|>, 
 <|"label" -> "TuranGraph", "type" -> "keyword", 
  "info" -> "TuranGraph[n, k] gives the k-partite \
Tur\[CapitalATilde]\203\[CapitalAHat]\[DownExclamation]n graph with n \
vertices T    .\n                            "|>, 
 <|"label" -> "TuringMachine", "type" -> "keyword", 
  "info" -> "TuringMachine[rule, init, t] generates a list representing the \
evolution of the Turing machine with "|>, <|"label" -> "TuttePolynomial", 
  "type" -> "keyword", "info" -> "TuttePolynomial[g, {x, y}] gives the Tutte \
polynomial of the graph g.TuttePolynomial[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] "|>, 
 <|"label" -> "TwoWayRule", "type" -> "keyword", 
  "info" -> "x<->y or x \[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]  \
y represents a two-way rule expressing exchange or correspondence of x and \
y."|>, <|"label" -> "Typed", "type" -> "keyword", 
  "info" -> "Typed[expr, type] represents an expression that should be \
assumed to be of a specified type for comp"|>, 
 <|"label" -> "TypeSpecifier", "type" -> "keyword", 
  "info" -> "TypeSpecifier[cons] represents a type specifier that can be \
applied to other types to create a compo"|>, 
 <|"label" -> "UnateQ", "type" -> "keyword", "info" -> "UnateQ[bexpr, {x , x \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] tests whether \
the Boolean expression bexpr is positive unate in the varia"|>, 
 <|"label" -> "Uncompress", "type" -> "keyword", 
  "info" -> "Uncompress[\"string\"] recovers an expression from a compressed \
string representation generated by Com"|>, 
 <|"label" -> "UnconstrainedParameters", "type" -> "keyword", 
  "info" -> "UnconstrainedParameters is an option to functions like \
GeometricScene that specifies what parameters"|>, 
 <|"label" -> "Undefined", "type" -> "keyword", 
  "info" -> 
   "Undefined is a symbol that represents a quantity with no defined value."|>\
, <|"label" -> "UnderBar", "type" -> "keyword", 
  "info" -> "UnderBar[expr] displays with a bar under expr."|>, 
 <|"label" -> "Underflow", "type" -> "keyword", 
  "info" -> "Underflow[] represents a number too small to represent \
explicitly on your computer system."|>, <|"label" -> "Underlined", 
  "type" -> "keyword", "info" -> 
   "Underlined represents an underlined font."|>, 
 <|"label" -> "Underoverscript", "type" -> "keyword", 
  "info" -> "                                                      \
z\nUnderoverscript[x, y, z] is an object that f"|>, 
 <|"label" -> "Underscript", "type" -> "keyword", 
  "info" -> "Underscript[x, y] is an object that formats as x. \n             \
                                  y"|>, <|"label" -> "UnderseaFeatureData", 
  "type" -> "keyword", "info" -> "UnderseaFeatureData[entity, property] gives \
the value of the specified property for the undersea fea"|>, 
 <|"label" -> "UndirectedGraph", "type" -> "keyword", 
  "info" -> "UndirectedGraph[g] gives an undirected graph from the directed \
graph g.UndirectedGraph[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] u"|>, 
 <|"label" -> "UndirectedGraphQ", "type" -> "keyword", 
  "info" -> "UndirectedGraphQ[g] yields True if the graph g is an undirected \
graph and False otherwise."|>, <|"label" -> "UndoTrackedVariables", 
  "type" -> "keyword", "info" -> "UndoTrackedVariables is an option for \
Manipulate, DynamicModule, and related functions that sets var"|>, 
 <|"label" -> "Unequal", "type" -> "keyword", "info" -> "lhs != rhs or lhs \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]  rhs returns False if \
lhs and rhs are identical. "|>, <|"label" -> "UnequalTo", 
  "type" -> "keyword", "info" -> "UnequalTo[y] is an operator form that \
yields x \[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]  y when \
applied to an expression x."|>, <|"label" -> "Unevaluated", 
  "type" -> "keyword", "info" -> "Unevaluated[expr] represents the \
unevaluated form of expr when it appears as the argument to a funct"|>, 
 <|"label" -> "UniformDistribution", "type" -> "keyword", 
  "info" -> "UniformDistribution[{min, max}] represents a continuous uniform \
statistical distribution giving valu"|>, 
 <|"label" -> "UniformGraphDistribution", "type" -> "keyword", 
  "info" -> "UniformGraphDistribution[n, m] represents a uniform graph \
distribution on n-vertex, m-edge graphs."|>, 
 <|"label" -> "UniformPolyhedron", "type" -> "keyword", 
  "info" -> "UniformPolyhedron[\"name\"] gives the uniform polyhedron with \
the given name.UniformPolyhedron[{n, m}]"|>, 
 <|"label" -> "UniformSumDistribution", "type" -> "keyword", 
  "info" -> "UniformSumDistribution[n] represents the distribution of a sum \
of n random variables uniformly distr"|>, <|"label" -> "Uninstall", 
  "type" -> "keyword", "info" -> "Uninstall[link] terminates an external \
program started by Install, and removes Wolfram Language defi"|>, 
 <|"label" -> "Union", "type" -> "keyword", "info" -> "Union[list , list , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] gives a sorted \
list of all the distinct elements that appear in any of the li"|>, 
 <|"label" -> "UnionedEntityClass", "type" -> "keyword", 
  "info" -> "UnionedEntityClass[class , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] represents an \
entity class containing all the distinct entities in all"|>, 
 <|"label" -> "UnionPlus", "type" -> "keyword", 
  "info" -> "UnionPlus[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\216 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\216 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Unique", "type" -> "keyword", "info" -> "Unique[] generates a \
new symbol, whose name is of the form ECnnn. Unique[x] generates a new \
symbol, w"|>, <|"label" -> "UnitaryMatrixQ", "type" -> "keyword", 
  "info" -> "UnitaryMatrixQ[m] gives True if m is a unitary matrix, and False \
otherwise."|>, <|"label" -> "UnitConvert", "type" -> "keyword", 
  "info" -> "UnitConvert[quantity, targetunit] attempts to convert the \
specified quantity to the specified target"|>, 
 <|"label" -> "UnitDimensions", "type" -> "keyword", 
  "info" -> "UnitDimensions[unit] returns a list of base dimensions \
associated with the specified unit.UnitDimens"|>, 
 <|"label" -> "Unitize", "type" -> "keyword", "info" -> "Unitize[x] gives 0 \
when x is zero, and 1 when x has any other numerical value."|>, 
 <|"label" -> "UnitRootTest", "type" -> "keyword", 
  "info" -> "UnitRootTest[data] tests whether data came from an \
autoregressive time series process with unit root"|>, 
 <|"label" -> "UnitSimplify", "type" -> "keyword", 
  "info" -> "UnitSimplify[quantity] attempts to simplify the units of the \
specified quantity."|>, <|"label" -> "UnitStep", "type" -> "keyword", 
  "info" -> "UnitStep[x] represents the unit step function, equal to 0 for x \
< 0 and 1 for x \[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] \
0. UnitStep[x , x "|>, <|"label" -> "UnitTriangle", "type" -> "keyword", 
  "info" -> "UnitTriangle[x] represents the unit triangle function on the \
interval \[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\203 x \
\[CapitalATilde]\257\[CapitalAHat]\230\[CapitalAHat]\204 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] 1 \
.UnitTriangle[x , x "|>, <|"label" -> "UnitVector", "type" -> "keyword", 
  "info" -> "                                                             th  \
                                   "|>, <|"label" -> "UnitVectorLayer", 
  "type" -> "keyword", "info" -> "UnitVectorLayer[n] represents a net layer \
that transforms integers between 1 and n into n-dimensiona"|>, 
 <|"label" -> "UnityDimensions", "type" -> "keyword", 
  "info" -> "UnityDimensions is an option for UnitSimplify that specifies \
which UnitDimensions should be factored"|>, <|"label" -> "UniverseModelData", 
  "type" -> "keyword", "info" -> "UniverseModelData[spec] returns properties \
of the universe based on the default model at specificati"|>, 
 <|"label" -> "UniversityData", "type" -> "keyword", 
  "info" -> "UniversityData[entity, property] gives the value of the \
specified property for the university entity"|>, 
 <|"label" -> "UnixTime", "type" -> "keyword", "info" -> "UnixTime[] gives \
the total number of seconds since the beginning of January 1, 1970, in the \
GMT time"|>, <|"label" -> "Unprotect", "type" -> "keyword", 
  "info" -> "Unprotect[s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] removes the \
attribute Protected for the symbols s . Unprotect[\"form \", \"form \","|>, 
 <|"label" -> "UnregisterExternalEvaluator", "type" -> "keyword", 
  "info" -> "UnregisterExternalEvaluator[sys, target] unregisters the \
external evaluator referenced by target for"|>, 
 <|"label" -> "UnsameQ", "type" -> "keyword", "info" -> "lhs =!= rhs yields \
True if the expression lhs is not identical to rhs, and yields False \
otherwise. "|>, <|"label" -> "UnsavedVariables", "type" -> "keyword", 
  "info" -> "UnsavedVariables is an option for Manipulate, DynamicModule, and \
related functions that specifies lo"|>, <|"label" -> "Unset", 
  "type" -> "keyword", "info" -> 
   "lhs=. removes any rules defined for lhs. "|>, 
 <|"label" -> "UnsetShared", "type" -> "keyword", 
  "info" -> "UnsetShared[s , s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] stops the \
sharing of the variables or functions s  among parallel kernels.Uns"|>, 
 <|"label" -> "UpArrow", "type" -> "keyword", "info" -> "UpArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\221 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\221 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "UpArrowBar", "type" -> "keyword", 
  "info" -> "UpArrowBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Currency]\[CapitalAHat]\222 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Currency]\[CapitalAHat]\222 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "UpArrowDownArrow", "type" -> "keyword", 
  "info" -> "UpArrowDownArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\205 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\207\[CapitalAHat]\205 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Update", "type" -> "keyword", "info" -> "Update[symbol] tells \
the Wolfram Language that hidden changes have been made that could affect \
value"|>, <|"label" -> "UpdateInterval", "type" -> "keyword", 
  "info" -> "UpdateInterval is an option to Refresh and Dynamic that \
specifies at what time interval to do update"|>, 
 <|"label" -> "UpdatePacletSites", "type" -> "keyword", 
  "info" -> "UpdatePacletSites is an option to PacletInstall and \
PacletInstallSubmit that specifies whether to fi"|>, 
 <|"label" -> "UpdateSearchIndex", "type" -> "keyword", 
  "info" -> "UpdateSearchIndex[obj] updates the given search index \
object.UpdateSearchIndex[\"name\"] updates the s"|>, 
 <|"label" -> "UpDownArrow", "type" -> "keyword", 
  "info" -> "UpDownArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\225 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\225 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "UpEquilibrium", "type" -> "keyword", 
  "info" -> "UpEquilibrium[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\
\[RegisteredTrademark] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\[Yen]\[CapitalAHat]\
\[RegisteredTrademark] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "UpperCaseQ", "type" -> "keyword", 
  "info" -> "UpperCaseQ[string] yields True if all the characters in the \
string are uppercase letters, and yields"|>, <|"label" -> "UpperLeftArrow", 
  "type" -> "keyword", "info" -> "UpperLeftArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\226 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\226 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "UpperRightArrow", "type" -> "keyword", 
  "info" -> "UpperRightArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\227 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\227 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Upsample", "type" -> "keyword", "info" -> "Upsample[array, n] \
returns an upsampled version of the array by inserting n - 1 zeros between \
array "|>, <|"label" -> "UpSet", "type" -> "keyword", 
  "info" -> "lhs^=rhs assigns rhs to be the value of lhs, and associates the \
assignment with symbols that occur a"|>, <|"label" -> "UpSetDelayed", 
  "type" -> "keyword", "info" -> "lhs^:=rhs assigns rhs to be the delayed \
value of lhs, and associates the assignment with symbols tha"|>, 
 <|"label" -> "UpTee", "type" -> "keyword", "info" -> "UpTee[x, y] displays \
as x \[CapitalATilde]\[Cent]\[CapitalAHat]\212\[CapitalAHat]\[Yen] y."|>, 
 <|"label" -> "UpTeeArrow", "type" -> "keyword", 
  "info" -> "UpTeeArrow[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[Yen] y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\206\[CapitalAHat]\[Yen] \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "UpTo", "type" -> "keyword", "info" -> "UpTo[n] is a symbolic \
specification that represents up to n objects or positions. If n objects or \
po"|>, <|"label" -> "UpValues", "type" -> "keyword", 
  "info" -> "UpValues[f] gives a list of transformation rules corresponding \
to all upvalues (values for \
g[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, \
f[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]"|>, 
 <|"label" -> "URL", "type" -> "keyword", 
  "info" -> "URL[\"url\"] is a symbolic representation of a URL."|>, 
 <|"label" -> "URLBuild", "type" -> "keyword", "info" -> "URLBuild[\"path\", \
{param  \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
param  \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] builds a URL \
with the specified path and query p"|>, <|"label" -> "URLDecode", 
  "type" -> "keyword", "info" -> 
   "URLDecode[\"string\"] decodes a URL-style percent-encoded string."|>, 
 <|"label" -> "URLDispatcher", "type" -> "keyword", 
  "info" -> "URLDispatcher[{patt  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\237 content , patt  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\237 content , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
dispatcher for deployed URLs tha"|>, <|"label" -> "URLDownload", 
  "type" -> "keyword", "info" -> "URLDownload[url] downloads the content of \
the specified URL to a local temporary file.URLDownload[{u"|>, 
 <|"label" -> "URLDownloadSubmit", "type" -> "keyword", 
  "info" -> "URLDownloadSubmit[url, file] submits the specified URL to be \
downloaded asynchronously to the file g"|>, <|"label" -> "URLEncode", 
  "type" -> "keyword", "info" -> "URLEncode[\"string\"] converts \"string\" \
into a URL-style, percent-encoded ASCII string. "|>, 
 <|"label" -> "URLExecute", "type" -> "keyword", 
  "info" -> "URLExecute[url] executes the specified URL, importing whatever \
result is generated.URLExecute[url, {"|>, <|"label" -> "URLExpand", 
  "type" -> "keyword", "info" -> 
   "URLExpand[\"url\"] expands a shortened \"url\"."|>, 
 <|"label" -> "URLFetch", "type" -> "keyword", "info" -> "URLFetch[url] \
returns the contents of a URL as a string.URLFetch[url, elements] returns the \
specifie"|>, <|"label" -> "URLFetchAsynchronous", "type" -> "keyword", 
  "info" -> "URLFetchAsynchronous[url, func] performs a connection in the \
background, calling func when an event "|>, <|"label" -> "URLParse", 
  "type" -> "keyword", "info" -> "URLParse[\"url\"] takes a well-formed URL \
and gives an association whose values correspond to the comp"|>, 
 <|"label" -> "URLQueryDecode", "type" -> "keyword", 
  "info" -> "URLQueryDecode[\"string\"] decodes a URL-style query string into \
a list of key-value rules. "|>, <|"label" -> "URLQueryEncode", 
  "type" -> "keyword", "info" -> "URLQueryEncode[\[CapitalATilde]\257\
\[CapitalAHat]\204\[CapitalAHat]\223 key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224] creates a URL-style \
query string from an association"|>, <|"label" -> "URLRead", 
  "type" -> "keyword", "info" -> "URLRead[url] sends a request to a URL and \
reads back the response, returning it as a response object"|>, 
 <|"label" -> "URLResponseTime", "type" -> "keyword", 
  "info" -> "URLResponseTime[url] gives the total number of seconds to \
request one byte from the specified URL.UR"|>, 
 <|"label" -> "URLSave", "type" -> "keyword", "info" -> "URLSave[\"url\"] \
saves the content of the URL to a file in \
ECTemporaryDirectory.URLSave[\"url\", \"file\"] "|>, 
 <|"label" -> "URLSaveAsynchronous", "type" -> "keyword", 
  "info" -> "URLSaveAsynchronous[\"url\", \"file\", func] performs a download \
to \"file\" in the background, calling fu"|>, 
 <|"label" -> "URLShorten", "type" -> "keyword", 
  "info" -> "URLShorten[\"url\"] creates a shortened URL that redirects to \
\"url\".URLShorten[CloudObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246]] creates"|>, <|"label" -> "URLSubmit", 
  "type" -> "keyword", "info" -> "URLSubmit[url] submits the specified URL to \
be executed asynchronously.URLSubmit[url, {param  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val "|>, 
 <|"label" -> "UseEmbeddedLibrary", "type" -> "keyword", 
  "info" -> "UseEmbeddedLibrary is an option of FunctionCompile that embeds a \
shared library in a CompiledCodeFun"|>, <|"label" -> "Using", 
  "type" -> "keyword", "info" -> "Using is an option to Roots that specifies \
any subsidiary equations that are to be used."|>, 
 <|"label" -> "UtilityFunction", "type" -> "keyword", 
  "info" -> "UtilityFunction is an option for Predict, Classify, and related \
functions that specifies the utility"|>, <|"label" -> "V2Get", 
  "type" -> "keyword", "info" -> 
   "V2Get[name] reads in a file written by the V2.x versions."|>, 
 <|"label" -> "ValenceFilling", "type" -> "keyword", 
  "info" -> "ValenceFilling is an option for Molecule that specifies whether \
to fill open valences with hydrogen "|>, <|"label" -> "ValidationLength", 
  "type" -> "keyword", "info" -> "ValidationLength is an option to \
FindSequenceFunction and related functions that specifies the numbe"|>, 
 <|"label" -> "ValidationSet", "type" -> "keyword", 
  "info" -> "ValidationSet is an option for Predict, Classify, NetTrain, and \
related functions that specifies the"|>, <|"label" -> "ValueDimensions", 
  "type" -> "keyword", "info" -> "ValueDimensions is an option to \
TemporalData, TimeSeries, and EventSeries that specifies the dimensi"|>, 
 <|"label" -> "ValueForm", "type" -> "keyword", 
  "info" -> "ValueForm is an internal symbol."|>, 
 <|"label" -> "ValuePreprocessingFunction", "type" -> "keyword", 
  "info" -> "ValuePreprocessingFunction is an option for functions such as \
PersistentSymbol and InitializationVal"|>, <|"label" -> "ValueQ", 
  "type" -> "keyword", "info" -> "ValueQ[expr] gives True if a value has been \
defined for expr, and gives False otherwise. "|>, 
 <|"label" -> "Values", "type" -> "keyword", 
  "info" -> "Values[\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\223 \
key  \[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , key  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 \
\[CapitalATilde]\257\[CapitalAHat]\204\[CapitalAHat]\224] gives a list of the \
values val  in an association.Values[{ke"|>, <|"label" -> "Variables", 
  "type" -> "keyword", "info" -> "Variables[poly] gives a list of all \
independent variables in a polynomial. "|>, <|"label" -> "Variance", 
  "type" -> "keyword", "info" -> "Variance[list] gives the sample variance of \
the elements in list. Variance[dist] gives the variance "|>, 
 <|"label" -> "VarianceEquivalenceTest", "type" -> "keyword", 
  "info" -> "VarianceEquivalenceTest[{data , data , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] tests whether \
the variances of the data  are equal. Varia"|>, 
 <|"label" -> "VarianceEstimatorFunction", "type" -> "keyword", 
  "info" -> "VarianceEstimatorFunction is an option for LinearModelFit and \
NonlinearModelFit which specifies the "|>, 
 <|"label" -> "VarianceGammaDistribution", "type" -> "keyword", 
  "info" -> "VarianceGammaDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\[RightGuillemet], \[CapitalATilde]\216\\[PlusMinus], \[CapitalATilde]\216b2, \
\[CapitalATilde]\216\[CapitalAHat]\274] represents a \
variance\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220gamma \
distribution with location paramet"|>, <|"label" -> "VariogramFunction", 
  "type" -> "keyword", "info" -> "VariogramFunction is an option to \
SpatialEstimate that specifies the local variation model to use. "|>, 
 <|"label" -> "VariogramModel", "type" -> "keyword", 
  "info" -> "VariogramModel[\"model\", {params}] represents the function for \
the variogram model specified by \"mode"|>, <|"label" -> "VectorAngle", 
  "type" -> "keyword", "info" -> 
   "VectorAngle[u, v] gives the angle between the vectors u and v."|>, 
 <|"label" -> "VectorAround", "type" -> "keyword", 
  "info" -> "VectorAround[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
{\[CapitalATilde]\216b4 , \[CapitalATilde]\216b4 , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents a \
vector of uncorrelated approximate numbers or qu"|>, 
 <|"label" -> "VectorAspectRatio", "type" -> "keyword", 
  "info" -> "VectorAspectRatio is an option setting for VectorPlot and \
related functions that determines the rela"|>, 
 <|"label" -> "VectorColorFunction", "type" -> "keyword", 
  "info" -> "VectorColorFunction is an option for VectorPlot and related \
functions that specifies a function to a"|>, 
 <|"label" -> "VectorColorFunctionScaling", "type" -> "keyword", 
  "info" -> "VectorColorFunctionScaling is an option for graphics functions \
which specifies whether arguments sup"|>, <|"label" -> "VectorDensityPlot", 
  "type" -> "keyword", "info" -> "VectorDensityPlot[{{v , v }, s}, {x, x   , \
x   }, {y, y   , y   }] generates a vector plot of the ve"|>, 
 <|"label" -> "VectorDisplacementPlot", "type" -> "keyword", 
  "info" -> "VectorDisplacementPlot[{v , v }, {x, x   , x   }, {y, y   , y   \
}] generates a displacement plot for"|>, 
 <|"label" -> "VectorDisplacementPlot3D", "type" -> "keyword", 
  "info" -> "VectorDisplacementPlot3D[{v , v , v }, {x, x   , x   }, {y, y   \
, y   }, {z, z   , z   }] generates "|>, <|"label" -> "VectorGreater", 
  "type" -> "keyword", "info" -> "x \[CapitalATilde]\257\[CapitalAHat]\220b4 \
y or VectorGreater[{x, y}] yields True for vectors of length n if x  > y  for \
all components 1 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency]"|>, 
 <|"label" -> "VectorGreaterEqual", "type" -> "keyword", 
  "info" -> "x \[CapitalATilde]\257\[CapitalAHat]\220\\[Micro] y or \
VectorGreaterEqual[{x, y}] yields True for vectors of length n if x  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Yen] y  for all \
component"|>, <|"label" -> "VectorLess", "type" -> "keyword", 
  "info" -> "x \[CapitalATilde]\257\[CapitalAHat]\220\\[Paragraph] y or \
VectorLess[{x, y}] yields True for vectors of length n if x  < y  for all \
components 1 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] i "|>, 
 <|"label" -> "VectorLessEqual", "type" -> "keyword", 
  "info" -> "x \[CapitalATilde]\257\[CapitalAHat]\220\\[CenterDot] y or \
VectorLessEqual[{x, y}] yields True for vectors of length n if x  \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\[Currency] y  for all \
components 1"|>, <|"label" -> "VectorMarkers", "type" -> "keyword", 
  "info" -> "VectorMarkers is an option for graphics functions like \
VectorPlot, ListVectorPlot and related functi"|>, 
 <|"label" -> "VectorPlot", "type" -> "keyword", 
  "info" -> "VectorPlot[{v , v }, {x, x   , x   }, {y, y   , y   }] generates \
a vector plot of the vector field {"|>, <|"label" -> "VectorPlot3D", 
  "type" -> "keyword", "info" -> "VectorPlot3D[{v , v , v }, {x, x   , x   }, \
{y, y   , y   }, {z, z   , z   }] generates a 3D vector "|>, 
 <|"label" -> "VectorPoints", "type" -> "keyword", 
  "info" -> "VectorPoints is an option to VectorPlot, ListVectorPlot, and \
related functions that determines where"|>, <|"label" -> "VectorQ", 
  "type" -> "keyword", "info" -> "VectorQ[expr] gives True if expr is a list \
or a \
one\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220dimensional \
SparseArray object, none of whose el"|>, <|"label" -> "VectorRange", 
  "type" -> "keyword", "info" -> "VectorRange is an option for VectorPlot and \
related functions that specifies the range of vector mag"|>, 
 <|"label" -> "Vectors", "type" -> "keyword", "info" -> "Vectors[d] \
represents the domain of vectors of dimension d.Vectors[d, dom] represents \
the domain of "|>, <|"label" -> "VectorScale", "type" -> "keyword", 
  "info" -> "VectorScale is an option to VectorPlot, ListVectorPlot, and \
related functions that determines the le"|>, <|"label" -> "VectorScaling", 
  "type" -> "keyword", "info" -> "VectorScaling is an option for VectorPlot \
and related functions that determines how the magnitudes o"|>, 
 <|"label" -> "VectorSizes", "type" -> "keyword", 
  "info" -> "VectorSizes is an option for VectorPlot and related functions \
that specifies the range of sizes used"|>, <|"label" -> "VectorStyle", 
  "type" -> "keyword", "info" -> "VectorStyle is an option to VectorPlot, \
ListVectorPlot, and related functions that determines the st"|>, 
 <|"label" -> "Vee", "type" -> "keyword", "info" -> "Vee[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\201 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\201 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Verbatim", "type" -> "keyword", "info" -> "Verbatim[expr] \
represents expr in pattern matching, requiring that expr be matched exactly \
as it app"|>, <|"label" -> "VerificationTest", "type" -> "keyword", 
  "info" -> "VerificationTest[input] runs a verification test to determine \
whether input evaluates to True, witho"|>, <|"label" -> "VerifyConvergence", 
  "type" -> "keyword", "info" -> "VerifyConvergence is an option to Sum, \
NSum, and similar functions that specifies whether convergenc"|>, 
 <|"label" -> "VerifyDerivedKey", "type" -> "keyword", 
  "info" -> "VerifyDerivedKey[key, password] verifies that password matches \
the password used to generate the der"|>, 
 <|"label" -> "VerifyDigitalSignature", "type" -> "keyword", 
  "info" -> "VerifyDigitalSignature[{expr, sig}, key] verifies the digital \
signature sig for expr using the speci"|>, 
 <|"label" -> "VerifyFileSignature", "type" -> "keyword", 
  "info" -> "VerifyFileSignature[{\"file\", sig}, key] verifies the digital \
signature sig for file using the specif"|>, 
 <|"label" -> "VerifyInterpretation", "type" -> "keyword", 
  "info" -> "VerifyInterpretation is an option for TextCases, TextPosition \
and TextContents that verifies that re"|>, 
 <|"label" -> "VerifySecurityCertificates", "type" -> "keyword", 
  "info" -> "VerifySecurityCertificates is an option for URLRead and related \
functions that specifies whether to "|>, <|"label" -> "VerifySolutions", 
  "type" -> "keyword", "info" -> "VerifySolutions is an option to Solve and \
related functions that controls whether to verify solution"|>, 
 <|"label" -> "VerifyTestAssumptions", "type" -> "keyword", 
  "info" -> "VerifyTestAssumptions is an option to LocationTest and similar \
functions that controls which assumpt"|>, <|"label" -> "VertexAdd", 
  "type" -> "keyword", "info" -> "VertexAdd[g, v] makes a graph by adding the \
vertex v to the graph g.VertexAdd[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] adds a"|>, 
 <|"label" -> "VertexCapacity", "type" -> "keyword", 
  "info" -> "VertexCapacity is an option and annotation for Graph and related \
functions that specifies a vertex c"|>, <|"label" -> "VertexChromaticNumber", 
  "type" -> "keyword", "info" -> "VertexChromaticNumber[g] gives the \
chromatic number for the vertices of the graph g."|>, 
 <|"label" -> "VertexColors", "type" -> "keyword", 
  "info" -> "VertexColors is an option for graphics primitives which \
specifies the colors to assign to vertices."|>, 
 <|"label" -> "VertexComponent", "type" -> "keyword", 
  "info" -> "VertexComponent[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
vertices in the graph g that have a path to at least one o"|>, 
 <|"label" -> "VertexConnectivity", "type" -> "keyword", 
  "info" -> "VertexConnectivity[g] gives the vertex connectivity of the graph \
g.VertexConnectivity[g, s, t] gives"|>, <|"label" -> "VertexContract", 
  "type" -> "keyword", "info" -> "VertexContract[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] contracts a \
collection of vertices v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 into a single \
vertex of "|>, <|"label" -> "VertexCoordinateRules", "type" -> "keyword", 
  "info" -> "VertexCoordinateRules is an option for GraphPlot and related \
functions which specifies rules for det"|>, <|"label" -> "VertexCoordinates", 
  "type" -> "keyword", "info" -> "VertexCoordinates is an option to Graph and \
related functions that specifies the coordinates to use "|>, 
 <|"label" -> "VertexCorrelationSimilarity", "type" -> "keyword", 
  "info" -> "VertexCorrelationSimilarity[g, u, v] gives the correlation \
similarity between vertices u and v of th"|>, 
 <|"label" -> "VertexCosineSimilarity", "type" -> "keyword", 
  "info" -> "VertexCosineSimilarity[g, u, v] gives the cosine similarity \
between vertices u and v of the graph g."|>, <|"label" -> "VertexCount", 
  "type" -> "keyword", "info" -> "VertexCount[g] gives a count of the number \
of vertices in the graph g.VertexCount[g, patt] gives a c"|>, 
 <|"label" -> "VertexCoverQ", "type" -> "keyword", 
  "info" -> "VertexCoverQ[g, vlist] yields True if the vertex list vlist is a \
vertex cover of the graph g, and Fa"|>, <|"label" -> "VertexDataCoordinates", 
  "type" -> "keyword", "info" -> "VertexDataCoordinates is an option to \
Raster3D that determines how to map data to the displayed rang"|>, 
 <|"label" -> "VertexDegree", "type" -> "keyword", 
  "info" -> "VertexDegree[g] gives the list of vertex degrees for all \
vertices in the graph g.VertexDegree[g, v] "|>, 
 <|"label" -> "VertexDelete", "type" -> "keyword", 
  "info" -> "VertexDelete[g, v] makes a graph by deleting the vertex \
\[CapitalATilde]\216\[CapitalAHat]\275 and all edges connected to v from the \
grap"|>, <|"label" -> "VertexDiceSimilarity", "type" -> "keyword", 
  "info" -> "VertexDiceSimilarity[g, u, v] gives the Dice similarity between \
vertices u and v of the graph g.Vert"|>, <|"label" -> "VertexEccentricity", 
  "type" -> "keyword", "info" -> "VertexEccentricity[g, s] gives the length \
of the longest shortest path from the source s to every ot"|>, 
 <|"label" -> "VertexInComponent", "type" -> "keyword", 
  "info" -> "VertexInComponent[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
vertices in the graph g that have a directed path to at "|>, 
 <|"label" -> "VertexInComponentGraph", "type" -> "keyword", 
  "info" -> "VertexInComponentGraph[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
subgraph of the graph g generated by the vertices t"|>, 
 <|"label" -> "VertexInDegree", "type" -> "keyword", 
  "info" -> "VertexInDegree[g] gives the list of vertex in-degrees for all \
vertices in the graph g.VertexInDegree"|>, <|"label" -> "VertexIndex", 
  "type" -> "keyword", "info" -> "VertexIndex[g, v] gives the integer index \
for the vertex v in the graph g.VertexIndex[{v \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246]"|>, 
 <|"label" -> "VertexJaccardSimilarity", "type" -> "keyword", 
  "info" -> "VertexJaccardSimilarity[g, u, v] gives the Jaccard similarity \
between vertices u and v of the graph "|>, <|"label" -> "VertexLabeling", 
  "type" -> "keyword", "info" -> "VertexLabeling is an option for GraphPlot \
and related functions which specifies whether labeling sho"|>, 
 <|"label" -> "VertexLabels", "type" -> "keyword", 
  "info" -> "VertexLabels is an option and annotation for Graph and related \
functions that specifies what labels "|>, <|"label" -> "VertexLabelStyle", 
  "type" -> "keyword", "info" -> "VertexLabelStyle is an option and property \
for Graph and related functions that specifies the style "|>, 
 <|"label" -> "VertexList", "type" -> "keyword", 
  "info" -> "VertexList[g] gives the list of vertices for the graph \
g.VertexList[g, patt] gives a list of vertice"|>, 
 <|"label" -> "VertexNormals", "type" -> "keyword", 
  "info" -> "VertexNormals is an option for graphics primitives which \
specifies the normal directions to assign t"|>, 
 <|"label" -> "VertexOutComponent", "type" -> "keyword", 
  "info" -> "VertexOutComponent[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
vertices in the graph g that have a directed path from "|>, 
 <|"label" -> "VertexOutComponentGraph", "type" -> "keyword", 
  "info" -> "VertexOutComponentGraph[g, {v , v , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] gives the \
subgraph of the graph g generated by the vertices "|>, 
 <|"label" -> "VertexOutDegree", "type" -> "keyword", 
  "info" -> "VertexOutDegree[g] gives the list of vertex out-degrees for all \
vertices in the graph g.VertexOutDeg"|>, <|"label" -> "VertexQ", 
  "type" -> "keyword", "info" -> "VertexQ[g, v] yields True if v is a vertex \
in the graph g and False otherwise."|>, 
 <|"label" -> "VertexRenderingFunction", "type" -> "keyword", 
  "info" -> "VertexRenderingFunction is an option for GraphPlot and related \
functions that gives a function to ge"|>, <|"label" -> "VertexReplace", 
  "type" -> "keyword", "info" -> "VertexReplace[g, {v  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w , v  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] w , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] replaces each \
vertex v  in the graph g by w .VertexReplace[{"|>, 
 <|"label" -> "VertexShape", "type" -> "keyword", 
  "info" -> "VertexShape is an option and property for Graph and related \
functions that specifies the graphics us"|>, 
 <|"label" -> "VertexShapeFunction", "type" -> "keyword", 
  "info" -> "VertexShapeFunction is an option and annotation for Graph and \
related functions that specifies a fun"|>, <|"label" -> "VertexSize", 
  "type" -> "keyword", "info" -> "VertexSize is an option and property for \
Graph and related functions that specifies the size used fo"|>, 
 <|"label" -> "VertexStyle", "type" -> "keyword", 
  "info" -> "VertexStyle is an option and annotation for Graph and related \
functions that specifies what style to"|>, 
 <|"label" -> "VertexTextureCoordinates", "type" -> "keyword", 
  "info" -> "VertexTextureCoordinates is an option for graphics primitives \
that specifies the texture coordinates"|>, 
 <|"label" -> "VertexTransitiveGraphQ", "type" -> "keyword", 
  "info" -> "VertexTransitiveGraphQ[g] yields True if the graph g is a \
vertex\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223transitive \
graph and False otherwis"|>, <|"label" -> "VertexWeight", 
  "type" -> "keyword", "info" -> "VertexWeight is an option and annotation \
for Graph and related functions that specifies a vertex wei"|>, 
 <|"label" -> "VertexWeightedGraphQ", "type" -> "keyword", 
  "info" -> "VertexWeightedGraphQ[g] yields True if the graph g is a \
vertex-weighted graph, and False otherwise."|>, 
 <|"label" -> "VerticalBar", "type" -> "keyword", 
  "info" -> "VerticalBar[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\220 y \
\[CapitalATilde]\257\[CapitalAHat]\217\[CapitalAHat]\220 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "VerticalGauge", "type" -> "keyword", 
  "info" -> "VerticalGauge[value] draws a linear gauge showing value in a \
range of 0 to 1.VerticalGauge[value, {m"|>, <|"label" -> "VerticalSeparator", 
  "type" -> "keyword", "info" -> "VerticalSeparator[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\257\[CapitalAHat]\220b2 y \
\[CapitalATilde]\257\[CapitalAHat]\220b2 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "VerticalSlider", "type" -> "keyword", 
  "info" -> "VerticalSlider[y] represents a vertical slider at position y \
with range 0 to 1. VerticalSlider[Dynam"|>, <|"label" -> "VerticalTilde", 
  "type" -> "keyword", "info" -> "VerticalTilde[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\200 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\211\[CapitalAHat]\200 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Video", "type" -> "keyword", "info" -> "Video[file] represents \
video stored in the given file.Video[url] represents video stored in the \
give"|>, <|"label" -> "VideoCombine", "type" -> "keyword", 
  "info" -> "VideoCombine[{obj , obj , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] creates a \
multi-track video by combining all tracks of Video or Audio "|>, 
 <|"label" -> "VideoDelete", "type" -> "keyword", 
  "info" -> "VideoDelete[video, t] deletes the first t seconds of \
video.VideoDelete[video, -t] deletes the last t"|>, 
 <|"label" -> "VideoEncoding", "type" -> "keyword", 
  "info" -> "VideoEncoding is an option for Export and other functions that \
specifies the video encoding to use w"|>, <|"label" -> "VideoExtractFrames", 
  "type" -> "keyword", "info" -> "VideoExtractFrames[video, t] extracts a \
frame at time t from video.VideoExtractFrames[video, tspec] "|>, 
 <|"label" -> "VideoFrameList", "type" -> "keyword", 
  "info" -> "VideoFrameList[video, n] gives a list of n images extracted from \
video.VideoFrameList[video, spec] g"|>, <|"label" -> "VideoFrameMap", 
  "type" -> "keyword", "info" -> "VideoFrameMap[f, video] applies f to each \
frame of the Video object video, returning a new Video obj"|>, 
 <|"label" -> "VideoGenerator", "type" -> "keyword", 
  "info" -> "VideoGenerator[model] generates one second of video of a given \
model.VideoGenerator[model, dur] gene"|>, <|"label" -> "VideoInsert", 
  "type" -> "keyword", "info" -> "VideoInsert[video, t \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] inserts the \
video new at time t.VideoInsert[video, {t , t , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246} \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] in"|>, 
 <|"label" -> "VideoIntervals", "type" -> "keyword", 
  "info" -> "VideoIntervals[video, crit] returns time intervals of video for \
which the criterion crit is satisfie"|>, <|"label" -> "VideoJoin", 
  "type" -> "keyword", "info" -> "VideoJoin[video , video , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] concatenates all \
video  and returns a video object.\n               1   "|>, 
 <|"label" -> "VideoMap", "type" -> "keyword", "info" -> "VideoMap[f, video] \
applies f to partial video and audio data corresponding to one frame of \
video, re"|>, <|"label" -> "VideoMapList", "type" -> "keyword", 
  "info" -> "VideoMapList[f, video] applies f to a chunk of data \
corresponding to one frame from the Video object"|>, 
 <|"label" -> "VideoMapTimeSeries", "type" -> "keyword", 
  "info" -> "VideoMapTimeSeries[f, video] applies f to each frame of the \
Video object video, returning a time ser"|>, <|"label" -> "VideoPause", 
  "type" -> "keyword", "info" -> "VideoPause[] pauses the playback of all \
VideoStream objects.VideoPause[vstream] pauses the playback "|>, 
 <|"label" -> "VideoPlay", "type" -> "keyword", 
  "info" -> "VideoPlay[video] returns a new VideoStream object from video and \
starts the playback.VideoPlay[vstre"|>, <|"label" -> "VideoQ", 
  "type" -> "keyword", "info" -> "VideoQ[video] yields True if video has the \
form of a valid Video object, and False otherwise."|>, 
 <|"label" -> "VideoRecord", "type" -> "keyword", 
  "info" -> "VideoRecord[source] creates a VideoStream object and records \
from source.VideoRecord[vstream] starts"|>, <|"label" -> "VideoReplace", 
  "type" -> "keyword", "info" -> "VideoReplace[video, {t , t } \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] new] replaces the \
video between t  and t  with the new video new.Vide"|>, 
 <|"label" -> "VideoSplit", "type" -> "keyword", 
  "info" -> "VideoSplit[video, t] splits video at time t.VideoSplit[video, {t \
, t , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] splits \
video at times t ."|>, <|"label" -> "VideoStop", "type" -> "keyword", 
  "info" -> "VideoStop[] stops the playback of all VideoStream \
objects.VideoStop[vstream] stops the playback of t"|>, 
 <|"label" -> "VideoStream", "type" -> "keyword", 
  "info" -> "VideoStream[source] creates a new VideoStream object from \
source.VideoStream[id] is an object that r"|>, 
 <|"label" -> "VideoStreams", "type" -> "keyword", 
  "info" -> "VideoStreams[] returns all existing video streams."|>, 
 <|"label" -> "VideoTimeStretch", "type" -> "keyword", 
  "info" -> "VideoTimeStretch[video, spec] applies time stretching to video \
using the specified spec."|>, <|"label" -> "VideoTrackSelection", 
  "type" -> "keyword", "info" -> "VideoTrackSelection is an option that \
specifies the video tracks of interest."|>, <|"label" -> "VideoTranscode", 
  "type" -> "keyword", "info" -> "VideoTranscode[video, \"format\"] converts \
video to the specified format.VideoTranscode[video, service"|>, 
 <|"label" -> "VideoTrim", "type" -> "keyword", 
  "info" -> "VideoTrim[video, t] returns the first t seconds of \
video.VideoTrim[video, -t] returns the last t sec"|>, 
 <|"label" -> "ViewAngle", "type" -> "keyword", 
  "info" -> "ViewAngle is an option for Graphics3D and related functions that \
gives the opening angle for a simul"|>, <|"label" -> "ViewCenter", 
  "type" -> "keyword", "info" -> "ViewCenter is an option for Graphics3D and \
related functions which gives the scaled coordinates of t"|>, 
 <|"label" -> "ViewMatrix", "type" -> "keyword", 
  "info" -> "ViewMatrix is an option for Graphics3D and related functions \
that can be used to specify a pair of e"|>, <|"label" -> "ViewPoint", 
  "type" -> "keyword", "info" -> "ViewPoint is an option for Graphics3D and \
related functions which gives the point in space from whic"|>, 
 <|"label" -> "ViewProjection", "type" -> "keyword", 
  "info" -> "ViewProjection is an option for three-dimensional graphics that \
specifies the projection to use for "|>, <|"label" -> "ViewRange", 
  "type" -> "keyword", "info" -> "ViewRange is an option for Graphics3D and \
related functions which specifies the range of distances f"|>, 
 <|"label" -> "ViewVector", "type" -> "keyword", 
  "info" -> "ViewVector is an option for Graphics3D and related functions \
which specifies the position and direct"|>, <|"label" -> "ViewVertical", 
  "type" -> "keyword", "info" -> "ViewVertical is an option for Graphics3D \
and related functions which specifies what direction in sca"|>, 
 <|"label" -> "VoiceStyleData", "type" -> "keyword", 
  "info" -> "VoiceStyleData[] gives the list of available voices for speech \
synthesis.VoiceStyleData[voice] retur"|>, <|"label" -> "VoigtDistribution", 
  "type" -> "keyword", "info" -> "VoigtDistribution[\[CapitalATilde]\216b4, \
\[CapitalATilde]\217\[CapitalAHat]\203] represents Voigt distribution with \
parameters \[CapitalATilde]\216b4 and \
\[CapitalATilde]\217\[CapitalAHat]\203."|>, <|"label" -> "VolcanoData", 
  "type" -> "keyword", "info" -> "VolcanoData[entity, property] gives the \
value of the specified property for the volcano entity.Volca"|>, 
 <|"label" -> "Volume", "type" -> "keyword", "info" -> "Volume[reg] gives the \
volume of the three-dimensional region reg.Volume[{x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, x }, {s, s   , s \
  }"|>, <|"label" -> "VonMisesDistribution", "type" -> "keyword", 
  "info" -> "VonMisesDistribution[\[CapitalATilde]\216\[CapitalAHat]\274, \
\[CapitalATilde]\216\[CapitalAHat]\272] represents a von Mises distribution \
with mean \[CapitalATilde]\216\[CapitalAHat]\274 and concentration \
\[CapitalATilde]\216\[CapitalAHat]\272."|>, <|"label" -> "VoronoiMesh", 
  "type" -> "keyword", "info" -> "VoronoiMesh[{p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] gives a \
MeshRegion representing the Voronoi mesh from the points p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "WaitAll", "type" -> "keyword", "info" -> "WaitAll[expr] waits \
for all concurrent evaluations represented by EvaluationObject expressions in \
ex"|>, <|"label" -> "WaitAsynchronousTask", "type" -> "keyword", 
  "info" -> "WaitAsynchronousTask[task] waits for task to complete."|>, 
 <|"label" -> "WaitNext", "type" -> "keyword", "info" -> "WaitNext[{eid , eid \
, \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] waits until \
the first evaluation represented by any of the eid  finishes, "|>, 
 <|"label" -> "WakebyDistribution", "type" -> "keyword", 
  "info" -> "WakebyDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2, \[CapitalATilde]\216b3, \[CapitalATilde]\216b4, \
\[CapitalATilde]\216\[CapitalAHat]\274] represents Wakeby distribution with \
shape parameters \[CapitalATilde]\216b2 and \[CapitalATilde]\216b4, scal"|>, 
 <|"label" -> "WalleniusHypergeometricDistribution", "type" -> "keyword", 
  "info" -> "WalleniusHypergeometricDistribution[n, n    , n   , w] \
represents a Wallenius noncentral hypergeomet"|>, 
 <|"label" -> "WaringYuleDistribution", "type" -> "keyword", 
  "info" -> "WaringYuleDistribution[\[CapitalATilde]\216\\[PlusMinus]] \
represents the Yule distribution with shape parameter \
\[CapitalATilde]\216\\[PlusMinus].WaringYuleDistribu"|>, 
 <|"label" -> "WarpingCorrespondence", "type" -> "keyword", 
  "info" -> "WarpingCorrespondence[s , s ] gives the time warping (DTW) \
similarity path between sequences s  and "|>, <|"label" -> "WarpingDistance", 
  "type" -> "keyword", "info" -> "WarpingDistance[s , s ] gives the dynamic \
time warping (DTW) distance between sequences s  and s .Wa"|>, 
 <|"label" -> "WatershedComponents", "type" -> "keyword", 
  "info" -> "WatershedComponents[image] computes the watershed transform of \
image, returning the result as an arr"|>, <|"label" -> "WatsonUSquareTest", 
  "type" -> "keyword", "info" -> "                                            \
                                         2              "|>, 
 <|"label" -> "WattsStrogatzGraphDistribution", "type" -> "keyword", 
  "info" -> "WattsStrogatzGraphDistribution[n, p] represents the \
Watts\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\223Strogatz \
graph distribution for n-vertex g"|>, <|"label" -> "WaveletBestBasis", 
  "type" -> "keyword", "info" -> "WaveletBestBasis[dwd] computes a best basis \
representation in the DiscreteWaveletData object dwd.Wav"|>, 
 <|"label" -> "WaveletFilterCoefficients", "type" -> "keyword", 
  "info" -> "WaveletFilterCoefficients[wave, filt] gives the filter \
coefficients for the symbolic wavelet wave of"|>, 
 <|"label" -> "WaveletImagePlot", "type" -> "keyword", 
  "info" -> "WaveletImagePlot[dwd] plots the basis tree of wavelet image \
coefficients in the DiscreteWaveletData "|>, <|"label" -> "WaveletListPlot", 
  "type" -> "keyword", "info" -> "WaveletListPlot[dwd] plots wavelet \
transform coefficients in the DiscreteWaveletData dwd.WaveletList"|>, 
 <|"label" -> "WaveletMapIndexed", "type" -> "keyword", 
  "info" -> "WaveletMapIndexed[f, wd] applies the function f to the arrays of \
coefficients and indices of a Conti"|>, <|"label" -> "WaveletMatrixPlot", 
  "type" -> "keyword", "info" -> "WaveletMatrixPlot[dwd] plots the basis tree \
of wavelet matrix coefficients in the DiscreteWaveletDat"|>, 
 <|"label" -> "WaveletPhi", "type" -> "keyword", 
  "info" -> "WaveletPhi[wave, x] gives the scaling function \
\[CapitalATilde]\217\[CapitalAHat]\225(x) for the symbolic wavelet wave \
evaluated at x.Wav"|>, <|"label" -> "WaveletPsi", "type" -> "keyword", 
  "info" -> "WaveletPsi[wave, x] gives the wavelet function \
\[CapitalATilde]\217\[CapitalAHat]\210(x) for the symbolic wavelet wave \
evaluated at x.Wav"|>, <|"label" -> "WaveletScale", "type" -> "keyword", 
  "info" -> "WaveletScale is an option for ContinuousWaveletTransform and \
related constructs used to specify the "|>, <|"label" -> "WaveletScalogram", 
  "type" -> "keyword", "info" -> "WaveletScalogram[wd] plots wavelet vector \
coefficients in a DiscreteWaveletData or ContinuousWavelet"|>, 
 <|"label" -> "WaveletThreshold", "type" -> "keyword", 
  "info" -> "WaveletThreshold[dwd] thresholds the detail wavelet coefficients \
in the DiscreteWaveletData object d"|>, <|"label" -> "WavePDEComponent", 
  "type" -> "keyword", "info" -> "                                            \
                    2\n                                  "|>, 
 <|"label" -> "WeaklyConnectedComponents", "type" -> "keyword", 
  "info" -> "WeaklyConnectedComponents[g] gives the weakly connected \
components of the graph g.WeaklyConnectedCom"|>, 
 <|"label" -> "WeaklyConnectedGraphComponents", "type" -> "keyword", 
  "info" -> "WeaklyConnectedGraphComponents[g] gives the weakly connected \
components of the graph g.WeaklyConnect"|>, 
 <|"label" -> "WeaklyConnectedGraphQ", "type" -> "keyword", 
  "info" -> "WeaklyConnectedGraphQ[g] yields True if the graph g is weakly \
connected, and False otherwise."|>, <|"label" -> "WeakStationarity", 
  "type" -> "keyword", "info" -> "WeakStationarity[proc] gives conditions for \
the process proc to be weakly stationary. "|>, 
 <|"label" -> "WeatherData", "type" -> "keyword", 
  "info" -> "WeatherData[loc, \"property\"] gives the most recent measurement \
for the specified weather property at"|>, <|"label" -> "WeatherForecastData", 
  "type" -> "keyword", "info" -> "WeatherForecastData[loc] gives the most \
recent forecast for all weather forecast properties for the "|>, 
 <|"label" -> "WebAudioSearch", "type" -> "keyword", 
  "info" -> "WebAudioSearch[\"string\"] gives a dataset of the top web audio \
search results for the specified liter"|>, <|"label" -> "WebColumn", 
  "type" -> "keyword", "info" -> "WebColumn[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
HTML column containing the expr .WebColumn[expr, options]"|>, 
 <|"label" -> "WebElementObject", "type" -> "keyword", 
  "info" -> "WebElementObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents an element of an open webpage operated on by \
WebExecute."|>, <|"label" -> "WeberE", "type" -> "keyword", 
  "info" -> "                                                                 \
                                \[CapitalATilde]\216\[CapitalAHat]\274\nW"|>, 
 <|"label" -> "WebExecute", "type" -> "keyword", 
  "info" -> "WebExecute[cmd] executes the command cmd in a web browser. \
WebExecute[{cmd , cmd , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] executes a li"|>\
, <|"label" -> "WebImage", "type" -> "keyword", 
  "info" -> "WebImage[url] gives an image of the webpage specified by \
url.WebImage[list] gives images specified b"|>, 
 <|"label" -> "WebImageSearch", "type" -> "keyword", 
  "info" -> "WebImageSearch[\"string\"] gives a list of thumbnails of the top \
web image search results for the spec"|>, <|"label" -> "WebItem", 
  "type" -> "keyword", "info" -> "WebItem[expr] represents an HTML element \
containing expr.WebItem[expr, options] represents an HTML e"|>, 
 <|"label" -> "WebRow", "type" -> "keyword", "info" -> "WebRow[{expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
HTML column containing the expr .WebRow[expr, options] displ"|>, 
 <|"label" -> "WebSearch", "type" -> "keyword", 
  "info" -> "WebSearch[\"string\"] gives a dataset of the top web search \
results for the specified literal string.W"|>, 
 <|"label" -> "WebSessionObject", "type" -> "keyword", 
  "info" -> "WebSessionObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents a web browser session started by \
StartWebSession for use with WebExec"|>, <|"label" -> "WebSessions", 
  "type" -> "keyword", "info" -> 
   "WebSessions[] gives the list of all active web sessions."|>, 
 <|"label" -> "WebWindowObject", "type" -> "keyword", 
  "info" -> "WebWindowObject[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246] represents an open window or tab in a web browser."|>, 
 <|"label" -> "Wedge", "type" -> "keyword", "info" -> "Wedge[x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] displays as x \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\200 y \
\[CapitalATilde]\[Cent]\[CapitalAHat]\213\[CapitalAHat]\200 \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246."|>, 
 <|"label" -> "Wednesday", "type" -> "keyword", 
  "info" -> "Wednesday is a day of the week."|>, 
 <|"label" -> "WeibullDistribution", "type" -> "keyword", 
  "info" -> "WeibullDistribution[\[CapitalATilde]\216\\[PlusMinus], \
\[CapitalATilde]\216b2] represents a Weibull distribution with shape \
parameter \[CapitalATilde]\216\\[PlusMinus] and scale paramet"|>, 
 <|"label" -> "WeierstrassE1", "type" -> "keyword", 
  "info" -> "WeierstrassE1[{g , g }] gives the value e  of the Weierstrass \
elliptic function \[CapitalATilde]\[Cent]\[CapitalAHat]\204\[CapitalAHat]\230 \
at the half-period"|>, <|"label" -> "WeierstrassE2", "type" -> "keyword", 
  "info" -> "WeierstrassE2[{g , g }] gives the value e  of the Weierstrass \
elliptic function \[CapitalATilde]\[Cent]\[CapitalAHat]\204\[CapitalAHat]\230 \
at the half-period"|>, <|"label" -> "WeierstrassE3", "type" -> "keyword", 
  "info" -> "WeierstrassE3[{g , g }] gives the value e  of the Weierstrass \
elliptic function \[CapitalATilde]\[Cent]\[CapitalAHat]\204\[CapitalAHat]\230 \
at the half-period"|>, <|"label" -> "WeierstrassEta1", "type" -> "keyword", 
  "info" -> "WeierstrassEta1[{g , g }] gives the value \
\[CapitalATilde]\216\\[CenterDot]  of the Weierstrass zeta function \
\[CapitalATilde]\216\\[Paragraph] at the half-period \
\[CapitalATilde]\217\[CapitalAHat]\211"|>, <|"label" -> "WeierstrassEta2", 
  "type" -> "keyword", "info" -> "WeierstrassEta2[{g , g }] gives the value \
\[CapitalATilde]\216\\[CenterDot]  of the Weierstrass zeta function \
\[CapitalATilde]\216\\[Paragraph] at the half-period \
\[CapitalATilde]\217\[CapitalAHat]\211"|>, <|"label" -> "WeierstrassEta3", 
  "type" -> "keyword", "info" -> "WeierstrassEta3[{g , g }] gives the value \
\[CapitalATilde]\216\\[CenterDot]  of the Weierstrass zeta function \
\[CapitalATilde]\216\\[Paragraph] at the half-period \
\[CapitalATilde]\217\[CapitalAHat]\211"|>, 
 <|"label" -> "WeierstrassHalfPeriods", "type" -> "keyword", 
  "info" -> "WeierstrassHalfPeriods[{g , g }] gives the \
half\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\220periods \
{\[CapitalATilde]\217\[CapitalAHat]\211 , \
\[CapitalATilde]\217\[CapitalAHat]\211 } for Weierstrass elliptic functions "\
|>, <|"label" -> "WeierstrassHalfPeriodW1", "type" -> "keyword", 
  "info" -> "WeierstrassHalfPeriodW1[{g , g }] gives the half-period \
\[CapitalATilde]\217\[CapitalAHat]\211  for Weierstrass elliptic functions \
corres"|>, <|"label" -> "WeierstrassHalfPeriodW2", "type" -> "keyword", 
  "info" -> "WeierstrassHalfPeriodW2[{g , g }] gives the half-period \
\[CapitalATilde]\217\[CapitalAHat]\211  for the Weierstrass elliptic \
functions co"|>, <|"label" -> "WeierstrassHalfPeriodW3", "type" -> "keyword", 
  "info" -> "WeierstrassHalfPeriodW3[{g , g }] gives the half-period \
\[CapitalATilde]\217\[CapitalAHat]\211  for the Weierstrass elliptic \
functions co"|>, <|"label" -> "WeierstrassInvariantG2", "type" -> "keyword", 
  "info" -> "                            \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200b2                                   \
                                    "|>, 
 <|"label" -> "WeierstrassInvariantG3", "type" -> "keyword", 
  "info" -> "                            \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200b2                                   \
                                    "|>, 
 <|"label" -> "WeierstrassInvariants", "type" -> "keyword", 
  "info" -> "WeierstrassInvariants[{\[CapitalATilde]\217\[CapitalAHat]\211 , \
\[CapitalATilde]\217\[CapitalAHat]\211 }] gives the invariants {g , g } for \
Weierstrass elliptic functions cor"|>, <|"label" -> "WeierstrassP", 
  "type" -> "keyword", "info" -> "WeierstrassP[u, {g , g }] gives the \
Weierstrass elliptic function \
\[CapitalATilde]\[Cent]\[CapitalAHat]\204\[CapitalAHat]\230(u ; g , g ). \n   \
               "|>, <|"label" -> "WeierstrassPPrime", "type" -> "keyword", 
  "info" -> "WeierstrassPPrime[u, {g , g }] gives the derivative of the \
Weierstrass elliptic function \
\[CapitalATilde]\[Cent]\[CapitalAHat]\204\[CapitalAHat]\230(u ; g , g"|>, 
 <|"label" -> "WeierstrassSigma", "type" -> "keyword", 
  "info" -> "WeierstrassSigma[u, {g , g }] gives the Weierstrass sigma \
function \[CapitalATilde]\217\[CapitalAHat]\203(u ; g , g ). \n               \
  "|>, <|"label" -> "WeierstrassZeta", "type" -> "keyword", 
  "info" -> "WeierstrassZeta[u, {g , g }] gives the Weierstrass zeta function \
\[CapitalATilde]\216\\[Paragraph](u ; g , g ). \n                   "|>, 
 <|"label" -> "WeightedAdjacencyGraph", "type" -> "keyword", 
  "info" -> "WeightedAdjacencyGraph[wmat] gives the graph with weighted \
adjacency matrix wmat.WeightedAdjacencyGr"|>, 
 <|"label" -> "WeightedAdjacencyMatrix", "type" -> "keyword", 
  "info" -> "WeightedAdjacencyMatrix[g] gives the adjacency matrix of edge \
weights of the graph g.WeightedAdjacen"|>, <|"label" -> "WeightedData", 
  "type" -> "keyword", "info" -> "WeightedData[{x , x , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {w , w , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents \
observations x  with weights w .WeightedData[{x , "|>, 
 <|"label" -> "WeightedGraphQ", "type" -> "keyword", 
  "info" -> "WeightedGraphQ[g] yields True if the graph g is a weighted graph \
and False otherwise."|>, <|"label" -> "Weights", "type" -> "keyword", 
  "info" -> "Weights is an option for various fitting and other functions \
which specifies weights to associate wi"|>, <|"label" -> "WelchWindow", 
  "type" -> "keyword", "info" -> "WelchWindow[x] represents a Welch window \
function of x.WelchWindow[x, \[CapitalATilde]\216\\[PlusMinus]] uses the \
parameter \[CapitalATilde]\216\\[PlusMinus].\n"|>, 
 <|"label" -> "WheelGraph", "type" -> "keyword", 
  "info" -> "WheelGraph[n] gives the wheel graph with n vertices W .\n        \
                                    "|>, <|"label" -> "WhenEvent", 
  "type" -> "keyword", "info" -> "WhenEvent[event, action] specifies an \
action that occurs when the event triggers it for equations in"|>, 
 <|"label" -> "Which", "type" -> "keyword", "info" -> "Which[test , value , \
test , value , \[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] \
evaluates each of the test  in turn, returning the value of t"|>, 
 <|"label" -> "While", "type" -> "keyword", "info" -> "While[test, body] \
evaluates test, then body, repetitively, until test first fails to give True. \
"|>, <|"label" -> "White", "type" -> "keyword", 
  "info" -> 
   "White represents the color white in graphics or style specifications. "|>\
, <|"label" -> "WhiteNoiseProcess", "type" -> "keyword", 
  "info" -> "WhiteNoiseProcess[] represents a Gaussian white noise process \
with mean 0 and standard deviation 1.W"|>, <|"label" -> "WhitePoint", 
  "type" -> "keyword", "info" -> "WhitePoint is an option for ColorConvert, \
ChromaticityPlot and other functions to specify the white "|>, 
 <|"label" -> "Whitespace", "type" -> "keyword", 
  "info" -> "Whitespace represents a sequence of whitespace characters in \
StringExpression."|>, <|"label" -> "WhitespaceCharacter", 
  "type" -> "keyword", "info" -> "WhitespaceCharacter represents a single \
whitespace character in StringExpression."|>, 
 <|"label" -> "WhittakerM", "type" -> "keyword", 
  "info" -> "WhittakerM[k, m, z] gives the Whittaker function M    (z). \n    \
                                    "|>, <|"label" -> "WhittakerW", 
  "type" -> "keyword", "info" -> "WhittakerW[k, m, z] gives the Whittaker \
function W    (z). \n                                        "|>, 
 <|"label" -> "WienerFilter", "type" -> "keyword", 
  "info" -> "WienerFilter[data, r] removes noise from data by applying a \
range-r Wiener filter.WienerFilter[data,"|>, <|"label" -> "WienerProcess", 
  "type" -> "keyword", "info" -> "WienerProcess[\[CapitalATilde]\216\
\[CapitalAHat]\274, \[CapitalATilde]\217\[CapitalAHat]\203] represents a \
Wiener process with a drift \[CapitalATilde]\216\[CapitalAHat]\274 and \
volatility \[CapitalATilde]\217\[CapitalAHat]\203.WienerProcess[] repr"|>, 
 <|"label" -> "WignerD", "type" -> "keyword", "info" -> "                     \
                                      j                                       \
 "|>, <|"label" -> "WignerSemicircleDistribution", "type" -> "keyword", 
  "info" -> "WignerSemicircleDistribution[r] represents a Wigner semicircle \
distribution with radius r centered a"|>, <|"label" -> "WikidataData", 
  "type" -> "keyword", "info" -> "WikidataData[item, property] gives the \
values of the specified property for the given item.WikidataD"|>, 
 <|"label" -> "WikidataSearch", "type" -> "keyword", 
  "info" -> "WikidataSearch[\"keywords\"] returns a list of Wikidata items \
whose labels include the given keywords."|>, <|"label" -> "WikipediaData", 
  "type" -> "keyword", "info" -> "WikipediaData[article] gives the plain text \
of the specified Wikipedia article.WikipediaData[article"|>, 
 <|"label" -> "WikipediaSearch", "type" -> "keyword", 
  "info" -> "WikipediaSearch[keywords] returns a list of Wikipedia articles \
whose titles include the given keywor"|>, <|"label" -> "WilksW", 
  "type" -> "keyword", "info" -> "WilksW[m , m ] gives Wilks's \
\[CapitalATilde]\257\[CapitalAHat]\236\[CapitalAHat]\206 for the matrices m  \
and m .\n        1   2                            "|>, 
 <|"label" -> "WilksWTest", "type" -> "keyword", 
  "info" -> "WilksWTest[m , m ] tests whether the matrices m  and m  are \
independent.WilksWTest[\[CapitalATilde]\[Cent]\[CapitalAHat]\200\
\[CapitalAHat]\246, \"property\"] re"|>, <|"label" -> "WindDirectionData", 
  "type" -> "keyword", "info" -> "WindDirectionData[] gives the most recent \
measurement for wind direction near the current location.W"|>, 
 <|"label" -> "WindingCount", "type" -> "keyword", 
  "info" -> "WindingCount[contour, p] gives the count of the number of times \
a closed curve winds around a point "|>, <|"label" -> "WindingPolygon", 
  "type" -> "keyword", "info" -> "WindingPolygon[{p , p , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, p }] gives a \
polygon representing all points for which the closed contour"|>, 
 <|"label" -> "WindowTitle", "type" -> "keyword", 
  "info" -> 
   "WindowTitle is an option that specifies the title to give for a window. "\
|>, <|"label" -> "WindSpeedData", "type" -> "keyword", 
  "info" -> "WindSpeedData[] gives the most recent measurement for wind speed \
near the current location.WindSpeed"|>, <|"label" -> "WindVectorData", 
  "type" -> "keyword", "info" -> "WindVectorData[] gives the most recent \
weather station measurement for wind vector near the current "|>, 
 <|"label" -> "WinsorizedMean", "type" -> "keyword", 
  "info" -> "WinsorizedMean[list, f] gives the mean of the elements in list \
after replacing the fraction f of the"|>, <|"label" -> "WinsorizedVariance", 
  "type" -> "keyword", "info" -> "WinsorizedVariance[list, f] gives the \
variance of the elements in list after replacing the fraction "|>, 
 <|"label" -> "WishartMatrixDistribution", "type" -> "keyword", 
  "info" -> "WishartMatrixDistribution[\[CapitalATilde]\216\[CapitalAHat]\
\275, \[CapitalATilde]\216\[CapitalAHat]\[Sterling]] represents a Wishart \
matrix distribution with \[CapitalATilde]\216\[CapitalAHat]\275 degrees of \
freedom a"|>, <|"label" -> "With", "type" -> "keyword", 
  "info" -> "With[{x = x , y = y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, expr] specifies \
that all occurrences of the symbols x, y, \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 in expr should"|>\
, <|"label" -> "WithCleanup", "type" -> "keyword", 
  "info" -> "WithCleanup[expr, cleanup] evaluates expr, running cleanup \
before returning the result, even if an a"|>, 
 <|"label" -> "WithLock", "type" -> "keyword", "info" -> "WithLock[File[\"pat\
h\"], expr] locks the file path, evaluates expr, then releases the \
file.WithLock[Lo"|>, <|"label" -> "WolframAlpha", "type" -> "keyword", 
  "info" -> "WolframAlpha[\"query\"] sends query to Wolfram|Alpha and imports \
the output.WolframAlpha[\"query\", form"|>, 
 <|"label" -> "WolframLanguageData", "type" -> "keyword", 
  "info" -> "WolframLanguageData[entity, property] gives the value of the \
specified property for the Wolfram Lang"|>, 
 <|"label" -> "Word", "type" -> "keyword", 
  "info" -> 
   "Word represents a word in Read, Find, and related functions. "|>, 
 <|"label" -> "WordBoundary", "type" -> "keyword", 
  "info" -> "WordBoundary represents a boundary between words for purposes of \
matching in StringExpression."|>, <|"label" -> "WordCharacter", 
  "type" -> "keyword", "info" -> 
   "WordCharacter represents a letter or digit character in \
StringExpression."|>, <|"label" -> "WordCount", "type" -> "keyword", 
  "info" -> 
   "WordCount[\"string\"] gives the total number of words in string."|>, 
 <|"label" -> "WordCounts", "type" -> "keyword", 
  "info" -> "WordCounts[\"string\"] gives an association whose keys are the \
distinct words identified in string, an"|>, <|"label" -> "WordData", 
  "type" -> "keyword", "info" -> "WordData[\"word\", \"property\"] gives the \
specified property for the English word \"word\".WordData[\"word"|>, 
 <|"label" -> "WordDefinition", "type" -> "keyword", 
  "info" -> "WordDefinition[\"word\"] gives the dictionary definitions \
available for \"word\"."|>, <|"label" -> "WordFrequency", 
  "type" -> "keyword", "info" -> "WordFrequency[text, word] gives the \
frequency of word in text.WordFrequency[text, {word , word , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}]"|>, 
 <|"label" -> "WordFrequencyData", "type" -> "keyword", 
  "info" -> "WordFrequencyData[word] gives the frequency of word in typical \
published English text.WordFrequencyD"|>, <|"label" -> "WordList", 
  "type" -> "keyword", "info" -> "WordList[] gives a list of common \
words.WordList[type] gives a list of words of the specified type.\n"|>, 
 <|"label" -> "WordOrientation", "type" -> "keyword", 
  "info" -> "WordOrientation is an option for WordCloud that specifies the \
orientations in which words appear."|>, <|"label" -> "WordSearch", 
  "type" -> "keyword", "info" -> "WordSearch is an option for Find and \
FindList that specifies whether the text searched for must appe"|>, 
 <|"label" -> "WordSelectionFunction", "type" -> "keyword", 
  "info" -> "WordSelectionFunction is an option for WordCloud and other \
functions that specifies which words to u"|>, <|"label" -> "WordSeparators", 
  "type" -> "keyword", "info" -> "WordSeparators is an option for Read, Find, \
and related functions that specifies the list of strings"|>, 
 <|"label" -> "WordSpacings", "type" -> "keyword", 
  "info" -> "WordSpacings is an option for WordCloud that specifies the empty \
space to be added around each word."|>, <|"label" -> "WordStem", 
  "type" -> "keyword", "info" -> "WordStem[\"word\"] gives a stemmed form of \
word, removing plurals, inflections, etc."|>, <|"label" -> "WordTranslation", 
  "type" -> "keyword", "info" -> "WordTranslation[\"word\", lang] gives \
translations for word into the language lang.WordTranslation[\"wo"|>, 
 <|"label" -> "WorkingPrecision", "type" -> "keyword", 
  "info" -> "WorkingPrecision is an option for various numerical operations \
that specifies how many digits of pre"|>, <|"label" -> "Write", 
  "type" -> "keyword", "info" -> "Write[channel, expr , expr , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] writes the \
expressions expr  in sequence, followed by a newline, to "|>, 
 <|"label" -> "WriteLine", "type" -> "keyword", 
  "info" -> "WriteLine[stream, \"string\"] writes \"string\", followed by a \
newline, to the specified output stream.\n"|>, 
 <|"label" -> "WriteString", "type" -> "keyword", 
  "info" -> "WriteString[\"file\", \"string\"] writes \"string\" to a \
file.WriteString[channel, \"string\"] writes \"strin"|>, 
 <|"label" -> "Wronskian", "type" -> "keyword", 
  "info" -> "Wronskian[{y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, x] gives the \
Wronskian determinant for the functions y , y , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246 depending on x"|>\
, <|"label" -> "XMLElement", "type" -> "keyword", 
  "info" -> "XMLElement[tag, {attr  \
\[CapitalATilde]\257\[CapitalAHat]\224\[CapitalAHat]\[Cent] val , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {data , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] represents an \
element in symbolic XML.\n              "|>, <|"label" -> "XMLObject", 
  "type" -> "keyword", "info" -> 
   "XMLObject[\"type\"] represents the head of an XML object in symbolic \
XML."|>, <|"label" -> "XMLTemplate", "type" -> "keyword", 
  "info" -> "XMLTemplate[\"string\"] yields a TemplateObject that represents \
an XML template to be applied using fu"|>, <|"label" -> "Xnor", 
  "type" -> "keyword", "info" -> "Xnor[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is the logical \
XNOR (not XOR) function. It gives True if an even number of the e  ar"|>, 
 <|"label" -> "Xor", "type" -> "keyword", "info" -> "Xor[e , e , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246] is the logical \
XOR (exclusive OR) function. It gives True if an odd number of the e  "|>, 
 <|"label" -> "XYZColor", "type" -> "keyword", "info" -> "XYZColor[x, y, z] \
represents a color in the XYZ color space with tristimulus values x, y and \
z.XYZCo"|>, <|"label" -> "Yellow", "type" -> "keyword", 
  "info" -> 
   "Yellow represents the color yellow in graphics or style specifications. "\
|>, <|"label" -> "Yesterday", "type" -> "keyword", 
  "info" -> "Yesterday gives a DateObject representing the previous day."|>, 
 <|"label" -> "YuleDissimilarity", "type" -> "keyword", 
  "info" -> "YuleDissimilarity[u, v] gives the Yule dissimilarity between \
Boolean vectors u and v."|>, <|"label" -> "ZernikeR", "type" -> "keyword", 
  "info" -> "                                                       \
m\nZernikeR[n, m, r] gives the radial Zernike "|>, 
 <|"label" -> "ZeroSymmetric", "type" -> "keyword", 
  "info" -> "ZeroSymmetric[{s , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246, s }] represents \
the symmetry of a zero tensor in the slots s .\n               "|>, 
 <|"label" -> "ZeroTest", "type" -> "keyword", "info" -> "ZeroTest is an \
option to various linear algebra functions that gives a function to use in \
testing wh"|>, <|"label" -> "ZeroWidthTimes", "type" -> "keyword", 
  "info" -> "ZeroWidthTimes is an option for selections that specifies \
whether blank spaces representing multipli"|>, 
 <|"label" -> "Zeta", "type" -> "keyword", "info" -> "Zeta[s] gives the \
Riemann zeta function \[CapitalATilde]\216\\[Paragraph](s). Zeta[s, a] gives \
the generalized Riemann zeta function"|>, <|"label" -> "ZetaZero", 
  "type" -> "keyword", "info" -> "                             th             \
                                                        "|>, 
 <|"label" -> "ZIPCodeData", "type" -> "keyword", 
  "info" -> "ZIPCodeData[entity, property] gives the value of the specified \
property for the ZIP code entity.ZIPC"|>, <|"label" -> "ZipfDistribution", 
  "type" -> "keyword", "info" -> "ZipfDistribution[\[CapitalATilde]\217\
\[CapitalAHat]\201] represents a zeta distribution with parameter \
\[CapitalATilde]\217\[CapitalAHat]\201.ZipfDistribution[n, \
\[CapitalATilde]\217\[CapitalAHat]\201] represent"|>, 
 <|"label" -> "ZoomCenter", "type" -> "keyword", 
  "info" -> "ZoomCenter is an option for DynamicImage that specifies the \
position of a zoom window within an imag"|>, <|"label" -> "ZoomFactor", 
  "type" -> "keyword", "info" -> "ZoomFactor is an option for DynamicImage \
that specifies the magnification factor of a zoom. "|>, 
 <|"label" -> "ZTransform", "type" -> "keyword", 
  "info" -> "ZTransform[expr, n, z] gives the Z transform of expr. \
ZTransform[expr, {n , n , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}, {z , z , \
\[CapitalATilde]\[Cent]\[CapitalAHat]\200\[CapitalAHat]\246}] giv"|>, 
 <|"label" -> "AcyclicGraphQ", "type" -> "keyword", 
  "info" -> "AcyclicGraphQ[g] yields True if the graph g is an acyclic graph \
and False otherwise."|>, <|"label" -> "AllMatch", "type" -> "keyword", 
  "info" -> "AllMatch[{e , e , \[AHat]\200\246}, form] yields True if e  \
matches the pattern form for all of the e .AllMatch[ex"|>, 
 <|"label" -> "AllSameBy", "type" -> "keyword", 
  "info" -> "AllSameBy[{e , e , \[AHat]\200\246}, f] tests whether all the \
f[e ] are the same.AllSameBy[f] represents an operat"|>, 
 <|"label" -> "AnyMatch", "type" -> "keyword", "info" -> "AnyMatch[{e , e , \
\[AHat]\200\246}, form] yields True if e  matches the pattern form for any of \
the e .AnyMatch[ex"|>, <|"label" -> "AppellF2", "type" -> "keyword", 
  "info" -> "AppellF2[a, b , b , c , c , x, y] is the Appell hypergeometric \
function of two variables F  (a ; b ,"|>, <|"label" -> "AppellF3", 
  "type" -> "keyword", "info" -> "AppellF3[a , a , b , b , c, x, y] is the \
Appell hypergeometric function of two variables F  (a ; b ,"|>, 
 <|"label" -> "AppellF4", "type" -> "keyword", "info" -> "AppellF4[a, b, c , \
c , x, y] is the Appell hypergeometric function of two variables F (a ; b ; c \
, c"|>, <|"label" -> "ArcCosDegrees", "type" -> "keyword", 
  "info" -> 
   "ArcCosDegrees[z] gives the arc cosine in degrees of the complex number \
z."|>, <|"label" -> "ArcCotDegrees", "type" -> "keyword", 
  "info" -> "ArcCotDegrees[z] gives the arc cotangent in degrees of the \
complex number z."|>, <|"label" -> "ArcCscDegrees", "type" -> "keyword", 
  "info" -> "ArcCscDegrees[z] gives the arc cosecant in degrees of the \
complex number z. "|>, <|"label" -> "ArcSecDegrees", "type" -> "keyword", 
  "info" -> "ArcSecDegrees[z] gives the arc secant in degrees of the complex \
number z. "|>, <|"label" -> "ArcSinDegrees", "type" -> "keyword", 
  "info" -> 
   "ArcSinDegrees[z] gives the arc sine in degrees of the complex number z."|>\
, <|"label" -> "ArcTanDegrees", "type" -> "keyword", 
  "info" -> "ArcTanDegrees[z] gives the arc tangent in degrees of the complex \
number z."|>, <|"label" -> "ArrayDot", "type" -> "keyword", 
  "info" -> "ArrayDot[a, b, k] computes the product of arrays a and b \
obtained by summing up products of terms ov"|>, 
 <|"label" -> "ArraySymbol", "type" -> "keyword", 
  "info" -> "ArraySymbol[a] represents an array with name a.ArraySymbol[a, {n \
, n , \[AHat]\200\246}] represents an n \[CapitalATilde]\227n \
\[CapitalATilde]\227\[AHat]\200\246 arr"|>, <|"label" -> "BitFlip", 
  "type" -> "keyword", "info" -> "                                            \
                     k\nBitFlip[n, k] flips the bit corre"|>, 
 <|"label" -> "BlockDiagonalMatrix", "type" -> "keyword", 
  "info" -> "BlockDiagonalMatrix[{d , d , \[AHat]\200\246}] represents the \
block diagonal matrix with diagonal blocks d  as a s"|>, 
 <|"label" -> "BlockLowerTriangularMatrix", "type" -> "keyword", 
  "info" -> "BlockLowerTriangularMatrix[lmat] represents the block lower \
triangular matrix lmat as a structured a"|>, 
 <|"label" -> "BlockUpperTriangularMatrix", "type" -> "keyword", 
  "info" -> "BlockUpperTriangularMatrix[umat] represents the block upper \
triangular matrix umat as a structured a"|>, <|"label" -> "BuckyballGraph", 
  "type" -> "keyword", "info" -> "BuckyballGraph[] gives the buckyball \
graph.BuckyballGraph[n] gives the order\[AHat]\200\220n buckyball \
graph.Bucky"|>, <|"label" -> "BuildCompiledComponent", "type" -> "keyword", 
  "info" -> "BuildCompiledComponent[comp] builds the compiled component \
comp.BuildCompiledComponent[comp, dest] b"|>, 
 <|"label" -> "CaputoD", "type" -> "keyword", "info" -> "                     \
                                          C     \
\[CapitalIHat]\[PlusMinus]\nCaputoD[f, {x, \[CapitalIHat]\[PlusMinus]}] gives \
the "|>, <|"label" -> "Cast", "type" -> "keyword", 
  "info" -> "Cast[val, type] converts val to the type type, for use in \
compiled code.Cast[val, type, method] uses"|>, 
 <|"label" -> "CauchyMatrix", "type" -> "keyword", 
  "info" -> "CauchyMatrix[x, y] represents the Cauchy matrix given by the \
generating vectors x and y as a structu"|>, 
 <|"label" -> "CircularArcThrough", "type" -> "keyword", 
  "info" -> "CircularArcThrough[{p , p , \[AHat]\200\246}] represents a \
circular arc passing through the points p .CircularArcT"|>, 
 <|"label" -> "CircumscribedBall", "type" -> "keyword", 
  "info" -> "CircumscribedBall[{p , p , \[AHat]\200\246}] gives a ball with \
minimal radius that encloses the points p , p , \[AHat]\200\246.\n"|>, 
 <|"label" -> "Comap", "type" -> "keyword", "info" -> "Comap[{f , f , \
\[AHat]\200\246}, x] gives {f [x], f [x], \[AHat]\200\246}.Comap[fs, x, \
levelspec] applies parts of fs specified "|>, 
 <|"label" -> "ComapApply", "type" -> "keyword", 
  "info" -> "ComapApply[{f , f , \[AHat]\200\246}, expr] gives {Apply[f , \
expr], Apply[f , expr], \[AHat]\200\246}.ComapApply[fs] represents "|>, 
 <|"label" -> "ConformDates", "type" -> "keyword", 
  "info" -> "ConformDates[dates] returns a list of dates where all dates are \
made to have conforming properties, "|>, <|"label" -> "ContourIntegrate", 
  "type" -> "keyword", "info" -> "ContourIntegrate[f, z \[AHat]\210\210 cont] \
gives the integral of f along the contour defined by cont in the compl"|>, 
 <|"label" -> "CosDegrees", "type" -> "keyword", 
  "info" -> "CosDegrees[\[CapitalIHat]\[Cedilla]] gives the cosine of \
\[CapitalIHat]\[Cedilla] degrees. "|>, <|"label" -> "CotDegrees", 
  "type" -> "keyword", "info" -> "CotDegrees[\[CapitalIHat]\[Cedilla]] gives \
the cotangent of \[CapitalIHat]\[Cedilla] degrees. "|>, 
 <|"label" -> "CreateSemanticSearchIndex", "type" -> "keyword", 
  "info" -> "CreateSemanticSearchIndex[source] creates a search index from \
the data in source.CreateSemanticSearc"|>, <|"label" -> "CreateTypeInstance", 
  "type" -> "keyword", "info" -> "CreateTypeInstance[type, arg , arg , \
\[AHat]\200\246] creates an instance of a type in compiled \
code.CreateTypeIns"|>, <|"label" -> "CscDegrees", "type" -> "keyword", 
  "info" -> "CscDegrees[\[CapitalIHat]\[Cedilla]] gives the cosecant of \
\[CapitalIHat]\[Cedilla] degrees. "|>, 
 <|"label" -> "CumulativeFeatureImpactPlot", "type" -> "keyword", 
  "info" -> "CumulativeFeatureImpactPlot[model, data] plots the cumulative \
impact of the value of each feature in"|>, <|"label" -> "DateDistribution", 
  "type" -> "keyword", "info" -> "DateDistribution[dist, dunit, dorig] \
represents a distribution dist of dates with date scale unit du"|>, 
 <|"label" -> "DateGranularity", "type" -> "keyword", 
  "info" -> "DateGranularity is an option that determines the calendar \
granularity of generated dates."|>, <|"label" -> "Decimal", 
  "type" -> "keyword", "info" -> "Decimal is a setting for the \
ColumnAlignments option of GridBox which states that numbers should ali"|>, 
 <|"label" -> "DeclareCompiledComponent", "type" -> "keyword", 
  "info" -> "DeclareCompiledComponent[\"name\", decls] adds declarations \
decls to compiled component \"name\".Declare"|>, 
 <|"label" -> "DeleteAdjacentDuplicates", "type" -> "keyword", 
  "info" -> "DeleteAdjacentDuplicates[list] deletes all duplicates in runs of \
identical elements in list.DeleteAd"|>, <|"label" -> "DeleteElements", 
  "type" -> "keyword", "info" -> "DeleteElements[list, {e , e , \
\[AHat]\200\246}] removes all instances of elements e  from \
list.DeleteElements[list"|>, <|"label" -> "DFixedPoints", 
  "type" -> "keyword", "info" -> "DFixedPoints[eqn, x[t], t] gives the fixed \
points for a differential equation.DFixedPoints[{eqn , eq"|>, 
 <|"label" -> "Diff", "type" -> "keyword", "info" -> "Diff[first, second] \
returns a representation of the diffs between first and second.Diff[first, \
secon"|>, <|"label" -> "Diff3", "type" -> "keyword", 
  "info" -> "Diff3[ancestor, first, second] attempts to resolve two different \
sets of edits from a common ancesto"|>, <|"label" -> "DiffApply", 
  "type" -> "keyword", "info" -> "DiffApply[diffobj, expr] returns the result \
of applying the given DiffObject to the expression expr."|>, 
 <|"label" -> "DiffGranularity", "type" -> "keyword", 
  "info" -> "DiffGranularity is an option to Diff and related functions that \
indicates with what granularity to c"|>, <|"label" -> "DiffIgnore", 
  "type" -> "keyword", "info" -> "DiffIgnore is an option to Diff and related \
functions that specifies what elements to ignore when co"|>, 
 <|"label" -> "DiffIncludeMatches", "type" -> "keyword", 
  "info" -> "DiffIncludeMatches is an option for Diff and related functions \
that specifies whether to include mat"|>, <|"label" -> "DiffInputFunction", 
  "type" -> "keyword", "info" -> "DiffInputFunction is an option for Diff and \
related functions that specifies how the input expressio"|>, 
 <|"label" -> "DiffObject", "type" -> "keyword", 
  "info" -> "DiffObject[v, type, data] represents a sequence of diffs for \
transforming objects of the indicated t"|>, <|"label" -> "DigitSum", 
  "type" -> "keyword", "info" -> "DigitSum[n] gives the sum of the decimal \
digits in the integer n.DigitSum[n, b] gives the sum of the"|>, 
 <|"label" -> "DiscreteInputOutputModel", "type" -> "keyword", 
  "info" -> "DiscreteInputOutputModel[{g , g , \[AHat]\200\246, g     }, u] \
represents a discrete-time model with input u and o"|>, 
 <|"label" -> "DownValuesFunction", "type" -> "keyword", 
  "info" -> "DownValuesFunction[sym] represents a function that uses \
definitions attached to sym when compiling."|>, 
 <|"label" -> "DSolveChangeVariables", "type" -> "keyword", 
  "info" -> "DSolveChangeVariables[dsolve, u, t, trans] changes the solution \
function in dsolve to u(t) using the"|>, <|"label" -> "DStabilityConditions", 
  "type" -> "keyword", "info" -> "DStabilityConditions[eqn, x[t], t] gives \
the fixed points and stability conditions for a differentia"|>, 
 <|"label" -> "ElectricCurrentDensityValue", "type" -> "keyword", 
  "info" -> "ElectricCurrentDensityValue[pred, vars, pars] represents a \
current density boundary condition for PD"|>, 
 <|"label" -> "ElectricCurrentPDEComponent", "type" -> "keyword", 
  "info" -> "ElectricCurrentPDEComponent[vars, pars] yields an electric \
current PDE term with variables vars and "|>, 
 <|"label" -> "ElectricFluxDensityValue", "type" -> "keyword", 
  "info" -> "ElectricFluxDensityValue[pred, vars, pars] represents an \
electric flux density boundary condition fo"|>, 
 <|"label" -> "ElectricPotentialCondition", "type" -> "keyword", 
  "info" -> "ElectricPotentialCondition[pred, vars, pars] represents an \
electric potential surface boundary condi"|>, 
 <|"label" -> "ElectricSymmetryValue", "type" -> "keyword", 
  "info" -> "ElectricSymmetryValue[pred, vars, pars] represents an electric \
symmetry boundary condition for PDEs "|>, 
 <|"label" -> "ElectrostaticPDEComponent", "type" -> "keyword", 
  "info" -> "ElectrostaticPDEComponent[vars, pars] yields an electrostatic \
PDE term with variables vars and param"|>, <|"label" -> "EntityType", 
  "type" -> "keyword", "info" -> "EntityType[\"type\"] represents an entity \
type with the specified name.EntityType[\"type\" \[IDoubleDot]\224\[Cent] \
child  \[IDoubleDot]\224\[Cent] ch"|>, <|"label" -> "EstimatedPointNormals", 
  "type" -> "keyword", "info" -> "EstimatedPointNormals[{p , p , \
\[AHat]\200\246}] estimates normal vectors for the points p , p , \
\[AHat]\200\246.EstimatedPointN"|>, <|"label" -> "ExternalOperation", 
  "type" -> "keyword", "info" -> "ExternalOperation[\"Eval\", \"code\"] \
represents an external evaluation of \"code\".ExternalOperation[\"Eva"|>, 
 <|"label" -> "FeatureValueDependencyPlot", "type" -> "keyword", 
  "info" -> "FeatureValueDependencyPlot[model, data] plots the dependency of \
the result of model on the value of "|>, 
 <|"label" -> "FeatureValueImpactPlot", "type" -> "keyword", 
  "info" -> "FeatureValueImpactPlot[model, data] plots the impact of the \
value of a given feature in data on the "|>, <|"label" -> "FiniteField", 
  "type" -> "keyword", "info" -> "                                            \
 d\nFiniteField[p, d] gives a finite field with p  elemen"|>, 
 <|"label" -> "FiniteFieldElementPrimitiveQ", "type" -> "keyword", 
  "info" -> "FiniteFieldElementPrimitiveQ[a] tests whether a is a primitive \
element of its ambient field."|>, <|"label" -> "FiniteFieldEmbedding", 
  "type" -> "keyword", "info" -> "FiniteFieldEmbedding[ff , ff ] gives an \
embedding of the finite field ff  in the finite field ff .Fi"|>, 
 <|"label" -> "FiniteFieldIndex", "type" -> "keyword", 
  "info" -> 
   "FiniteFieldIndex[u] gives the index of the FiniteFieldElement object u."|>\
, <|"label" -> "FluidFlowPDEComponent", "type" -> "keyword", 
  "info" -> "FluidFlowPDEComponent[vars, pars] yields a flow PDE term with \
variables vars and parameters pars."|>, <|"label" -> "ForAllType", 
  "type" -> "keyword", "info" -> "ForAllType[x, type] represents a type \
parameterized by x.ForAllType[x, cond, type] represents a type"|>, 
 <|"label" -> "ForeignCallback", "type" -> "keyword", 
  "info" -> "ForeignCallback[\[AHat]\200\246] represents a foreign callback \
that can be called from external libraries."|>, 
 <|"label" -> "ForeignFunction", "type" -> "keyword", 
  "info" -> "ForeignFunction[args] represents a function that has been loaded \
from a library."|>, <|"label" -> "ForeignFunctionLoad", "type" -> "keyword", 
  "info" -> "ForeignFunctionLoad[lib, fun, {argtype , argtype , \
\[AHat]\200\246} \[IDoubleDot]\224\[Cent] rettype] loads the function fun \
with the spe"|>, <|"label" -> "ForeignPointerLookup", "type" -> "keyword", 
  "info" -> "ForeignPointerLookup[lib, fun] returns the pointer to the \
function fun in the library lib."|>, <|"label" -> "FromFiniteField", 
  "type" -> "keyword", "info" -> "FromFiniteField[a, ff] converts the element \
a of the prime subfield of the finite field ff to an int"|>, 
 <|"label" -> "FromFiniteFieldIndex", "type" -> "keyword", 
  "info" -> "FromFiniteFieldIndex[ind, ff] gives the element of the finite \
field ff with index ind."|>, <|"label" -> "FromLunationNumber", 
  "type" -> "keyword", "info" -> "FromLunationNumber[ln] returns the date \
corresponding to the lunation number ln.FromLunationNumber[s"|>, 
 <|"label" -> "FromRawPointer", "type" -> "keyword", 
  "info" -> "FromRawPointer[p] returns the value referred to by the pointer p \
for use in compiled code.FromRawPoi"|>, <|"label" -> "FullMoon", 
  "type" -> "keyword", "info" -> "FullMoon[] gives the date of the next full \
moon.FullMoon[date] gives the date of the first full moon"|>, 
 <|"label" -> "GraphJoin", "type" -> "keyword", 
  "info" -> "GraphJoin[g , g ] gives the graph join of the graphs g  and g \
.\n           1   2                    "|>, <|"label" -> "GraphProduct", 
  "type" -> "keyword", "info" -> "GraphProduct[g , g ] gives the Cartesian \
product of the graphs g  and g .GraphProduct[g , g , \"op\"] "|>, 
 <|"label" -> "GraphSum", "type" -> "keyword", "info" -> "GraphSum[g , g ] \
gives the graph sum of the graphs g  and g .\n          1   2                 \
      "|>, <|"label" -> "GraphTriangleCount", "type" -> "keyword", 
  "info" -> 
   "GraphTriangleCount[g] gives the number of triangles in the graph g."|>, 
 <|"label" -> "Haloing", "type" -> "keyword", "info" -> "Haloing[] is a \
two\[AHat]\200\220dimensional directive specifying that graphics objects are \
to be drawn with a hal"|>, <|"label" -> "HermitianMatrix", 
  "type" -> "keyword", "info" -> "HermitianMatrix[hmat] converts the \
Hermitian matrix hmat to a structured array."|>, 
 <|"label" -> "InertEvaluate", "type" -> "keyword", 
  "info" -> "InertEvaluate[inertExpr] evaluates an \"InertExpression\", \
returning a new \"InertExpression\" in compil"|>, 
 <|"label" -> "InertExpression", "type" -> "keyword", 
  "info" -> 
   "InertExpression[expr] creates an inert expression in compiled code."|>, 
 <|"label" -> "InscribedBall", "type" -> "keyword", 
  "info" -> "InscribedBall[{p , p , \[AHat]\200\246}] gives the largest ball \
that lies inside the convex hull of the points p ,"|>, 
 <|"label" -> "IntegrateChangeVariables", "type" -> "keyword", 
  "info" -> "IntegrateChangeVariables[integral, u, trans] changes the \
variable in integral to the new variable u "|>, 
 <|"label" -> "IntermediateTest", "type" -> "keyword", 
  "info" -> "IntermediateTest[input] creates an intermediate test to \
determine whether input evaluates to True.In"|>, 
 <|"label" -> "LayeredGraph", "type" -> "keyword", 
  "info" -> "LayeredGraph[g] creates a graph with vertices and edges from the \
graph g represented as a layered pl"|>, <|"label" -> "LayeredGraph3D", 
  "type" -> "keyword", "info" -> "LayeredGraph3D[g] creates a graph with \
vertices and edges from the graph g represented as a 3D layer"|>, 
 <|"label" -> "LibraryFunctionDeclaration", "type" -> "keyword", 
  "info" -> "LibraryFunctionDeclaration[\"extName\", lib, type] represents a \
function declaration that exposes the "|>, <|"label" -> "LineIntegrate", 
  "type" -> "keyword", "info" -> "LineIntegrate[f, {x, y, \[AHat]\200\246} \
\[AHat]\210\210 curve] computes the scalar line integral of the function f[x, \
y, \[AHat]\200\246] ove"|>, <|"label" -> "LiteralType", "type" -> "keyword", 
  "info" -> 
   "LiteralType[x] represents a literal value x for use as a type."|>, 
 <|"label" -> "LLMConfiguration", "type" -> "keyword", 
  "info" -> "LLMConfiguration[\[AHat]\200\246] represents a configuration for \
an LLM.LLMConfiguration[prop \[IDoubleDot]\224\[Cent] val] creates a con"|>, 
 <|"label" -> "LLMEvaluator", "type" -> "keyword", 
  "info" -> "LLMEvaluator is an option for functions such as LLMSynthesize \
that specifies the LLM configuration."|>, <|"label" -> "LLMExampleFunction", 
  "type" -> "keyword", "info" -> "LLMExampleFunction[{in  \
\[IDoubleDot]\224\[Cent] out , in  \[IDoubleDot]\224\[Cent] out , \
\[AHat]\200\246}] creates an LLMFunction from few-shot examples.LLMExa"|>, 
 <|"label" -> "LLMFunction", "type" -> "keyword", 
  "info" -> "LLMFunction[prompt] represents a template for a large language \
model (LLM) prompt.LLMFunction[{promp"|>, <|"label" -> "LLMPrompt", 
  "type" -> "keyword", "info" -> "LLMPrompt[\"name\"] gives the \
TemplateObject for the specified large language model prompt.LLMPrompt[r"|>, 
 <|"label" -> "LLMPromptGenerator", "type" -> "keyword", 
  "info" -> "LLMPromptGenerator[f] represents a prompt generator that uses \
the function f.LLMPromptGenerator[f, i"|>, 
 <|"label" -> "LLMResourceFunction", "type" -> "keyword", 
  "info" -> "LLMResourceFunction[\"name\"] retrieves an LLMFunction with the \
specified name.LLMResourceFunction[loc"|>, <|"label" -> "LLMSynthesize", 
  "type" -> "keyword", "info" -> "LLMSynthesize[prompt] generates text \
according to the input prompt.LLMSynthesize[{prompt , \[AHat]\200\246}] \
combi"|>, <|"label" -> "LoadCompiledComponent", "type" -> "keyword", 
  "info" -> "LoadCompiledComponent[comp] loads a compiled component \
comp.LoadCompiledComponent[comp, target] load"|>, 
 <|"label" -> "LocalEvaluate", "type" -> "keyword", 
  "info" -> "LocalEvaluate[expr] gives the result of evaluating expr using \
your current default local Wolfram Lan"|>, <|"label" -> "Locator", 
  "type" -> "keyword", "info" -> "Locator[{x, y}] represents a locator object \
at position {x, y} in a graphic. Locator[Dynamic[pos]] t"|>, 
 <|"label" -> "LocatorPane", "type" -> "keyword", 
  "info" -> "LocatorPane[{x, y}, back] represents a pane with a locator at \
position {x, y} and background back.Lo"|>, 
 <|"label" -> "LowerTriangularMatrix", "type" -> "keyword", 
  "info" -> "LowerTriangularMatrix[lmat] converts the lower triangular matrix \
lmat to a structured array."|>, <|"label" -> "LunationNumber", 
  "type" -> "keyword", "info" -> "LunationNumber[] returns the number of new \
moons since the first new moon of the year 2000.LunationN"|>, 
 <|"label" -> "MapApply", "type" -> "keyword", "info" -> "f @@@ expr or \
MapApply[f, expr] replaces heads at level 1 of expr by f.MapApply[f] \
represents an ope"|>, <|"label" -> "MatrixSymbol", "type" -> "keyword", 
  "info" -> "MatrixSymbol[a] represents a matrix with name a.MatrixSymbol[a, \
{m, n}] represents an m\[IDoubleDot]\222 n matrix.Mat"|>, 
 <|"label" -> "MaxRoots", "type" -> "keyword", "info" -> "MaxRoots is an \
option for NSolve and related functions that specifies the maximum number of \
roots th"|>, <|"label" -> "MinSize", "type" -> "keyword", 
  "info" -> "MinSize is an option of certain BoxForm primitives."|>, 
 <|"label" -> "ModelPredictiveController", "type" -> "keyword", 
  "info" -> "ModelPredictiveController[sspec, cost, cons] computes the model \
predictive controller for the system"|>, <|"label" -> "MoonPhaseDate", 
  "type" -> "keyword", "info" -> "MoonPhaseDate[] returns the date of the \
next new moon.MoonPhaseDate[phase] returns the date of the n"|>, 
 <|"label" -> "NCaputoD", "type" -> "keyword", "info" -> "                    \
                                                                         C    \
 \[CapitalIHat]\[PlusMinus]"|>, <|"label" -> "NContourIntegrate", 
  "type" -> "keyword", "info" -> "NContourIntegrate[f, z \[AHat]\210\210 \
cont] gives the numerical integral of f along the contour defined by cont i"|>\
, <|"label" -> "NetExternalObject", "type" -> "keyword", 
  "info" -> "NetExternalObject[\[AHat]\200\246] represents a net model in an \
external framework format."|>, <|"label" -> "NewMoon", "type" -> "keyword", 
  "info" -> "NewMoon[] gives the date of the next new moon.NewMoon[date] \
gives the date of the first new moon aft"|>, <|"label" -> "NLineIntegrate", 
  "type" -> "keyword", "info" -> "NLineIntegrate[f, {x, y, \[AHat]\200\246} \
\[AHat]\210\210 curve] computes the numerical scalar line integral of the \
function f[x"|>, <|"label" -> "NominalScale", "type" -> "keyword", 
  "info" -> "NominalScale[{cat , cat , \[AHat]\200\246, cat }] represents a \
set of unordered categories cat . NominalScale[\[IDoubleDot]\204\223 ca"|>, 
 <|"label" -> "NoneMatch", "type" -> "keyword", 
  "info" -> "NoneMatch[{e , e , \[AHat]\200\246}, form] yields True if e  \
does not match the pattern form for any of the e .Non"|>, 
 <|"label" -> "NonThreadable", "type" -> "keyword", 
  "info" -> "NonThreadable is an attribute that can be assigned to a symbol f \
to indicate that f and f[arg , arg "|>, <|"label" -> "NSurfaceIntegrate", 
  "type" -> "keyword", "info" -> "NSurfaceIntegrate[f, {x, y, \
\[AHat]\200\246} \[AHat]\210\210 surface] computes the numerical scalar \
surface integral of the func"|>, <|"label" -> "NullRawPointerQ", 
  "type" -> "keyword", "info" -> "NullRawPointerQ[ptr] gives True if ptr is a \
null pointer, and False otherwise."|>, <|"label" -> "OpaqueRawPointer", 
  "type" -> "keyword", "info" -> "OpaqueRawPointer[addr] represents an \
untyped pointer to the memory address addr."|>, 
 <|"label" -> "OperationDeclaration", "type" -> "keyword", 
  "info" -> "OperationDeclaration[type, op, typedfun] declares a typed \
function to be used for the operation op o"|>, 
 <|"label" -> "OrdinalScale", "type" -> "keyword", 
  "info" -> "OrdinalScale[{cat , cat , \[AHat]\200\246, cat }] represents a \
set of ordered categories cat  with order cat  < ca"|>, 
 <|"label" -> "OrthogonalMatrix", "type" -> "keyword", 
  "info" -> "OrthogonalMatrix[omat] converts the orthogonal matrix omat to a \
structured array."|>, <|"label" -> "PairwiseDensityHistogram", 
  "type" -> "keyword", "info" -> "PairwiseDensityHistogram[{{y  , \
\[AHat]\200\246, y  }, \[AHat]\200\246, {y  , \[AHat]\200\246, y  }}] creates \
an array of density histograms b"|>, <|"label" -> "PairwiseListPlot", 
  "type" -> "keyword", "info" -> "PairwiseListPlot[{{y  , \[AHat]\200\246, y  \
}, \[AHat]\200\246, {y  , \[AHat]\200\246, y  }}] creates an array of scatter \
plots by plotting th"|>, <|"label" -> "PairwiseProbabilityPlot", 
  "type" -> "keyword", "info" -> "PairwiseProbabilityPlot[{{y  , \
\[AHat]\200\246, y  }, \[AHat]\200\246, {y  , \[AHat]\200\246, y  }}] plots a \
CDF of columns in the data agains"|>, <|"label" -> "PairwiseQuantilePlot", 
  "type" -> "keyword", "info" -> "PairwiseQuantilePlot[{{y  , \
\[AHat]\200\246, y  }, \[AHat]\200\246, {y  , \[AHat]\200\246, y  }}] creates \
an array of quantile plots by plotti"|>, 
 <|"label" -> "PairwiseSmoothDensityHistogram", "type" -> "keyword", 
  "info" -> "PairwiseSmoothDensityHistogram[{{y  , \[AHat]\200\246, y  }, \
\[AHat]\200\246, {y  , \[AHat]\200\246, y  }}] creates an array of smooth \
density"|>, <|"label" -> "ParentEdgeLabel", "type" -> "keyword", 
  "info" -> "ParentEdgeLabel is an option for Tree and related functions that \
specifies what labels should be use"|>, 
 <|"label" -> "ParentEdgeLabelFunction", "type" -> "keyword", 
  "info" -> "ParentEdgeLabelFunction is an option for Tree and related \
functions that specifies a function to use"|>, 
 <|"label" -> "ParentEdgeShapeFunction", "type" -> "keyword", 
  "info" -> "ParentEdgeShapeFunction is an option for Tree and related \
functions that specifies a function to use"|>, 
 <|"label" -> "PascalBinomial", "type" -> "keyword", 
  "info" -> "PascalBinomial[n, m] gives the binomial coefficient (n) that \
preserves Pascal's identity.\n\n         "|>, 
 <|"label" -> "PermutationMatrix", "type" -> "keyword", 
  "info" -> "PermutationMatrix[permv] represents the permutation matrix given \
by permutation vector permv as a st"|>, <|"label" -> "PhongShading", 
  "type" -> "keyword", "info" -> "PhongShading[] is a \
three\[AHat]\200\220dimensional graphics directive that specifies that faces \
of polygons and o"|>, <|"label" -> "PlotHighlighting", "type" -> "keyword", 
  "info" -> "PlotHighlighting is an option to Plot, ListPlot and related \
visualization functions that specifies h"|>, <|"label" -> "PolarCurve", 
  "type" -> "keyword", "info" -> "PolarCurve[r, {\[CapitalIHat]\[Cedilla], \
\[CapitalIHat]\[Cedilla]   , \[CapitalIHat]\[Cedilla]   }] gives a polar \
curve with radius r as a function of angle \[CapitalIHat]\[Cedilla].\n        \
 "|>, <|"label" -> "PositionLargest", "type" -> "keyword", 
  "info" -> "PositionLargest[list] gives the positions of the numerically \
largest value in list.PositionLargest[l"|>, <|"label" -> "PositionSmallest", 
  "type" -> "keyword", "info" -> "PositionSmallest[list] gives the positions \
of the numerically smallest value in list.PositionSmalles"|>, 
 <|"label" -> "PropagateAborts", "type" -> "keyword", 
  "info" -> "PropagateAborts is an option to CheckAbort to control whether a \
handled abort propagates to the encl"|>, <|"label" -> "QuestionGenerator", 
  "type" -> "keyword", "info" -> "QuestionGenerator[<| name  :> val , name  \
:> val , \[AHat]\200\246|>, genfunc] represents a QuestionObject generat"|>, 
 <|"label" -> "QuestionSelector", "type" -> "keyword", 
  "info" -> "QuestionSelector[{qo , qo , \[AHat]\200\246}] represents a list \
of questions from which one of the question object"|>, 
 <|"label" -> "RandomDate", "type" -> "keyword", 
  "info" -> "RandomDate[] gives a pseudorandom date in the current calendar \
year.RandomDate[{date   , date   }] g"|>, <|"label" -> "RandomTime", 
  "type" -> "keyword", "info" -> "RandomTime[] gives a pseudorandom time of \
day.RandomTime[{time   , time   }] gives a pseudorandom ti"|>, 
 <|"label" -> "RawMemoryAllocate", "type" -> "keyword", 
  "info" -> "RawMemoryAllocate[type] allocates enough raw memory to store a \
binary representation of the specifie"|>, <|"label" -> "RawMemoryExport", 
  "type" -> "keyword", "info" -> "RawMemoryExport[expr] exports a raw memory \
representation of expr.RawMemoryExport[expr, type] uses t"|>, 
 <|"label" -> "RawMemoryFree", "type" -> "keyword", 
  "info" -> "RawMemoryFree[ptr] frees the raw memory at a pointer ptr."|>, 
 <|"label" -> "RawMemoryImport", "type" -> "keyword", 
  "info" -> "RawMemoryImport[ptr, format] imports raw memory from the pointer \
ptr with the specified format.RawMe"|>, <|"label" -> "RawMemoryRead", 
  "type" -> "keyword", "info" -> "RawMemoryRead[ptr] reads raw memory from \
the pointer ptr.RawMemoryRead[ptr, offset] reads from an of"|>, 
 <|"label" -> "RawMemoryWrite", "type" -> "keyword", 
  "info" -> "RawMemoryWrite[ptr, val] writes a binary representation of val \
to the raw memory at the pointer ptr."|>, <|"label" -> "RawPointer", 
  "type" -> "keyword", "info" -> "RawPointer[addr, type] represents a raw \
pointer to the specified type at the memory address addr."|>, 
 <|"label" -> "RealValuedNumberQ", "type" -> "keyword", 
  "info" -> "RealValuedNumberQ[expr] returns True if expr is a number with a \
real value and False otherwise."|>, <|"label" -> "RealValuedNumericQ", 
  "type" -> "keyword", "info" -> "RealValuedNumericQ[expr] gives True if expr \
is a real-valued numeric quantity, and False otherwise."|>, 
 <|"label" -> "ReapVideo", "type" -> "keyword", 
  "info" -> "ReapVideo[expr] gives a video whose frames are the expressions \
to which SowVideo has been applied du"|>, <|"label" -> "ReconstructionMesh", 
  "type" -> "keyword", "info" -> "ReconstructionMesh[{pt , pt , \
\[AHat]\200\246}] reconstructs a mesh from a set of points pt , pt , \
\[AHat]\200\246.\n            "|>, <|"label" -> "RegionFarthestDistance", 
  "type" -> "keyword", "info" -> "RegionFarthestDistance[reg , reg ] gives \
the farthest distance between points in the regions reg  an"|>, 
 <|"label" -> "RegionHausdorffDistance", "type" -> "keyword", 
  "info" -> "RegionHausdorffDistance[reg , reg ] gives the Hausdorff distance \
between the regions reg  and reg .\n"|>, <|"label" -> "ReplaceAt", 
  "type" -> "keyword", "info" -> "                                            \
                th\nReplaceAt[expr, rules, n] transforms "|>, 
 <|"label" -> "ResidueSum", "type" -> "keyword", 
  "info" -> "ResidueSum[f, z] finds the sum of residues of the meromorphic \
function f with the variable z.Residue"|>, <|"label" -> "RFixedPoints", 
  "type" -> "keyword", "info" -> "RFixedPoints[eqn, a[n], n] gives the fixed \
points for a recurrence equation.RFixedPoints[{eqn , eqn "|>, 
 <|"label" -> "RootTree", "type" -> "keyword", "info" -> "RootTree[tree] \
returns the root node of tree as a Tree object.RootTree[tree, n] returns a \
Tree objec"|>, <|"label" -> "RStabilityConditions", "type" -> "keyword", 
  "info" -> "RStabilityConditions[eqn, a[n], n] gives the fixed points and \
stability conditions for a recurrence "|>, <|"label" -> "SameAs", 
  "type" -> "keyword", "info" -> "SameAs[y] is an operator form that yields x \
=== y when applied to an expression x."|>, <|"label" -> "SamplerModel", 
  "type" -> "keyword", "info" -> "SamplerModel[] represents the single-input, \
single-output model of a sampler.SamplerModel[specs] rep"|>, 
 <|"label" -> "SchrodingerPDEComponent", "type" -> "keyword", 
  "info" -> "SchrodingerPDEComponent[vars, pars] yields a \
Schr\[CapitalATilde]\[Paragraph]dinger PDE term with model variables vars and \
mode"|>, <|"label" -> "SecDegrees", "type" -> "keyword", 
  "info" -> "SecDegrees[\[CapitalIHat]\[Cedilla]] gives the secant of \
\[CapitalIHat]\[Cedilla] degrees. "|>, <|"label" -> "SemanticSearch", 
  "type" -> "keyword", "info" -> "SemanticSearch[index, query] finds the \
items similar to query inside index.SemanticSearch[index, que"|>, 
 <|"label" -> "SemanticSearchIndex", "type" -> "keyword", 
  "info" -> "SemanticSearchIndex[\[AHat]\200\246] represents a semantic \
search index object."|>, <|"label" -> "SemanticSearchIndices", 
  "type" -> "keyword", "info" -> "SemanticSearchIndices[] returns a list with \
all the known instances of SemanticSearchIndex.SemanticS"|>, 
 <|"label" -> "SequenceType", "type" -> "keyword", 
  "info" -> "SequenceType[var] represents a type parameterized by var that \
refers to a sequence of zero or more t"|>, <|"label" -> "ShowContents", 
  "type" -> "keyword", "info" -> "ShowContents is an option for selections \
that specifies whether an object represented by a StyleBox "|>, 
 <|"label" -> "SinDegrees", "type" -> "keyword", 
  "info" -> "SinDegrees[\[CapitalIHat]\[Cedilla]] gives the sine of \
\[CapitalIHat]\[Cedilla] degrees. "|>, <|"label" -> "SowVideo", 
  "type" -> "keyword", "info" -> "SowVideo[frame] specifies that frame should \
be collected by the nearest enclosing ReapVideo.SowVideo"|>, 
 <|"label" -> "SpellingOptions", "type" -> "keyword", 
  "info" -> "SpellingOptions is an option for notebooks that specifies \
settings for spellchecking."|>, <|"label" -> "SphericalAngle", 
  "type" -> "keyword", "info" -> "SphericalAngle[{\[CapitalIHat]\[Cedilla] , \
\[CapitalIDoubleDot]\225 } \[IDoubleDot]\224\[Cent] \
{{\[CapitalIHat]\[Cedilla] , \[CapitalIDoubleDot]\225 }, \
{\[CapitalIHat]\[Cedilla] , \[CapitalIDoubleDot]\225 }}] gives the signed \
angle in radians between the great "|>, <|"label" -> "SphericalDistance", 
  "type" -> "keyword", "info" -> "SphericalDistance[{\[CapitalIHat]\[Cedilla] \
, \[CapitalIDoubleDot]\225 }, {\[CapitalIHat]\[Cedilla] , \
\[CapitalIDoubleDot]\225 }] returns the great-circle distance between points \
{\[CapitalIHat]\[Cedilla] , \[CapitalIDoubleDot]\225 } and "|>, 
 <|"label" -> "Squiggled", "type" -> "keyword", 
  "info" -> "Squiggled[expr] displays expr with text underlined with a \
squiggly red underline.Squiggled[expr, col"|>, 
 <|"label" -> "StatusArea", "type" -> "keyword", 
  "info" -> "StatusArea[expr, string] displays string in the status area of \
the current notebook when the mouse p"|>, <|"label" -> "StringApply", 
  "type" -> "keyword", "info" -> "StringApply[f, string] applies f to the \
code points in string.StringApply[f] represents an operator "|>, 
 <|"label" -> "Struckthrough", "type" -> "keyword", 
  "info" -> "Struckthrough represents a font with a strike-through line."|>, 
 <|"label" -> "SurdForm", "type" -> "keyword", "info" -> "SurdForm is an \
option to RadicalBox and SqrtBox that indicates whether the radical \
represents a Surd"|>, <|"label" -> "SurfaceIntegrate", "type" -> "keyword", 
  "info" -> "SurfaceIntegrate[f, {x, y, \[AHat]\200\246} \[AHat]\210\210 \
surface] computes the scalar surface integral of the function f[x, y"|>, 
 <|"label" -> "SymbolicDeltaProductArray", "type" -> "keyword", 
  "info" -> "SymbolicDeltaProductArray[{n , n , \[AHat]\200\246}, {{j    , j  \
  , \[AHat]\200\246}, {j    , j    , \[AHat]\200\246}, \[AHat]\200\246}] \
represents an n  \[CapitalATilde]\227"|>, 
 <|"label" -> "SymbolicIdentityArray", "type" -> "keyword", 
  "info" -> "SymbolicIdentityArray[{n , n , \[AHat]\200\246}] represents an n \
 \[CapitalATilde]\227 n  \[CapitalATilde]\227 \[AHat]\200\246 \
\[CapitalATilde]\227 n  \[CapitalATilde]\227 n  \[CapitalATilde]\227 \
\[AHat]\200\246 array with elements a    "|>, 
 <|"label" -> "SymbolicOnesArray", "type" -> "keyword", 
  "info" -> "SymbolicOnesArray[] represents an array of ones with unspecified \
dimensions.SymbolicOnesArray[{n , n"|>, <|"label" -> "SymbolicZerosArray", 
  "type" -> "keyword", "info" -> "SymbolicZerosArray[] represents an array of \
zeros with unspecified dimensions.SymbolicZerosArray[{n "|>, 
 <|"label" -> "SymmetricDifference", "type" -> "keyword", 
  "info" -> "SymmetricDifference[list , list , \[AHat]\200\246] gives the \
symmetric difference of the lists list .\n            "|>, 
 <|"label" -> "SymmetricMatrix", "type" -> "keyword", 
  "info" -> "SymmetricMatrix[smat] converts the symmetric matrix smat to a \
structured array."|>, <|"label" -> "TanDegrees", "type" -> "keyword", 
  "info" -> "TanDegrees[\[CapitalIHat]\[Cedilla]] gives the tangent of \
\[CapitalIHat]\[Cedilla] degrees. "|>, <|"label" -> "TargetStructure", 
  "type" -> "keyword", "info" -> "TargetStructure is an option for linear \
algebra functions that specifies the representation of the r"|>, 
 <|"label" -> "TerminatedEvaluation", "type" -> "keyword", 
  "info" -> "TerminatedEvaluation[\"reason\"] represents an expression whose \
evaluation overran global kernel sessi"|>, <|"label" -> "TernaryListPlot", 
  "type" -> "keyword", "info" -> "TernaryListPlot[{{u , v , w }, \
\[AHat]\200\246, {u , v , w }}] plots a list of points with specified u, v \
and w co"|>, <|"label" -> "TernaryPlotCorners", "type" -> "keyword", 
  "info" -> "TernaryPlotCorners is an option for TernaryListPlot that \
determines how the triangle and axes are po"|>, 
 <|"label" -> "Threaded", "type" -> "keyword", "info" -> "Threaded[list] is \
an object whose elements will automatically be threaded into the lowest level \
of a"|>, <|"label" -> "TimeDistribution", "type" -> "keyword", 
  "info" -> "TimeDistribution[dist, tunit] represents a linear distribution \
of time of day according to dist with"|>, <|"label" -> "ToFiniteField", 
  "type" -> "keyword", "info" -> "ToFiniteField[k, ff] converts the integer k \
to an element of the prime subfield of the finite field "|>, 
 <|"label" -> "ToRawPointer", "type" -> "keyword", 
  "info" -> "ToRawPointer[] creates a new pointer object in compiled code, \
suitable for use with external librari"|>, <|"label" -> "TorusGraph", 
  "type" -> "keyword", "info" -> "TorusGraph[{n , n , \[AHat]\200\246, n }] \
gives the k-dimensional torus graph with n  \[CapitalATilde]\227 n  \
\[CapitalATilde]\227 \[AHat]\200\246 \[CapitalATilde]\227 n  vertices.\n    "\
|>, <|"label" -> "Tour3DVideo", "type" -> "keyword", 
  "info" -> "Tour3DVideo[g] generates a video giving a standard tour around a \
3D object g. Tour3DVideo[g, tour] g"|>, 
 <|"label" -> "TreeElementCoordinates", "type" -> "keyword", 
  "info" -> "TreeElementCoordinates is an option for Tree and related \
functions that specifies the coordinates to"|>, 
 <|"label" -> "TreeElementLabelFunction", "type" -> "keyword", 
  "info" -> "TreeElementLabelFunction is an option for Tree and related \
functions that specifies a function to us"|>, 
 <|"label" -> "TreeElementShape", "type" -> "keyword", 
  "info" -> "TreeElementShape is an option for Tree and related functions \
that specifies what graphics should be "|>, 
 <|"label" -> "TreeElementShapeFunction", "type" -> "keyword", 
  "info" -> "TreeElementShapeFunction is an option for Tree and related \
functions that specifies a function to us"|>, <|"label" -> "TreeElementSize", 
  "type" -> "keyword", "info" -> "TreeElementSize is an option for Tree and \
related functions that specifies what size should be used "|>, 
 <|"label" -> "TreeElementSizeFunction", "type" -> "keyword", 
  "info" -> "TreeElementSizeFunction is an option for Tree and related \
functions that specifies a function to use"|>, 
 <|"label" -> "TreeLeafCount", "type" -> "keyword", 
  "info" -> "TreeLeafCount[tree] gives the number of leaves of tree."|>, 
 <|"label" -> "TruncateSum", "type" -> "keyword", 
  "info" -> "TruncateSum[sexpr, n] truncates each Sum in sexpr to have at \
most n terms. TruncateSum[sexpr, {m, n,"|>, <|"label" -> "TypeEvaluate", 
  "type" -> "keyword", "info" -> 
   "TypeEvaluate[expr] represents a type created by evaluating expr."|>, 
 <|"label" -> "TypeHint", "type" -> "keyword", "info" -> "TypeHint[expr, \
type] represents an expression of a specified type when compiled and gives \
expr when "|>, <|"label" -> "TypeOf", "type" -> "keyword", 
  "info" -> "TypeOf[expr] gives the type of expr without evaluating \
it.TypeOf[expr, Typed[x, ty]] assumes that in"|>, 
 <|"label" -> "UnilateralConvolve", "type" -> "keyword", 
  "info" -> "UnilateralConvolve[f, g, u, t] gives the unilateral convolution \
with respect to u of the expressions"|>, 
 <|"label" -> "UnilateralDiscreteConvolve", "type" -> "keyword", 
  "info" -> "UnilateralDiscreteConvolve[f, g, k, n] gives the unilateral \
discrete convolution with respect to k o"|>, <|"label" -> "UniqueElements", 
  "type" -> "keyword", "info" -> "UniqueElements[{list , list , \
\[AHat]\200\246}] gives the elements for each list  that are not in any other \
list.U"|>, <|"label" -> "UnitaryMatrix", "type" -> "keyword", 
  "info" -> "UnitaryMatrix[umat] converts the unitary matrix umat to a \
structured array."|>, <|"label" -> "UnlabeledTree", "type" -> "keyword", 
  "info" -> "UnlabeledTree[tree] returns a tree of the same shape as tree in \
which the nodes and edges are displa"|>, <|"label" -> "UnmanageObject", 
  "type" -> "keyword", "info" -> "UnmanageObject[man] takes ownership of \
memory wrapped in a managed object."|>, <|"label" -> "Until", 
  "type" -> "keyword", "info" -> "Until[test, body] evaluates body and then \
test, repetitively, until test first gives True."|>, 
 <|"label" -> "UpdateSemanticSearchIndex", "type" -> "keyword", 
  "info" -> "UpdateSemanticSearchIndex[index, source] updates the \
SemanticSearchIndex[\[AHat]\200\246] index with the data in s"|>, 
 <|"label" -> "UpperTriangularMatrix", "type" -> "keyword", 
  "info" -> "UpperTriangularMatrix[umat] converts the upper triangular matrix \
umat to a structured array."|>, <|"label" -> "VandermondeMatrix", 
  "type" -> "keyword", "info" -> "VandermondeMatrix[{x , x , \[AHat]\200\246, \
x }] gives an n \[CapitalATilde]\227 n Vandermonde matrix corresponding to \
the nodes x .V"|>, <|"label" -> "VectorSymbol", "type" -> "keyword", 
  "info" -> "VectorSymbol[v] represents a vector with name v.VectorSymbol[v, \
d] represents a vector of length d.V"|>, <|"label" -> "VideoExtractTracks", 
  "type" -> "keyword", "info" -> "VideoExtractTracks[video] returns a list of \
video, audio and subtitle tracks of video.VideoExtractTr"|>, 
 <|"label" -> "VideoFrameFold", "type" -> "keyword", 
  "info" -> "VideoFrameFold[f, img , video] gives a video whose frames are \
{f[img , img ], f[f[img , img ], img ]"|>, <|"label" -> "VideoPadding", 
  "type" -> "keyword", "info" -> "VideoPadding is an option for GridVideo and \
other video functions to specify how to pad video frames"|>, 
 <|"label" -> "VideoScreenCapture", "type" -> "keyword", 
  "info" -> "VideoScreenCapture[] creates a temporary interactive interface \
for capturing from the main screen in"|>, <|"label" -> "VideoSummaryPlot", 
  "type" -> "keyword", "info" -> "VideoSummaryPlot[video] plots a summary of \
video and audio tracks of video.VideoSummaryPlot[video, l"|>, 
 <|"label" -> "VideoTranscribe", "type" -> "keyword", 
  "info" -> "VideoTranscribe[video] recognizes speech in an audio track and \
adds it to video as a subtitle track."|>, <|"label" -> "ECcaEC", 
  "type" -> "text", "apply" -> "\\[CapitalAlpha]", 
  "detail" -> "CapitalAlpha"|>, <|"label" -> "ECcbEC", "type" -> "text", 
  "apply" -> "\\[CapitalBeta]", "detail" -> "CapitalBeta"|>, 
 <|"label" -> "ECcgEC", "type" -> "text", "apply" -> "\\[CapitalGamma]", 
  "detail" -> "CapitalGamma"|>, <|"label" -> "ECcdEC", "type" -> "text", 
  "apply" -> "\\[CapitalDelta]", "detail" -> "CapitalDelta"|>, 
 <|"label" -> "ECceEC", "type" -> "text", "apply" -> "\\[CapitalEpsilon]", 
  "detail" -> "CapitalEpsilon"|>, <|"label" -> "ECczEC", "type" -> "text", 
  "apply" -> "\\[CapitalZeta]", "detail" -> "CapitalZeta"|>, 
 <|"label" -> "ECceEC", "type" -> "text", "apply" -> "\\[CapitalEta]", 
  "detail" -> "CapitalEta"|>, <|"label" -> "ECctEC", "type" -> "text", 
  "apply" -> "\\[CapitalTheta]", "detail" -> "CapitalTheta"|>, 
 <|"label" -> "ECciEC", "type" -> "text", "apply" -> "\\[CapitalIota]", 
  "detail" -> "CapitalIota"|>, <|"label" -> "ECckEC", "type" -> "text", 
  "apply" -> "\\[CapitalKappa]", "detail" -> "CapitalKappa"|>, 
 <|"label" -> "ECclEC", "type" -> "text", "apply" -> "\\[CapitalLambda]", 
  "detail" -> "CapitalLambda"|>, <|"label" -> "ECcmEC", "type" -> "text", 
  "apply" -> "\\[CapitalMu]", "detail" -> "CapitalMu"|>, 
 <|"label" -> "ECcnEC", "type" -> "text", "apply" -> "\\[CapitalNu]", 
  "detail" -> "CapitalNu"|>, <|"label" -> "ECcxEC", "type" -> "text", 
  "apply" -> "\\[CapitalXi]", "detail" -> "CapitalXi"|>, 
 <|"label" -> "ECcoEC", "type" -> "text", "apply" -> "\\[CapitalOmicron]", 
  "detail" -> "CapitalOmicron"|>, <|"label" -> "ECcpEC", "type" -> "text", 
  "apply" -> "\\[CapitalPi]", "detail" -> "CapitalPi"|>, 
 <|"label" -> "ECcrEC", "type" -> "text", "apply" -> "\\[CapitalRho]", 
  "detail" -> "CapitalRho"|>, <|"label" -> "ECcsEC", "type" -> "text", 
  "apply" -> "\\[CapitalSigma]", "detail" -> "CapitalSigma"|>, 
 <|"label" -> "ECctEC", "type" -> "text", "apply" -> "\\[CapitalTau]", 
  "detail" -> "CapitalTau"|>, <|"label" -> "ECcuEC", "type" -> "text", 
  "apply" -> "\\[CapitalUpsilon]", "detail" -> "CapitalUpsilon"|>, 
 <|"label" -> "ECcpEC", "type" -> "text", "apply" -> "\\[CapitalPhi]", 
  "detail" -> "CapitalPhi"|>, <|"label" -> "ECccEC", "type" -> "text", 
  "apply" -> "\\[CapitalChi]", "detail" -> "CapitalChi"|>, 
 <|"label" -> "ECcpEC", "type" -> "text", "apply" -> "\\[CapitalPsi]", 
  "detail" -> "CapitalPsi"|>, <|"label" -> "ECcoEC", "type" -> "text", 
  "apply" -> "\\[CapitalOmega]", "detail" -> "CapitalOmega"|>, 
 <|"label" -> "ECalEC", "type" -> "text", "apply" -> "\\[Alpha]", 
  "detail" -> "Alpha"|>, <|"label" -> "ECbeEC", "type" -> "text", 
  "apply" -> "\\[Beta]", "detail" -> "Beta"|>, 
 <|"label" -> "ECgaEC", "type" -> "text", "apply" -> "\\[Gamma]", 
  "detail" -> "Gamma"|>, <|"label" -> "ECdeEC", "type" -> "text", 
  "apply" -> "\\[Delta]", "detail" -> "Delta"|>, 
 <|"label" -> "ECceEC", "type" -> "text", "apply" -> "\\[CurlyEpsilon]", 
  "detail" -> "CurlyEpsilon"|>, <|"label" -> "ECzeEC", "type" -> "text", 
  "apply" -> "\\[Zeta]", "detail" -> "Zeta"|>, 
 <|"label" -> "ECetEC", "type" -> "text", "apply" -> "\\[Eta]", 
  "detail" -> "Eta"|>, <|"label" -> "ECthEC", "type" -> "text", 
  "apply" -> "\\[Theta]", "detail" -> "Theta"|>, 
 <|"label" -> "ECioEC", "type" -> "text", "apply" -> "\\[Iota]", 
  "detail" -> "Iota"|>, <|"label" -> "ECkaEC", "type" -> "text", 
  "apply" -> "\\[Kappa]", "detail" -> "Kappa"|>, 
 <|"label" -> "EClaEC", "type" -> "text", "apply" -> "\\[Lambda]", 
  "detail" -> "Lambda"|>, <|"label" -> "ECmuEC", "type" -> "text", 
  "apply" -> "\\[Mu]", "detail" -> "Mu"|>, <|"label" -> "ECnuEC", 
  "type" -> "text", "apply" -> "\\[Nu]", "detail" -> "Nu"|>, 
 <|"label" -> "ECxiEC", "type" -> "text", "apply" -> "\\[Xi]", 
  "detail" -> "Xi"|>, <|"label" -> "EComEC", "type" -> "text", 
  "apply" -> "\\[Omicron]", "detail" -> "Omicron"|>, 
 <|"label" -> "ECpiEC", "type" -> "text", "apply" -> "\\[Pi]", 
  "detail" -> "Pi"|>, <|"label" -> "ECrhEC", "type" -> "text", 
  "apply" -> "\\[Rho]", "detail" -> "Rho"|>, 
 <|"label" -> "ECfiEC", "type" -> "text", "apply" -> "\\[FinalSigma]", 
  "detail" -> "FinalSigma"|>, <|"label" -> "ECsiEC", "type" -> "text", 
  "apply" -> "\\[Sigma]", "detail" -> "Sigma"|>, 
 <|"label" -> "ECtaEC", "type" -> "text", "apply" -> "\\[Tau]", 
  "detail" -> "Tau"|>, <|"label" -> "ECupEC", "type" -> "text", 
  "apply" -> "\\[Upsilon]", "detail" -> "Upsilon"|>, 
 <|"label" -> "ECcpEC", "type" -> "text", "apply" -> "\\[CurlyPhi]", 
  "detail" -> "CurlyPhi"|>, <|"label" -> "ECchEC", "type" -> "text", 
  "apply" -> "\\[Chi]", "detail" -> "Chi"|>, 
 <|"label" -> "ECpsEC", "type" -> "text", "apply" -> "\\[Psi]", 
  "detail" -> "Psi"|>, <|"label" -> "EComEC", "type" -> "text", 
  "apply" -> "\\[Omega]", "detail" -> "Omega"|>, 
 <|"label" -> "ECctEC", "type" -> "text", "apply" -> "\\[CurlyTheta]", 
  "detail" -> "CurlyTheta"|>, <|"label" -> "ECccEC", "type" -> "text", 
  "apply" -> "\\[CurlyCapitalUpsilon]", "detail" -> "CurlyCapitalUpsilon"|>, 
 <|"label" -> "ECphEC", "type" -> "text", "apply" -> "\\[Phi]", 
  "detail" -> "Phi"|>, <|"label" -> "ECcpEC", "type" -> "text", 
  "apply" -> "\\[CurlyPi]", "detail" -> "CurlyPi"|>, 
 <|"label" -> "ECcsEC", "type" -> "text", "apply" -> "\\[CapitalStigma]", 
  "detail" -> "CapitalStigma"|>, <|"label" -> "ECstEC", "type" -> "text", 
  "apply" -> "\\[Stigma]", "detail" -> "Stigma"|>, 
 <|"label" -> "ECcdEC", "type" -> "text", "apply" -> "\\[CapitalDigamma]", 
  "detail" -> "CapitalDigamma"|>, <|"label" -> "ECdiEC", "type" -> "text", 
  "apply" -> "\\[Digamma]", "detail" -> "Digamma"|>, 
 <|"label" -> "ECckEC", "type" -> "text", "apply" -> "\\[CapitalKoppa]", 
  "detail" -> "CapitalKoppa"|>, <|"label" -> "ECkoEC", "type" -> "text", 
  "apply" -> "\\[Koppa]", "detail" -> "Koppa"|>, 
 <|"label" -> "ECcsEC", "type" -> "text", "apply" -> "\\[CapitalSampi]", 
  "detail" -> "CapitalSampi"|>, <|"label" -> "ECsaEC", "type" -> "text", 
  "apply" -> "\\[Sampi]", "detail" -> "Sampi"|>, 
 <|"label" -> "ECckEC", "type" -> "text", "apply" -> "\\[CurlyKappa]", 
  "detail" -> "CurlyKappa"|>, <|"label" -> "ECcrEC", "type" -> "text", 
  "apply" -> "\\[CurlyRho]", "detail" -> "CurlyRho"|>, 
 <|"label" -> "ECepEC", "type" -> "text", "apply" -> "\\[Epsilon]", 
  "detail" -> "Epsilon"|>}
