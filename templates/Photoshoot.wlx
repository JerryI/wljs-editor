Window[OptionsPattern[]] := With[{promise = OptionValue["Data"]["Promise"], CommandChannel = OptionValue["Data"]["Channel"],  Title = OptionValue["Data"]["Title"], loader = OptionValue["Data"]["LazyLoad"], client = OptionValue["Data"]["Client"]},
    With[{
        Uid = CreateUUID[]
      },


      EventHandler[Uid, {
        "Ok" -> Function[choice,
            Echo["Choice:"];Echo[choice];
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[promise, Resolve, <|"Client" -> client, "Result"->choice|>];
        ],
        _ -> Function[Null,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[promise, Reject, <|"Client" -> client|>];
        ]
      }];

      With[{

      },
    
      <div class="relative z-inf" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 dark:bg-gray-800 dark:bg-opacity-75 bg-opacity-75 transition-opacity"></div>
         <div class="fixed flex inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20">
            <div class="mx-auto w-3/6 my-auto transform divide-y divide-gray-500 divide-opacity-10 overflow-hidden rounded-xl bg-white bg-opacity-60 shadow-2xl ring-1 ring-black ring-opacity-5 backdrop-blur backdrop-filter transition-all dark:bg-gray-700">
               <ul class="max-h-80 scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto p-0">
                  <li class="p-4 pt-2 list-none">
                     <h2 class="mb-2 mt-2 text-xs font-semibold text-gray-900 dark:text-gray-400"><Title/></h2>
                     <div id="{Uid}" class="text-sm text-gray-700 flex flex-col gap-y-1 p-0">
                        
                     </div>

                     <WebUIJSBind Event={CommandChannel}>
                        //will be executed once
                        const doc = document.getElementById('<Uid/>');

                        //binding to event patterns
                        this.on('Pattern 1', async (data) => {
                            const assoc = await interpretate(data, {hold:true});
                            const payload = await interpretate(assoc.Payload, {});
                            alert(payload);
                        });
                    </WebUIJSBind>
                  </li>
               </ul>
            </div>
         </div>
      </div>
     ]
    ]
];

Options[Window] = {"Channel" -> "", "Data" -> <| |>};

Component[OptionsPattern[]] := With[{Event = OptionValue["Events"], Channel = CreateUUID[], LazyLoad = CreateUUID[]}, Module[{loaded = False},
    EventHandler[Event, {
        "Photoshoot" -> Function[data,
            EventFire[LazyLoad, "Load", Join[data, <|"Client" -> data["Client"], "LazyLoad" -> LazyLoad|>]];
        ]
    }];

    <WebUILazyLoad Event={LazyLoad}>
        <Window Channel={Channel} Data={WebUILazyLoadDataProvided}/>
    </WebUILazyLoad>
]];

Options[Component] = {"Events" -> ""}

Component